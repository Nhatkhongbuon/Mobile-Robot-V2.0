
Mobile Robot 1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d80  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006e90  08006e90  00007e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c0  080070c0  000090e8  2**0
                  CONTENTS
  4 .ARM          00000000  080070c0  080070c0  000090e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070c0  080070c0  000090e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070c4  080070c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  080070c8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200000e8  080071b0  000090e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080071b0  000093e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000090e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089ee  00000000  00000000  00009111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001858  00000000  00000000  00011aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00013358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ed  00000000  00000000  00013da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a7a  00000000  00000000  0001458d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba8e  00000000  00000000  0002c007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c3c  00000000  00000000  00037a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c06d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003444  00000000  00000000  000c0714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000c3b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e8 	.word	0x200000e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e78 	.word	0x08006e78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ec 	.word	0x200000ec
 800014c:	08006e78 	.word	0x08006e78

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <pulse_modulation>:
	double k_phi = 9.76e-3;
	double R_a = 4.35;

	double number = 0;

	void pulse_modulation(uint16_t *duty_cycle1, uint16_t *duty_cycle2) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, *duty_cycle1); // left
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	881a      	ldrh	r2, [r3, #0]
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <pulse_modulation+0x28>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, *duty_cycle2); // right
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	881a      	ldrh	r2, [r3, #0]
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <pulse_modulation+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20000194 	.word	0x20000194

08000aa4 <convert_v_to_pwm>:


	void convert_v_to_pwm(uint16_t *duty_cycle1, uint16_t *duty_cycle2, double voltage_left, double voltage_right) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	e9c7 2300 	strd	r2, r3, [r7]
		*duty_cycle1 = (int)((voltage_left / 12) * 1000);
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <convert_v_to_pwm+0x80>)
 8000ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000abc:	f7ff fe2e 	bl	800071c <__aeabi_ddiv>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <convert_v_to_pwm+0x84>)
 8000ace:	f7ff fcfb 	bl	80004c8 <__aeabi_dmul>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff ffa5 	bl	8000a28 <__aeabi_d2iz>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	801a      	strh	r2, [r3, #0]
		*duty_cycle2 = (int)((voltage_right / 12) * 1000);
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <convert_v_to_pwm+0x80>)
 8000aec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000af0:	f7ff fe14 	bl	800071c <__aeabi_ddiv>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	4610      	mov	r0, r2
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <convert_v_to_pwm+0x84>)
 8000b02:	f7ff fce1 	bl	80004c8 <__aeabi_dmul>
 8000b06:	4602      	mov	r2, r0
 8000b08:	460b      	mov	r3, r1
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f7ff ff8b 	bl	8000a28 <__aeabi_d2iz>
 8000b12:	4603      	mov	r3, r0
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	801a      	strh	r2, [r3, #0]
	}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40280000 	.word	0x40280000
 8000b28:	408f4000 	.word	0x408f4000
 8000b2c:	00000000 	.word	0x00000000

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b34:	b0a3      	sub	sp, #140	@ 0x8c
 8000b36:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b38:	f002 fd5e 	bl	80035f8 <HAL_Init>

  /* USER CODE BEGIN Init */

      //Controller parameters
      matrix K;
      allocate_matrix(&K, 3 ,1);
 8000b3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b40:	2201      	movs	r2, #1
 8000b42:	2103      	movs	r1, #3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 f9b9 	bl	8002ebc <allocate_matrix>
      K.index[0][0] = 1;
 8000b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	f04f 0200 	mov.w	r2, #0
 8000b52:	4b91      	ldr	r3, [pc, #580]	@ (8000d98 <main+0x268>)
 8000b54:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[1][0] = 1;
 8000b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	6819      	ldr	r1, [r3, #0]
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	4b8d      	ldr	r3, [pc, #564]	@ (8000d98 <main+0x268>)
 8000b64:	e9c1 2300 	strd	r2, r3, [r1]
      K.index[2][0] = 1;
 8000b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	4b89      	ldr	r3, [pc, #548]	@ (8000d98 <main+0x268>)
 8000b74:	e9c1 2300 	strd	r2, r3, [r1]

      matrix K_4;
      allocate_matrix(&K_4, 2, 2);
 8000b78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 f99b 	bl	8002ebc <allocate_matrix>
      K_4.index[0][0] = 1;
 8000b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	4b82      	ldr	r3, [pc, #520]	@ (8000d98 <main+0x268>)
 8000b90:	e9c1 2300 	strd	r2, r3, [r1]
      K_4.index[1][1] = 1;
 8000b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b96:	3304      	adds	r3, #4
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f103 0108 	add.w	r1, r3, #8
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8000d98 <main+0x268>)
 8000ba4:	e9c1 2300 	strd	r2, r3, [r1]
      //.

      matrix v_r;
      allocate_matrix(&v_r, 2, 1);
 8000ba8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bac:	2201      	movs	r2, #1
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 f983 	bl	8002ebc <allocate_matrix>
//      v_r.index[0][0] = 0.5;
//      v_r.index[1][0] = 0.5;

      matrix v;
      allocate_matrix(&v, 2, 1);
 8000bb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 f97c 	bl	8002ebc <allocate_matrix>

      matrix v_c;
      allocate_matrix(&v_c, 2, 1);
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 f975 	bl	8002ebc <allocate_matrix>

      matrix v_c_pre;
      allocate_matrix(&v_c_pre, 2, 1);
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 f96e 	bl	8002ebc <allocate_matrix>

      matrix u;
      allocate_matrix(&u, 2, 1);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2201      	movs	r2, #1
 8000be6:	2102      	movs	r1, #2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 f967 	bl	8002ebc <allocate_matrix>

      matrix torque;
      allocate_matrix(&torque, 2, 1);
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 f960 	bl	8002ebc <allocate_matrix>

  	  velocity_control_input(&v_c, &v_c_pre, v_r, K, e_x, e_y, e_theta);
 8000bfc:	4b67      	ldr	r3, [pc, #412]	@ (8000d9c <main+0x26c>)
 8000bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c02:	4967      	ldr	r1, [pc, #412]	@ (8000da0 <main+0x270>)
 8000c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c08:	4c66      	ldr	r4, [pc, #408]	@ (8000da4 <main+0x274>)
 8000c0a:	cc30      	ldmia	r4, {r4, r5}
 8000c0c:	f107 0c18 	add.w	ip, r7, #24
 8000c10:	f107 0620 	add.w	r6, r7, #32
 8000c14:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8000c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000c1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c20:	466a      	mov	r2, sp
 8000c22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c2a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c32:	cb0c      	ldmia	r3, {r2, r3}
 8000c34:	4661      	mov	r1, ip
 8000c36:	4630      	mov	r0, r6
 8000c38:	f001 fd72 	bl	8002720 <velocity_control_input>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 fad2 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 fc1c 	bl	800147c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c44:	f000 fb0a 	bl	800125c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c48:	f000 fb60 	bl	800130c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c4c:	f000 fbb2 	bl	80013b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Motor left
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c50:	2108      	movs	r1, #8
 8000c52:	4855      	ldr	r0, [pc, #340]	@ (8000da8 <main+0x278>)
 8000c54:	f003 fbc8 	bl	80043e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4854      	ldr	r0, [pc, #336]	@ (8000dac <main+0x27c>)
 8000c5c:	f003 fd08 	bl	8004670 <HAL_TIM_Encoder_Start>
  // Motor right
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c60:	210c      	movs	r1, #12
 8000c62:	4851      	ldr	r0, [pc, #324]	@ (8000da8 <main+0x278>)
 8000c64:	f003 fbc0 	bl	80043e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4851      	ldr	r0, [pc, #324]	@ (8000db0 <main+0x280>)
 8000c6c:	f003 fd00 	bl	8004670 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  present_time = HAL_GetTick();
 8000c70:	f002 fd1a 	bl	80036a8 <HAL_GetTick>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fbac 	bl	80003d4 <__aeabi_ui2d>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	494c      	ldr	r1, [pc, #304]	@ (8000db4 <main+0x284>)
 8000c82:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
	  double t, h;
	  encoder_cnt1 = 0;//__HAL_TIM_GET_COUNTER(&htim1);
 8000c86:	494c      	ldr	r1, [pc, #304]	@ (8000db8 <main+0x288>)
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e9c1 2300 	strd	r2, r3, [r1]
	  encoder_cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c94:	4b46      	ldr	r3, [pc, #280]	@ (8000db0 <main+0x280>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fb9a 	bl	80003d4 <__aeabi_ui2d>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4945      	ldr	r1, [pc, #276]	@ (8000dbc <main+0x28c>)
 8000ca6:	e9c1 2300 	strd	r2, r3, [r1]

	  if(number == 0)
 8000caa:	4b45      	ldr	r3, [pc, #276]	@ (8000dc0 <main+0x290>)
 8000cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	f7ff fe6e 	bl	8000998 <__aeabi_dcmpeq>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d014      	beq.n	8000cec <main+0x1bc>
	  {
		  number += 1;
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc0 <main+0x290>)
 8000cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	4b32      	ldr	r3, [pc, #200]	@ (8000d98 <main+0x268>)
 8000cce:	f7ff fa45 	bl	800015c <__adddf3>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	493a      	ldr	r1, [pc, #232]	@ (8000dc0 <main+0x290>)
 8000cd8:	e9c1 2300 	strd	r2, r3, [r1]
		  encoder2_previous = 0;
 8000cdc:	4939      	ldr	r1, [pc, #228]	@ (8000dc4 <main+0x294>)
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e9c1 2300 	strd	r2, r3, [r1]
 8000cea:	e079      	b.n	8000de0 <main+0x2b0>
	  }
	  else if(number == 1)
 8000cec:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <main+0x290>)
 8000cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	4b28      	ldr	r3, [pc, #160]	@ (8000d98 <main+0x268>)
 8000cf8:	f7ff fe4e 	bl	8000998 <__aeabi_dcmpeq>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d018      	beq.n	8000d34 <main+0x204>
			  	{
			  		encoder2_previous = 62000;
 8000d02:	4930      	ldr	r1, [pc, #192]	@ (8000dc4 <main+0x294>)
 8000d04:	a322      	add	r3, pc, #136	@ (adr r3, 8000d90 <main+0x260>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	e9c1 2300 	strd	r2, r3, [r1]
			  		number += 1;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc0 <main+0x290>)
 8000d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <main+0x268>)
 8000d1a:	f7ff fa1f 	bl	800015c <__adddf3>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4927      	ldr	r1, [pc, #156]	@ (8000dc0 <main+0x290>)
 8000d24:	e9c1 2300 	strd	r2, r3, [r1]
			  		t = encoder_cnt2;
 8000d28:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <main+0x28c>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8000d32:	e055      	b.n	8000de0 <main+0x2b0>
			  	}
	  else if(number == 2)
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <main+0x290>)
 8000d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d42:	f7ff fe29 	bl	8000998 <__aeabi_dcmpeq>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d03f      	beq.n	8000dcc <main+0x29c>
			  	{
		  		encoder1_previous = 0;//encoder_cnt1;
 8000d4c:	491e      	ldr	r1, [pc, #120]	@ (8000dc8 <main+0x298>)
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	e9c1 2300 	strd	r2, r3, [r1]
		  		encoder2_previous = t;
 8000d5a:	491a      	ldr	r1, [pc, #104]	@ (8000dc4 <main+0x294>)
 8000d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000d60:	e9c1 2300 	strd	r2, r3, [r1]
		  		h = encoder_cnt2;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <main+0x28c>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		  		number += 1;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <main+0x290>)
 8000d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <main+0x268>)
 8000d7a:	f7ff f9ef 	bl	800015c <__adddf3>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	490f      	ldr	r1, [pc, #60]	@ (8000dc0 <main+0x290>)
 8000d84:	e9c1 2300 	strd	r2, r3, [r1]
 8000d88:	e02a      	b.n	8000de0 <main+0x2b0>
 8000d8a:	bf00      	nop
 8000d8c:	f3af 8000 	nop.w
 8000d90:	00000000 	.word	0x00000000
 8000d94:	40ee4600 	.word	0x40ee4600
 8000d98:	3ff00000 	.word	0x3ff00000
 8000d9c:	20000210 	.word	0x20000210
 8000da0:	20000218 	.word	0x20000218
 8000da4:	20000220 	.word	0x20000220
 8000da8:	20000194 	.word	0x20000194
 8000dac:	20000104 	.word	0x20000104
 8000db0:	2000014c 	.word	0x2000014c
 8000db4:	20000278 	.word	0x20000278
 8000db8:	20000238 	.word	0x20000238
 8000dbc:	20000240 	.word	0x20000240
 8000dc0:	20000288 	.word	0x20000288
 8000dc4:	20000270 	.word	0x20000270
 8000dc8:	20000268 	.word	0x20000268
			  	}

	  else
	  	{
	  		encoder2_previous = h;
 8000dcc:	4960      	ldr	r1, [pc, #384]	@ (8000f50 <main+0x420>)
 8000dce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000dd2:	e9c1 2300 	strd	r2, r3, [r1]
	  		h = encoder_cnt2;
 8000dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f54 <main+0x424>)
 8000dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ddc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	  	}


	  if(HAL_GetTick() - present_time > sample_time) {
 8000de0:	f002 fc62 	bl	80036a8 <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff faf4 	bl	80003d4 <__aeabi_ui2d>
 8000dec:	4b5a      	ldr	r3, [pc, #360]	@ (8000f58 <main+0x428>)
 8000dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df2:	f7ff f9b1 	bl	8000158 <__aeabi_dsub>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4b57      	ldr	r3, [pc, #348]	@ (8000f5c <main+0x42c>)
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	f7ff fdf0 	bl	80009e8 <__aeabi_dcmpgt>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 81b9 	beq.w	8001182 <main+0x652>
		  	if(encoder_cnt1 - encoder1_previous < 0) {
 8000e10:	4b53      	ldr	r3, [pc, #332]	@ (8000f60 <main+0x430>)
 8000e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e16:	4b53      	ldr	r3, [pc, #332]	@ (8000f64 <main+0x434>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff f99c 	bl	8000158 <__aeabi_dsub>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	f7ff fdbc 	bl	80009ac <__aeabi_dcmplt>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d028      	beq.n	8000e8c <main+0x35c>
		  		left_angular_velocity = ((encoder_cnt1 - encoder1_previous + 65535) / 1320) * rate;
 8000e3a:	4b49      	ldr	r3, [pc, #292]	@ (8000f60 <main+0x430>)
 8000e3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e40:	4b48      	ldr	r3, [pc, #288]	@ (8000f64 <main+0x434>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff f987 	bl	8000158 <__aeabi_dsub>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	a33d      	add	r3, pc, #244	@ (adr r3, 8000f48 <main+0x418>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff f980 	bl	800015c <__adddf3>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	4b3f      	ldr	r3, [pc, #252]	@ (8000f68 <main+0x438>)
 8000e6a:	f7ff fc57 	bl	800071c <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <main+0x43c>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fb24 	bl	80004c8 <__aeabi_dmul>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	493a      	ldr	r1, [pc, #232]	@ (8000f70 <main+0x440>)
 8000e86:	e9c1 2300 	strd	r2, r3, [r1]
 8000e8a:	e01e      	b.n	8000eca <main+0x39a>
		  	}
		  	else {
		  		left_angular_velocity = ((encoder_cnt1 - encoder1_previous) / 1320) * rate;
 8000e8c:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <main+0x430>)
 8000e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e92:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <main+0x434>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	f7ff f95e 	bl	8000158 <__aeabi_dsub>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <main+0x438>)
 8000eaa:	f7ff fc37 	bl	800071c <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <main+0x43c>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fb04 	bl	80004c8 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	492a      	ldr	r1, [pc, #168]	@ (8000f70 <main+0x440>)
 8000ec6:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

		  	if(encoder_cnt2 - encoder2_previous < 0) {
 8000eca:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <main+0x424>)
 8000ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <main+0x420>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff f93f 	bl	8000158 <__aeabi_dsub>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	f7ff fd5f 	bl	80009ac <__aeabi_dcmplt>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d041      	beq.n	8000f78 <main+0x448>
		  		right_angular_velocity = ((encoder_cnt1 - encoder1_previous + 65535) / 1320) * rate;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <main+0x430>)
 8000ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <main+0x434>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff f92a 	bl	8000158 <__aeabi_dsub>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000f48 <main+0x418>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff f923 	bl	800015c <__adddf3>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <main+0x438>)
 8000f24:	f7ff fbfa 	bl	800071c <__aeabi_ddiv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <main+0x43c>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff fac7 	bl	80004c8 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <main+0x444>)
 8000f40:	e9c1 2300 	strd	r2, r3, [r1]
 8000f44:	e037      	b.n	8000fb6 <main+0x486>
 8000f46:	bf00      	nop
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40efffe0 	.word	0x40efffe0
 8000f50:	20000270 	.word	0x20000270
 8000f54:	20000240 	.word	0x20000240
 8000f58:	20000278 	.word	0x20000278
 8000f5c:	20000010 	.word	0x20000010
 8000f60:	20000238 	.word	0x20000238
 8000f64:	20000268 	.word	0x20000268
 8000f68:	4094a000 	.word	0x4094a000
 8000f6c:	20000018 	.word	0x20000018
 8000f70:	200001f0 	.word	0x200001f0
 8000f74:	200001f8 	.word	0x200001f8
		  	}
		  	else {
		  		right_angular_velocity = ((encoder_cnt2 - encoder2_previous) / 1320) * rate;
 8000f78:	4b82      	ldr	r3, [pc, #520]	@ (8001184 <main+0x654>)
 8000f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f7e:	4b82      	ldr	r3, [pc, #520]	@ (8001188 <main+0x658>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff f8e8 	bl	8000158 <__aeabi_dsub>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b7d      	ldr	r3, [pc, #500]	@ (800118c <main+0x65c>)
 8000f96:	f7ff fbc1 	bl	800071c <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8001190 <main+0x660>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fa8e 	bl	80004c8 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4978      	ldr	r1, [pc, #480]	@ (8001194 <main+0x664>)
 8000fb2:	e9c1 2300 	strd	r2, r3, [r1]
		  	}

		  	encoder_test_1 = encoder_cnt1 - encoder1_previous;
 8000fb6:	4b78      	ldr	r3, [pc, #480]	@ (8001198 <main+0x668>)
 8000fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fbc:	4b77      	ldr	r3, [pc, #476]	@ (800119c <main+0x66c>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff f8c9 	bl	8000158 <__aeabi_dsub>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4975      	ldr	r1, [pc, #468]	@ (80011a0 <main+0x670>)
 8000fcc:	e9c1 2300 	strd	r2, r3, [r1]
			encoder_test_2 = encoder_cnt2 - encoder2_previous;
 8000fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001184 <main+0x654>)
 8000fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8001188 <main+0x658>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff f8bc 	bl	8000158 <__aeabi_dsub>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	496f      	ldr	r1, [pc, #444]	@ (80011a4 <main+0x674>)
 8000fe6:	e9c1 2300 	strd	r2, r3, [r1]

			desired_trajectory(&v_r, x_r, y_r);
 8000fea:	4b6f      	ldr	r3, [pc, #444]	@ (80011a8 <main+0x678>)
 8000fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff0:	4b6e      	ldr	r3, [pc, #440]	@ (80011ac <main+0x67c>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000ffa:	e9cd 2300 	strd	r2, r3, [sp]
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	f000 fc00 	bl	8001808 <desired_trajectory>
	  		velocity(&v, left_angular_velocity, right_angular_velocity);
 8001008:	4b69      	ldr	r3, [pc, #420]	@ (80011b0 <main+0x680>)
 800100a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100e:	4b61      	ldr	r3, [pc, #388]	@ (8001194 <main+0x664>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001018:	e9cd 2300 	strd	r2, r3, [sp]
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4620      	mov	r0, r4
 8001022:	f001 fb1d 	bl	8002660 <velocity>
	  		errors(&e_x, &e_y, &e_theta, x, y, theta, x_r, y_r, theta_r);
 8001026:	4b63      	ldr	r3, [pc, #396]	@ (80011b4 <main+0x684>)
 8001028:	cb18      	ldmia	r3, {r3, r4}
 800102a:	e9c7 3400 	strd	r3, r4, [r7]
 800102e:	4962      	ldr	r1, [pc, #392]	@ (80011b8 <main+0x688>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	4c61      	ldr	r4, [pc, #388]	@ (80011bc <main+0x68c>)
 8001036:	cc30      	ldmia	r4, {r4, r5}
 8001038:	4e5b      	ldr	r6, [pc, #364]	@ (80011a8 <main+0x678>)
 800103a:	e9d6 8900 	ldrd	r8, r9, [r6]
 800103e:	4e5b      	ldr	r6, [pc, #364]	@ (80011ac <main+0x67c>)
 8001040:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8001044:	4e5e      	ldr	r6, [pc, #376]	@ (80011c0 <main+0x690>)
 8001046:	e9d6 2300 	ldrd	r2, r3, [r6]
 800104a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800104e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001052:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001056:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800105a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800105e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001062:	e9cd 3400 	strd	r3, r4, [sp]
 8001066:	4a57      	ldr	r2, [pc, #348]	@ (80011c4 <main+0x694>)
 8001068:	4957      	ldr	r1, [pc, #348]	@ (80011c8 <main+0x698>)
 800106a:	4858      	ldr	r0, [pc, #352]	@ (80011cc <main+0x69c>)
 800106c:	f001 fa78 	bl	8002560 <errors>
	  		velocity_control_input(&v_c, &v_c_pre, v_r, K, e_x, e_y, e_theta);
 8001070:	4b56      	ldr	r3, [pc, #344]	@ (80011cc <main+0x69c>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	4954      	ldr	r1, [pc, #336]	@ (80011c8 <main+0x698>)
 8001078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800107c:	4c51      	ldr	r4, [pc, #324]	@ (80011c4 <main+0x694>)
 800107e:	cc30      	ldmia	r4, {r4, r5}
 8001080:	f107 0c18 	add.w	ip, r7, #24
 8001084:	f107 0620 	add.w	r6, r7, #32
 8001088:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800108c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001094:	466a      	mov	r2, sp
 8001096:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800109a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800109e:	e882 0003 	stmia.w	r2, {r0, r1}
 80010a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010a6:	cb0c      	ldmia	r3, {r2, r3}
 80010a8:	4661      	mov	r1, ip
 80010aa:	4630      	mov	r0, r6
 80010ac:	f001 fb38 	bl	8002720 <velocity_control_input>
	  		control_input_signal(&u, v_c, v_c_pre, v, K_4);
 80010b0:	f107 0410 	add.w	r4, r7, #16
 80010b4:	aa03      	add	r2, sp, #12
 80010b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010be:	e882 0003 	stmia.w	r2, {r0, r1}
 80010c2:	aa01      	add	r2, sp, #4
 80010c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	f107 0220 	add.w	r2, r7, #32
 80010da:	ca06      	ldmia	r2, {r1, r2}
 80010dc:	4620      	mov	r0, r4
 80010de:	f001 fbbb 	bl	8002858 <control_input_signal>
	  		cal_torque(&torque, v, u);
 80010e2:	f107 0008 	add.w	r0, r7, #8
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010f0:	ca06      	ldmia	r2, {r1, r2}
 80010f2:	f001 fd35 	bl	8002b60 <cal_torque>
	  		voltage(&voltage_left, &voltage_right, left_angular_velocity, right_angular_velocity, &torque);
 80010f6:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <main+0x680>)
 80010f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <main+0x664>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f107 0408 	add.w	r4, r7, #8
 8001106:	9402      	str	r4, [sp, #8]
 8001108:	e9cd 2300 	strd	r2, r3, [sp]
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	492f      	ldr	r1, [pc, #188]	@ (80011d0 <main+0x6a0>)
 8001112:	4830      	ldr	r0, [pc, #192]	@ (80011d4 <main+0x6a4>)
 8001114:	f001 fe5c 	bl	8002dd0 <voltage>
	  		next_state(&x, &y, &theta, &x_r, &y_r, &theta_r, v, v_r);
 8001118:	aa04      	add	r2, sp, #16
 800111a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800111e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001122:	e882 0003 	stmia.w	r2, {r0, r1}
 8001126:	aa02      	add	r2, sp, #8
 8001128:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800112c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001130:	e882 0003 	stmia.w	r2, {r0, r1}
 8001134:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <main+0x690>)
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <main+0x67c>)
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <main+0x678>)
 800113e:	4a1f      	ldr	r2, [pc, #124]	@ (80011bc <main+0x68c>)
 8001140:	491d      	ldr	r1, [pc, #116]	@ (80011b8 <main+0x688>)
 8001142:	481c      	ldr	r0, [pc, #112]	@ (80011b4 <main+0x684>)
 8001144:	f001 fc2e 	bl	80029a4 <next_state>
	  		convert_v_to_pwm(&duty_cycle1, &duty_cycle2, voltage_left, voltage_right);
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <main+0x6a4>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <main+0x6a0>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	e9cd 2300 	strd	r2, r3, [sp]
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	491e      	ldr	r1, [pc, #120]	@ (80011d8 <main+0x6a8>)
 800115e:	481f      	ldr	r0, [pc, #124]	@ (80011dc <main+0x6ac>)
 8001160:	f7ff fca0 	bl	8000aa4 <convert_v_to_pwm>
	  		pulse_modulation(&duty_cycle1, &duty_cycle2);
 8001164:	491c      	ldr	r1, [pc, #112]	@ (80011d8 <main+0x6a8>)
 8001166:	481d      	ldr	r0, [pc, #116]	@ (80011dc <main+0x6ac>)
 8001168:	f7ff fc86 	bl	8000a78 <pulse_modulation>
//
//	  		pulse_modulation_test();
	  		present_time = HAL_GetTick();
 800116c:	f002 fa9c 	bl	80036a8 <HAL_GetTick>
 8001170:	4603      	mov	r3, r0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f92e 	bl	80003d4 <__aeabi_ui2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4918      	ldr	r1, [pc, #96]	@ (80011e0 <main+0x6b0>)
 800117e:	e9c1 2300 	strd	r2, r3, [r1]
  {
 8001182:	e580      	b.n	8000c86 <main+0x156>
 8001184:	20000240 	.word	0x20000240
 8001188:	20000270 	.word	0x20000270
 800118c:	4094a000 	.word	0x4094a000
 8001190:	20000018 	.word	0x20000018
 8001194:	200001f8 	.word	0x200001f8
 8001198:	20000238 	.word	0x20000238
 800119c:	20000268 	.word	0x20000268
 80011a0:	20000258 	.word	0x20000258
 80011a4:	20000260 	.word	0x20000260
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000200 	.word	0x20000200
 80011b0:	200001f0 	.word	0x200001f0
 80011b4:	20000000 	.word	0x20000000
 80011b8:	200001e0 	.word	0x200001e0
 80011bc:	200001e8 	.word	0x200001e8
 80011c0:	20000208 	.word	0x20000208
 80011c4:	20000220 	.word	0x20000220
 80011c8:	20000218 	.word	0x20000218
 80011cc:	20000210 	.word	0x20000210
 80011d0:	20000230 	.word	0x20000230
 80011d4:	20000228 	.word	0x20000228
 80011d8:	20000282 	.word	0x20000282
 80011dc:	20000280 	.word	0x20000280
 80011e0:	20000278 	.word	0x20000278

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b090      	sub	sp, #64	@ 0x40
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2228      	movs	r2, #40	@ 0x28
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fede 	bl	8004fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120a:	2301      	movs	r3, #1
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120e:	2310      	movs	r3, #16
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fcb6 	bl	8003b8c <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001226:	f000 f96d 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ff24 	bl	8004090 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800124e:	f000 f959 	bl	8001504 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3740      	adds	r7, #64	@ 0x40
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	@ 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	@ 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fea2 	bl	8004fb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001278:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <MX_TIM1_Init+0xa8>)
 800127a:	4a23      	ldr	r2, [pc, #140]	@ (8001308 <MX_TIM1_Init+0xac>)
 800127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <MX_TIM1_Init+0xa8>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <MX_TIM1_Init+0xa8>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <MX_TIM1_Init+0xa8>)
 800128c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <MX_TIM1_Init+0xa8>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_TIM1_Init+0xa8>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <MX_TIM1_Init+0xa8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a4:	2303      	movs	r3, #3
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	@ (8001304 <MX_TIM1_Init+0xa8>)
 80012d0:	f003 f92c 	bl	800452c <HAL_TIM_Encoder_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80012da:	f000 f913 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <MX_TIM1_Init+0xa8>)
 80012ec:	f003 fd2a 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80012f6:	f000 f905 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	@ 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000104 	.word	0x20000104
 8001308:	40012c00 	.word	0x40012c00

0800130c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2224      	movs	r2, #36	@ 0x24
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f003 fe4a 	bl	8004fb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 800132a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800132e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800133c:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 800133e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001350:	2303      	movs	r3, #3
 8001352:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001368:	2301      	movs	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 800137c:	f003 f8d6 	bl	800452c <HAL_TIM_Encoder_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001386:	f000 f8bd 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <MX_TIM2_Init+0xa4>)
 8001398:	f003 fcd4 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013a2:	f000 f8af 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	@ 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000014c 	.word	0x2000014c

080013b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d6:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <MX_TIM4_Init+0xc0>)
 80013d8:	4a27      	ldr	r2, [pc, #156]	@ (8001478 <MX_TIM4_Init+0xc4>)
 80013da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <MX_TIM4_Init+0xc0>)
 80013de:	2223      	movs	r2, #35	@ 0x23
 80013e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <MX_TIM4_Init+0xc0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <MX_TIM4_Init+0xc0>)
 80013ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <MX_TIM4_Init+0xc0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <MX_TIM4_Init+0xc0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013fc:	481d      	ldr	r0, [pc, #116]	@ (8001474 <MX_TIM4_Init+0xc0>)
 80013fe:	f002 ffa3 	bl	8004348 <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 f87c 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	4816      	ldr	r0, [pc, #88]	@ (8001474 <MX_TIM4_Init+0xc0>)
 800141c:	f003 fc92 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001426:	f000 f86d 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	@ 0x60
 800142c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	@ (8001474 <MX_TIM4_Init+0xc0>)
 8001442:	f003 f9a3 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800144c:	f000 f85a 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	220c      	movs	r2, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	@ (8001474 <MX_TIM4_Init+0xc0>)
 8001458:	f003 f998 	bl	800478c <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001462:	f000 f84f 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001466:	4803      	ldr	r0, [pc, #12]	@ (8001474 <MX_TIM4_Init+0xc0>)
 8001468:	f000 f90c 	bl	8001684 <HAL_TIM_MspPostInit>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	@ 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000194 	.word	0x20000194
 8001478:	40000800 	.word	0x40000800

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_GPIO_Init+0x80>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a19      	ldr	r2, [pc, #100]	@ (80014fc <MX_GPIO_Init+0x80>)
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_GPIO_Init+0x80>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_GPIO_Init+0x80>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a13      	ldr	r2, [pc, #76]	@ (80014fc <MX_GPIO_Init+0x80>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_GPIO_Init+0x80>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_GPIO_Init+0x80>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <MX_GPIO_Init+0x80>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_GPIO_Init+0x80>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CFG0_Pin CFG1_Pin CFG2_Pin */
  GPIO_InitStruct.Pin = CFG0_Pin|CFG1_Pin|CFG2_Pin;
 80014d8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_GPIO_Init+0x84>)
 80014ee:	f002 f9c9 	bl	8003884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010c00 	.word	0x40010c00

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <Error_Handler+0x8>

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a14      	ldr	r2, [pc, #80]	@ (800156c <HAL_MspInit+0x5c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_MspInit+0x5c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_MspInit+0x60>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_MspInit+0x60>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000

08001574 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2b      	ldr	r2, [pc, #172]	@ (800163c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d125      	bne.n	80015e0 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001594:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a29      	ldr	r2, [pc, #164]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 800159a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a23      	ldr	r2, [pc, #140]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN1_1_Pin|EN1_2_Pin;
 80015c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0318 	add.w	r3, r7, #24
 80015d6:	4619      	mov	r1, r3
 80015d8:	481a      	ldr	r0, [pc, #104]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xd0>)
 80015da:	f002 f953 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015de:	e028      	b.n	8001632 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e8:	d123      	bne.n	8001632 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a0e      	ldr	r2, [pc, #56]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EN2_1_Pin|EN2_2_Pin;
 800161a:	2303      	movs	r3, #3
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001622:	2301      	movs	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xd0>)
 800162e:	f002 f929 	bl	8003884 <HAL_GPIO_Init>
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	@ 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40012c00 	.word	0x40012c00
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800

08001648 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_TIM_PWM_MspInit+0x34>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d10b      	bne.n	8001672 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_TIM_PWM_MspInit+0x38>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_TIM_PWM_MspInit+0x38>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_TIM_PWM_MspInit+0x38>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40000800 	.word	0x40000800
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <HAL_TIM_MspPostInit+0x5c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d118      	bne.n	80016d6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_TIM_MspPostInit+0x60>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a0e      	ldr	r2, [pc, #56]	@ (80016e4 <HAL_TIM_MspPostInit+0x60>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_TIM_MspPostInit+0x60>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = MT1_Pin|MT2_Pin;
 80016bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <HAL_TIM_MspPostInit+0x64>)
 80016d2:	f002 f8d7 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010c00 	.word	0x40010c00

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f001 ffa2 	bl	8003684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800174c:	4a14      	ldr	r2, [pc, #80]	@ (80017a0 <_sbrk+0x5c>)
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <_sbrk+0x60>)
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <_sbrk+0x64>)
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <_sbrk+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d207      	bcs.n	8001784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001774:	f003 fc36 	bl	8004fe4 <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	220c      	movs	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e009      	b.n	8001798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <_sbrk+0x64>)
 8001794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20005000 	.word	0x20005000
 80017a4:	00000400 	.word	0x00000400
 80017a8:	20000290 	.word	0x20000290
 80017ac:	200003e8 	.word	0x200003e8

080017b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff fff8 	bl	80017b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c2:	490c      	ldr	r1, [pc, #48]	@ (80017f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c4:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017d8:	4c09      	ldr	r4, [pc, #36]	@ (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f003 fc03 	bl	8004ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff f9a1 	bl	8000b30 <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 80017f8:	080070c8 	.word	0x080070c8
  ldr r2, =_sbss
 80017fc:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001800:	200003e4 	.word	0x200003e4

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <desired_trajectory>:
// Motor parameter
extern double k_phi;
extern double R_a;

void desired_trajectory(matrix *v_r, double x_r, double y_r)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b0a0      	sub	sp, #128	@ 0x80
 800180e:	af00      	add	r7, sp, #0
 8001810:	6378      	str	r0, [r7, #52]	@ 0x34
 8001812:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    static int count = 0;
    double time = count * sampling_interval;
 8001816:	4bc5      	ldr	r3, [pc, #788]	@ (8001b2c <desired_trajectory+0x324>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fdea 	bl	80003f4 <__aeabi_i2d>
 8001820:	4bc3      	ldr	r3, [pc, #780]	@ (8001b30 <desired_trajectory+0x328>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fe4f 	bl	80004c8 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    count += 1;
 8001832:	4bbe      	ldr	r3, [pc, #760]	@ (8001b2c <desired_trajectory+0x324>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	4bbc      	ldr	r3, [pc, #752]	@ (8001b2c <desired_trajectory+0x324>)
 800183a:	601a      	str	r2, [r3, #0]

    // đạo hàm bậc 1
    double derivative_x_r = a * (- eta * alpha / 2 * (sin((eta + 1) * alpha * time) + sin((eta - 1) * alpha * time)) - alpha * (y_r) / a);
 800183c:	4bbd      	ldr	r3, [pc, #756]	@ (8001b34 <desired_trajectory+0x32c>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	4614      	mov	r4, r2
 8001844:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001848:	4bbb      	ldr	r3, [pc, #748]	@ (8001b38 <desired_trajectory+0x330>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fe39 	bl	80004c8 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001866:	f7fe ff59 	bl	800071c <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4690      	mov	r8, r2
 8001870:	4699      	mov	r9, r3
 8001872:	4bb0      	ldr	r3, [pc, #704]	@ (8001b34 <desired_trajectory+0x32c>)
 8001874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4baf      	ldr	r3, [pc, #700]	@ (8001b3c <desired_trajectory+0x334>)
 800187e:	f7fe fc6d 	bl	800015c <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	4bab      	ldr	r3, [pc, #684]	@ (8001b38 <desired_trajectory+0x330>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fe1a 	bl	80004c8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80018a0:	f7fe fe12 	bl	80004c8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f003 fce0 	bl	8005270 <sin>
 80018b0:	4604      	mov	r4, r0
 80018b2:	460d      	mov	r5, r1
 80018b4:	4b9f      	ldr	r3, [pc, #636]	@ (8001b34 <desired_trajectory+0x32c>)
 80018b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b9f      	ldr	r3, [pc, #636]	@ (8001b3c <desired_trajectory+0x334>)
 80018c0:	f7fe fc4a 	bl	8000158 <__aeabi_dsub>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001b38 <desired_trajectory+0x330>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fdf9 	bl	80004c8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80018e2:	f7fe fdf1 	bl	80004c8 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f003 fcbf 	bl	8005270 <sin>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe fc2f 	bl	800015c <__adddf3>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4640      	mov	r0, r8
 8001904:	4649      	mov	r1, r9
 8001906:	f7fe fddf 	bl	80004c8 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4614      	mov	r4, r2
 8001910:	461d      	mov	r5, r3
 8001912:	4b89      	ldr	r3, [pc, #548]	@ (8001b38 <desired_trajectory+0x330>)
 8001914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001918:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800191c:	f7fe fdd4 	bl	80004c8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	4b85      	ldr	r3, [pc, #532]	@ (8001b40 <desired_trajectory+0x338>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fef5 	bl	800071c <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f7fe fc0d 	bl	8000158 <__aeabi_dsub>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	4b7e      	ldr	r3, [pc, #504]	@ (8001b40 <desired_trajectory+0x338>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fdbc 	bl	80004c8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    double derivative_y_r = a * (- eta * alpha / 2 * (- cos((eta + 1) * alpha * time) + cos((eta - 1) * alpha * time)) + alpha * (x_r) / a);
 8001958:	4b76      	ldr	r3, [pc, #472]	@ (8001b34 <desired_trajectory+0x32c>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	4692      	mov	sl, r2
 8001960:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001964:	4b74      	ldr	r3, [pc, #464]	@ (8001b38 <desired_trajectory+0x330>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	4650      	mov	r0, sl
 800196c:	4659      	mov	r1, fp
 800196e:	f7fe fdab 	bl	80004c8 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001982:	f7fe fecb 	bl	800071c <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4690      	mov	r8, r2
 800198c:	4699      	mov	r9, r3
 800198e:	4b69      	ldr	r3, [pc, #420]	@ (8001b34 <desired_trajectory+0x32c>)
 8001990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b68      	ldr	r3, [pc, #416]	@ (8001b3c <desired_trajectory+0x334>)
 800199a:	f7fe fbdd 	bl	8000158 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	4b64      	ldr	r3, [pc, #400]	@ (8001b38 <desired_trajectory+0x330>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fd8c 	bl	80004c8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80019bc:	f7fe fd84 	bl	80004c8 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f003 fc0c 	bl	80051e4 <cos>
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
 80019d0:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <desired_trajectory+0x32c>)
 80019d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b58      	ldr	r3, [pc, #352]	@ (8001b3c <desired_trajectory+0x334>)
 80019dc:	f7fe fbbe 	bl	800015c <__adddf3>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	4b53      	ldr	r3, [pc, #332]	@ (8001b38 <desired_trajectory+0x330>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fd6b 	bl	80004c8 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80019fe:	f7fe fd63 	bl	80004c8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f003 fbeb 	bl	80051e4 <cos>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f7fe fb9f 	bl	8000158 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4640      	mov	r0, r8
 8001a20:	4649      	mov	r1, r9
 8001a22:	f7fe fd51 	bl	80004c8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <desired_trajectory+0x330>)
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a38:	f7fe fd46 	bl	80004c8 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <desired_trajectory+0x338>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fe67 	bl	800071c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fb81 	bl	800015c <__adddf3>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	4b37      	ldr	r3, [pc, #220]	@ (8001b40 <desired_trajectory+0x338>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fd2e 	bl	80004c8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    // đạo hàm bậc 2
    double derivative_x_r_2nd = a * (- eta * alpha / 2 * (alpha * (eta + 1) * cos((eta + 1) * alpha * time) + alpha * (eta - 1) * cos((eta - 1) * alpha * time)) - alpha * derivative_y_r / a);
 8001a74:	4b2f      	ldr	r3, [pc, #188]	@ (8001b34 <desired_trajectory+0x32c>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	623a      	str	r2, [r7, #32]
 8001a7c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a82:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <desired_trajectory+0x330>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a8c:	f7fe fd1c 	bl	80004c8 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aa0:	f7fe fe3c 	bl	800071c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4692      	mov	sl, r2
 8001aaa:	469b      	mov	fp, r3
 8001aac:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <desired_trajectory+0x32c>)
 8001aae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <desired_trajectory+0x334>)
 8001ab8:	f7fe fb50 	bl	800015c <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <desired_trajectory+0x330>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fcfd 	bl	80004c8 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4614      	mov	r4, r2
 8001ad4:	461d      	mov	r5, r3
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <desired_trajectory+0x32c>)
 8001ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <desired_trajectory+0x334>)
 8001ae2:	f7fe fb3b 	bl	800015c <__adddf3>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <desired_trajectory+0x330>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fce8 	bl	80004c8 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001b04:	f7fe fce0 	bl	80004c8 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f003 fb68 	bl	80051e4 <cos>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fcd4 	bl	80004c8 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4690      	mov	r8, r2
 8001b26:	4699      	mov	r9, r3
 8001b28:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <desired_trajectory+0x32c>)
 8001b2a:	e00b      	b.n	8001b44 <desired_trajectory+0x33c>
 8001b2c:	20000294 	.word	0x20000294
 8001b30:	20000020 	.word	0x20000020
 8001b34:	20000038 	.word	0x20000038
 8001b38:	20000030 	.word	0x20000030
 8001b3c:	3ff00000 	.word	0x3ff00000
 8001b40:	20000028 	.word	0x20000028
 8001b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4bc6      	ldr	r3, [pc, #792]	@ (8001e68 <desired_trajectory+0x660>)
 8001b4e:	f7fe fb03 	bl	8000158 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4bc4      	ldr	r3, [pc, #784]	@ (8001e6c <desired_trajectory+0x664>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fcb2 	bl	80004c8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	4bc0      	ldr	r3, [pc, #768]	@ (8001e70 <desired_trajectory+0x668>)
 8001b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4bbc      	ldr	r3, [pc, #752]	@ (8001e68 <desired_trajectory+0x660>)
 8001b78:	f7fe faee 	bl	8000158 <__aeabi_dsub>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	4bb9      	ldr	r3, [pc, #740]	@ (8001e6c <desired_trajectory+0x664>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fc9d 	bl	80004c8 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001b9a:	f7fe fc95 	bl	80004c8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f003 fb1d 	bl	80051e4 <cos>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe fc89 	bl	80004c8 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4640      	mov	r0, r8
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	f7fe facd 	bl	800015c <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4650      	mov	r0, sl
 8001bc8:	4659      	mov	r1, fp
 8001bca:	f7fe fc7d 	bl	80004c8 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	4ba5      	ldr	r3, [pc, #660]	@ (8001e6c <desired_trajectory+0x664>)
 8001bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bdc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001be0:	f7fe fc72 	bl	80004c8 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	4ba1      	ldr	r3, [pc, #644]	@ (8001e74 <desired_trajectory+0x66c>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fd93 	bl	800071c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe faab 	bl	8000158 <__aeabi_dsub>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4b9a      	ldr	r3, [pc, #616]	@ (8001e74 <desired_trajectory+0x66c>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fc5a 	bl	80004c8 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    double derivative_y_r_2nd = a * (- eta * alpha / 2 * (alpha * (eta + 1) * sin((eta + 1) * alpha * time) - alpha * (eta - 1) * sin((eta - 1) * alpha * time)) + alpha * derivative_x_r / a);
 8001c1c:	4b94      	ldr	r3, [pc, #592]	@ (8001e70 <desired_trajectory+0x668>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	61ba      	str	r2, [r7, #24]
 8001c24:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	4b90      	ldr	r3, [pc, #576]	@ (8001e6c <desired_trajectory+0x664>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c34:	f7fe fc48 	bl	80004c8 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c48:	f7fe fd68 	bl	800071c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4692      	mov	sl, r2
 8001c52:	469b      	mov	fp, r3
 8001c54:	4b86      	ldr	r3, [pc, #536]	@ (8001e70 <desired_trajectory+0x668>)
 8001c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b82      	ldr	r3, [pc, #520]	@ (8001e68 <desired_trajectory+0x660>)
 8001c60:	f7fe fa7c 	bl	800015c <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e6c <desired_trajectory+0x664>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fc29 	bl	80004c8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e70 <desired_trajectory+0x668>)
 8001c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b77      	ldr	r3, [pc, #476]	@ (8001e68 <desired_trajectory+0x660>)
 8001c8a:	f7fe fa67 	bl	800015c <__adddf3>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <desired_trajectory+0x664>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fc14 	bl	80004c8 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001cac:	f7fe fc0c 	bl	80004c8 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f003 fada 	bl	8005270 <sin>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe fc00 	bl	80004c8 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4690      	mov	r8, r2
 8001cce:	4699      	mov	r9, r3
 8001cd0:	4b67      	ldr	r3, [pc, #412]	@ (8001e70 <desired_trajectory+0x668>)
 8001cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <desired_trajectory+0x660>)
 8001cdc:	f7fe fa3c 	bl	8000158 <__aeabi_dsub>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4b60      	ldr	r3, [pc, #384]	@ (8001e6c <desired_trajectory+0x664>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fbeb 	bl	80004c8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <desired_trajectory+0x668>)
 8001cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b58      	ldr	r3, [pc, #352]	@ (8001e68 <desired_trajectory+0x660>)
 8001d06:	f7fe fa27 	bl	8000158 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	4b56      	ldr	r3, [pc, #344]	@ (8001e6c <desired_trajectory+0x664>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fbd6 	bl	80004c8 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001d28:	f7fe fbce 	bl	80004c8 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f003 fa9c 	bl	8005270 <sin>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4629      	mov	r1, r5
 8001d40:	f7fe fbc2 	bl	80004c8 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fa04 	bl	8000158 <__aeabi_dsub>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4650      	mov	r0, sl
 8001d56:	4659      	mov	r1, fp
 8001d58:	f7fe fbb6 	bl	80004c8 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4614      	mov	r4, r2
 8001d62:	461d      	mov	r5, r3
 8001d64:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <desired_trajectory+0x664>)
 8001d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d6e:	f7fe fbab 	bl	80004c8 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e74 <desired_trajectory+0x66c>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fccc 	bl	800071c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe f9e6 	bl	800015c <__adddf3>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	4b36      	ldr	r3, [pc, #216]	@ (8001e74 <desired_trajectory+0x66c>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fb93 	bl	80004c8 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // đạo hàm bậc 3
    double derivative_x_r_3nd = a * (- eta * alpha / 2 * (- pow(((eta + 1) * alpha), 2) * sin((eta + 1) * alpha * time) - pow(((eta - 1) * alpha) , 2) * sin((eta - 1) * alpha * time)) - alpha * derivative_y_r_2nd / a);
 8001daa:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <desired_trajectory+0x668>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	613a      	str	r2, [r7, #16]
 8001db2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <desired_trajectory+0x664>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dc2:	f7fe fb81 	bl	80004c8 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dd6:	f7fe fca1 	bl	800071c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4690      	mov	r8, r2
 8001de0:	4699      	mov	r9, r3
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <desired_trajectory+0x668>)
 8001de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <desired_trajectory+0x660>)
 8001dee:	f7fe f9b5 	bl	800015c <__adddf3>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <desired_trajectory+0x664>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fb62 	bl	80004c8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e14:	f003 f95a 	bl	80050cc <pow>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <desired_trajectory+0x668>)
 8001e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <desired_trajectory+0x660>)
 8001e30:	f7fe f994 	bl	800015c <__adddf3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <desired_trajectory+0x664>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fb41 	bl	80004c8 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e52:	f7fe fb39 	bl	80004c8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f003 fa07 	bl	8005270 <sin>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e007      	b.n	8001e78 <desired_trajectory+0x670>
 8001e68:	3ff00000 	.word	0x3ff00000
 8001e6c:	20000030 	.word	0x20000030
 8001e70:	20000038 	.word	0x20000038
 8001e74:	20000028 	.word	0x20000028
 8001e78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e7c:	f7fe fb24 	bl	80004c8 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4692      	mov	sl, r2
 8001e86:	469b      	mov	fp, r3
 8001e88:	4bca      	ldr	r3, [pc, #808]	@ (80021b4 <desired_trajectory+0x9ac>)
 8001e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4bc9      	ldr	r3, [pc, #804]	@ (80021b8 <desired_trajectory+0x9b0>)
 8001e94:	f7fe f960 	bl	8000158 <__aeabi_dsub>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4bc6      	ldr	r3, [pc, #792]	@ (80021bc <desired_trajectory+0x9b4>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fb0f 	bl	80004c8 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eba:	f003 f907 	bl	80050cc <pow>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	4bbc      	ldr	r3, [pc, #752]	@ (80021b4 <desired_trajectory+0x9ac>)
 8001ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4bba      	ldr	r3, [pc, #744]	@ (80021b8 <desired_trajectory+0x9b0>)
 8001ece:	f7fe f943 	bl	8000158 <__aeabi_dsub>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4bb8      	ldr	r3, [pc, #736]	@ (80021bc <desired_trajectory+0x9b4>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe faf2 	bl	80004c8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001ef0:	f7fe faea 	bl	80004c8 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f003 f9b8 	bl	8005270 <sin>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fade 	bl	80004c8 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4650      	mov	r0, sl
 8001f12:	4659      	mov	r1, fp
 8001f14:	f7fe f920 	bl	8000158 <__aeabi_dsub>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	4649      	mov	r1, r9
 8001f20:	f7fe fad2 	bl	80004c8 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	4ba3      	ldr	r3, [pc, #652]	@ (80021bc <desired_trajectory+0x9b4>)
 8001f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f36:	f7fe fac7 	bl	80004c8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	4b9f      	ldr	r3, [pc, #636]	@ (80021c0 <desired_trajectory+0x9b8>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fbe8 	bl	800071c <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe f900 	bl	8000158 <__aeabi_dsub>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4b97      	ldr	r3, [pc, #604]	@ (80021c0 <desired_trajectory+0x9b8>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe faaf 	bl	80004c8 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double derivative_y_r_3nd = a * (- eta * alpha / 2 * (pow(((eta + 1) * alpha) , 2) * cos((eta + 1) * alpha * time) - pow(((eta - 1) * alpha) , 2) * cos((eta - 1) * alpha * time)) + alpha * derivative_x_r_2nd / a);
 8001f72:	4b90      	ldr	r3, [pc, #576]	@ (80021b4 <desired_trajectory+0x9ac>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	603a      	str	r2, [r7, #0]
 8001f7a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	4b8e      	ldr	r3, [pc, #568]	@ (80021bc <desired_trajectory+0x9b4>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f8a:	f7fe fa9d 	bl	80004c8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f9e:	f7fe fbbd 	bl	800071c <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	4699      	mov	r9, r3
 8001faa:	4b82      	ldr	r3, [pc, #520]	@ (80021b4 <desired_trajectory+0x9ac>)
 8001fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b80      	ldr	r3, [pc, #512]	@ (80021b8 <desired_trajectory+0x9b0>)
 8001fb6:	f7fe f8d1 	bl	800015c <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4b7e      	ldr	r3, [pc, #504]	@ (80021bc <desired_trajectory+0x9b4>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe fa7e 	bl	80004c8 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fdc:	f003 f876 	bl	80050cc <pow>
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	460d      	mov	r5, r1
 8001fe4:	4b73      	ldr	r3, [pc, #460]	@ (80021b4 <desired_trajectory+0x9ac>)
 8001fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b72      	ldr	r3, [pc, #456]	@ (80021b8 <desired_trajectory+0x9b0>)
 8001ff0:	f7fe f8b4 	bl	800015c <__adddf3>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80021bc <desired_trajectory+0x9b4>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fa61 	bl	80004c8 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002012:	f7fe fa59 	bl	80004c8 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f003 f8e1 	bl	80051e4 <cos>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe fa4d 	bl	80004c8 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4692      	mov	sl, r2
 8002034:	469b      	mov	fp, r3
 8002036:	4b5f      	ldr	r3, [pc, #380]	@ (80021b4 <desired_trajectory+0x9ac>)
 8002038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b5d      	ldr	r3, [pc, #372]	@ (80021b8 <desired_trajectory+0x9b0>)
 8002042:	f7fe f889 	bl	8000158 <__aeabi_dsub>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	4b5b      	ldr	r3, [pc, #364]	@ (80021bc <desired_trajectory+0x9b4>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa38 	bl	80004c8 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002068:	f003 f830 	bl	80050cc <pow>
 800206c:	4604      	mov	r4, r0
 800206e:	460d      	mov	r5, r1
 8002070:	4b50      	ldr	r3, [pc, #320]	@ (80021b4 <desired_trajectory+0x9ac>)
 8002072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b4f      	ldr	r3, [pc, #316]	@ (80021b8 <desired_trajectory+0x9b0>)
 800207c:	f7fe f86c 	bl	8000158 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <desired_trajectory+0x9b4>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fa1b 	bl	80004c8 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800209e:	f7fe fa13 	bl	80004c8 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f003 f89b 	bl	80051e4 <cos>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe fa07 	bl	80004c8 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4650      	mov	r0, sl
 80020c0:	4659      	mov	r1, fp
 80020c2:	f7fe f849 	bl	8000158 <__aeabi_dsub>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4640      	mov	r0, r8
 80020cc:	4649      	mov	r1, r9
 80020ce:	f7fe f9fb 	bl	80004c8 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4614      	mov	r4, r2
 80020d8:	461d      	mov	r5, r3
 80020da:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <desired_trajectory+0x9b4>)
 80020dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80020e4:	f7fe f9f0 	bl	80004c8 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	4b33      	ldr	r3, [pc, #204]	@ (80021c0 <desired_trajectory+0x9b8>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe fb11 	bl	800071c <__aeabi_ddiv>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4620      	mov	r0, r4
 8002100:	4629      	mov	r1, r5
 8002102:	f7fe f82b 	bl	800015c <__adddf3>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	4b2c      	ldr	r3, [pc, #176]	@ (80021c0 <desired_trajectory+0x9b8>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f7fe f9d8 	bl	80004c8 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    // tính toán vận tốc
    v_r->index[0][0] = sqrt(pow(derivative_x_r , 2) + pow(derivative_y_r , 2));
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002128:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800212c:	f002 ffce 	bl	80050cc <pow>
 8002130:	4604      	mov	r4, r0
 8002132:	460d      	mov	r5, r1
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800213c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002140:	f002 ffc4 	bl	80050cc <pow>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe f806 	bl	800015c <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681c      	ldr	r4, [r3, #0]
 800215e:	f003 f81d 	bl	800519c <sqrt>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9c4 2300 	strd	r2, r3, [r4]

    // đạo hàm cấp 1,2 của v_r
    double derivative_v_r = (derivative_x_r * derivative_x_r_2nd + derivative_y_r * derivative_y_r_2nd) / sqrt(pow(derivative_x_r , 2) + pow(derivative_y_r , 2));
 800216a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800216e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002172:	f7fe f9a9 	bl	80004c8 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4614      	mov	r4, r2
 800217c:	461d      	mov	r5, r3
 800217e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002182:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002186:	f7fe f99f 	bl	80004c8 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fd ffe3 	bl	800015c <__adddf3>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021a6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80021aa:	f002 ff8f 	bl	80050cc <pow>
 80021ae:	4604      	mov	r4, r0
 80021b0:	460d      	mov	r5, r1
 80021b2:	e007      	b.n	80021c4 <desired_trajectory+0x9bc>
 80021b4:	20000038 	.word	0x20000038
 80021b8:	3ff00000 	.word	0x3ff00000
 80021bc:	20000030 	.word	0x20000030
 80021c0:	20000028 	.word	0x20000028
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021d0:	f002 ff7c 	bl	80050cc <pow>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fd ffbe 	bl	800015c <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	f002 ffd8 	bl	800519c <sqrt>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4640      	mov	r0, r8
 80021f2:	4649      	mov	r1, r9
 80021f4:	f7fe fa92 	bl	800071c <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double derivative_v_r_2nd = (pow(derivative_x_r_2nd , 2) + derivative_x_r * derivative_x_r_3nd + pow(derivative_y_r_2nd , 2) + derivative_y_r * derivative_y_r_3nd) / v_r->index[0][0]  - pow(derivative_v_r , 2) / v_r->index[0][0];
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002208:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800220c:	f002 ff5e 	bl	80050cc <pow>
 8002210:	4604      	mov	r4, r0
 8002212:	460d      	mov	r5, r1
 8002214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002218:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800221c:	f7fe f954 	bl	80004c8 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4620      	mov	r0, r4
 8002226:	4629      	mov	r1, r5
 8002228:	f7fd ff98 	bl	800015c <__adddf3>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4614      	mov	r4, r2
 8002232:	461d      	mov	r5, r3
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800223c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002240:	f002 ff44 	bl	80050cc <pow>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4620      	mov	r0, r4
 800224a:	4629      	mov	r1, r5
 800224c:	f7fd ff86 	bl	800015c <__adddf3>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4614      	mov	r4, r2
 8002256:	461d      	mov	r5, r3
 8002258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800225c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002260:	f7fe f932 	bl	80004c8 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4620      	mov	r0, r4
 800226a:	4629      	mov	r1, r5
 800226c:	f7fd ff76 	bl	800015c <__adddf3>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe fa4b 	bl	800071c <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4614      	mov	r4, r2
 800228c:	461d      	mov	r5, r3
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002296:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800229a:	f002 ff17 	bl	80050cc <pow>
 800229e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe fa38 	bl	800071c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fd ff50 	bl	8000158 <__aeabi_dsub>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    v_r->index[1][0] = (d * (derivative_x_r * derivative_v_r_2nd - derivative_x_r_3nd * v_r->index[0][0]) * pow(v_r->index[0][0] , 2) * derivative_y_r
 80022c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80022c8:	f7fe f8fe 	bl	80004c8 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	461d      	mov	r5, r3
 80022d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022e2:	f7fe f8f1 	bl	80004c8 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ff33 	bl	8000158 <__aeabi_dsub>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	4b97      	ldr	r3, [pc, #604]	@ (8002558 <desired_trajectory+0xd50>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f8e2 	bl	80004c8 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4614      	mov	r4, r2
 800230a:	461d      	mov	r5, r3
 800230c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800231e:	f002 fed5 	bl	80050cc <pow>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4620      	mov	r0, r4
 8002328:	4629      	mov	r1, r5
 800232a:	f7fe f8cd 	bl	80004c8 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800233a:	f7fe f8c5 	bl	80004c8 <__aeabi_dmul>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4614      	mov	r4, r2
 8002344:	461d      	mov	r5, r3
    - d * (derivative_v_r * derivative_x_r - derivative_x_r_2nd * v_r->index[0][0]) * (2 * v_r->index[0][0] * derivative_v_r * derivative_y_r + derivative_y_r_2nd * pow(v_r->index[0][0] , 2)))
 8002346:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800234a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800234e:	f7fe f8bb 	bl	80004c8 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4690      	mov	r8, r2
 8002358:	4699      	mov	r9, r3
 800235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002364:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002368:	f7fe f8ae 	bl	80004c8 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4640      	mov	r0, r8
 8002372:	4649      	mov	r1, r9
 8002374:	f7fd fef0 	bl	8000158 <__aeabi_dsub>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	4b75      	ldr	r3, [pc, #468]	@ (8002558 <desired_trajectory+0xd50>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe f89f 	bl	80004c8 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4690      	mov	r8, r2
 8002390:	4699      	mov	r9, r3
 8002392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	f7fd fedc 	bl	800015c <__adddf3>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023b0:	f7fe f88a 	bl	80004c8 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80023c0:	f7fe f882 	bl	80004c8 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4692      	mov	sl, r2
 80023ca:	469b      	mov	fp, r3
 80023cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023de:	f002 fe75 	bl	80050cc <pow>
 80023e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023e6:	f7fe f86f 	bl	80004c8 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4650      	mov	r0, sl
 80023f0:	4659      	mov	r1, fp
 80023f2:	f7fd feb3 	bl	800015c <__adddf3>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4640      	mov	r0, r8
 80023fc:	4649      	mov	r1, r9
 80023fe:	f7fe f863 	bl	80004c8 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	f7fd fea5 	bl	8000158 <__aeabi_dsub>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	e9c7 2308 	strd	r2, r3, [r7, #32]
    / (pow(v_r->index[0][0] , 4) * pow(derivative_y_r , 2) + pow(d , 2) * ((derivative_x_r * derivative_v_r - derivative_x_r_2nd * pow(v_r->index[0][0] , 2))
 8002416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <desired_trajectory+0xd54>)
 8002426:	f002 fe51 	bl	80050cc <pow>
 800242a:	4604      	mov	r4, r0
 800242c:	460d      	mov	r5, r1
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800243a:	f002 fe47 	bl	80050cc <pow>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fe f83f 	bl	80004c8 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002452:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <desired_trajectory+0xd50>)
 8002454:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002460:	f002 fe34 	bl	80050cc <pow>
 8002464:	4680      	mov	r8, r0
 8002466:	4689      	mov	r9, r1
 8002468:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800246c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002470:	f7fe f82a 	bl	80004c8 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800248e:	f002 fe1d 	bl	80050cc <pow>
 8002492:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002496:	f7fe f817 	bl	80004c8 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fd fe59 	bl	8000158 <__aeabi_dsub>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4692      	mov	sl, r2
 80024ac:	469b      	mov	fp, r3
    + (derivative_x_r * derivative_v_r - derivative_x_r_2nd * v_r->index[0][0]) / (v_r->index[0][0] * derivative_y_r)));
 80024ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80024b6:	f7fe f807 	bl	80004c8 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4614      	mov	r4, r2
 80024c0:	461d      	mov	r5, r3
 80024c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024d0:	f7fd fffa 	bl	80004c8 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4620      	mov	r0, r4
 80024da:	4629      	mov	r1, r5
 80024dc:	f7fd fe3c 	bl	8000158 <__aeabi_dsub>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4614      	mov	r4, r2
 80024e6:	461d      	mov	r5, r3
 80024e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80024f6:	f7fd ffe7 	bl	80004c8 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe f90b 	bl	800071c <__aeabi_ddiv>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4650      	mov	r0, sl
 800250c:	4659      	mov	r1, fp
 800250e:	f7fd fe25 	bl	800015c <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
    / (pow(v_r->index[0][0] , 4) * pow(derivative_y_r , 2) + pow(d , 2) * ((derivative_x_r * derivative_v_r - derivative_x_r_2nd * pow(v_r->index[0][0] , 2))
 8002516:	4640      	mov	r0, r8
 8002518:	4649      	mov	r1, r9
 800251a:	f7fd ffd5 	bl	80004c8 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002526:	f7fd fe19 	bl	800015c <__adddf3>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
    v_r->index[1][0] = (d * (derivative_x_r * derivative_v_r_2nd - derivative_x_r_3nd * v_r->index[0][0]) * pow(v_r->index[0][0] , 2) * derivative_y_r
 8002532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3304      	adds	r3, #4
 8002538:	681c      	ldr	r4, [r3, #0]
    / (pow(v_r->index[0][0] , 4) * pow(derivative_y_r , 2) + pow(d , 2) * ((derivative_x_r * derivative_v_r - derivative_x_r_2nd * pow(v_r->index[0][0] , 2))
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002542:	f7fe f8eb 	bl	800071c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
    v_r->index[1][0] = (d * (derivative_x_r * derivative_v_r_2nd - derivative_x_r_3nd * v_r->index[0][0]) * pow(v_r->index[0][0] , 2) * derivative_y_r
 800254a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800254e:	bf00      	nop
 8002550:	3780      	adds	r7, #128	@ 0x80
 8002552:	46bd      	mov	sp, r7
 8002554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002558:	20000058 	.word	0x20000058
 800255c:	40100000 	.word	0x40100000

08002560 <errors>:

void errors(double *e_x, double *e_y, double *e_theta, double x, double y, double theta, double x_r, double y_r, double theta_r)
{
 8002560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
    *e_x = cos(theta) * (x_r - x) + sin(theta) * (y_r - y);
 800256e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002572:	f002 fe37 	bl	80051e4 <cos>
 8002576:	4680      	mov	r8, r0
 8002578:	4689      	mov	r9, r1
 800257a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800257e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002582:	f7fd fde9 	bl	8000158 <__aeabi_dsub>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4640      	mov	r0, r8
 800258c:	4649      	mov	r1, r9
 800258e:	f7fd ff9b 	bl	80004c8 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4692      	mov	sl, r2
 8002598:	469b      	mov	fp, r3
 800259a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800259e:	f002 fe67 	bl	8005270 <sin>
 80025a2:	4680      	mov	r8, r0
 80025a4:	4689      	mov	r9, r1
 80025a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80025ae:	f7fd fdd3 	bl	8000158 <__aeabi_dsub>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4640      	mov	r0, r8
 80025b8:	4649      	mov	r1, r9
 80025ba:	f7fd ff85 	bl	80004c8 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4650      	mov	r0, sl
 80025c4:	4659      	mov	r1, fp
 80025c6:	f7fd fdc9 	bl	800015c <__adddf3>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	e9c1 2300 	strd	r2, r3, [r1]
    *e_y = -sin(theta) * (x_r - x) + cos(theta) * (y_r - y);
 80025d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025d8:	f002 fe4a 	bl	8005270 <sin>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4614      	mov	r4, r2
 80025e2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80025e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025ee:	f7fd fdb3 	bl	8000158 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fd ff65 	bl	80004c8 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4690      	mov	r8, r2
 8002604:	4699      	mov	r9, r3
 8002606:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800260a:	f002 fdeb 	bl	80051e4 <cos>
 800260e:	4604      	mov	r4, r0
 8002610:	460d      	mov	r5, r1
 8002612:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002616:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800261a:	f7fd fd9d 	bl	8000158 <__aeabi_dsub>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4620      	mov	r0, r4
 8002624:	4629      	mov	r1, r5
 8002626:	f7fd ff4f 	bl	80004c8 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4640      	mov	r0, r8
 8002630:	4649      	mov	r1, r9
 8002632:	f7fd fd93 	bl	800015c <__adddf3>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	e9c1 2300 	strd	r2, r3, [r1]
    *e_theta = theta_r - theta;
 8002640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002644:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002648:	f7fd fd86 	bl	8000158 <__aeabi_dsub>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002660 <velocity>:

void velocity(matrix *v, double left_angular_velocity, double right_angular_velocity)
{
 8002660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	e9c7 2300 	strd	r2, r3, [r7]
    v->index[0][0] = r / 2 * (left_angular_velocity + right_angular_velocity);
 800266e:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <velocity+0xb8>)
 8002670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800267c:	f7fe f84e 	bl	800071c <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4690      	mov	r8, r2
 8002686:	4699      	mov	r9, r3
 8002688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800268c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002690:	f7fd fd64 	bl	800015c <__adddf3>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681c      	ldr	r4, [r3, #0]
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4640      	mov	r0, r8
 80026a8:	4649      	mov	r1, r9
 80026aa:	f7fd ff0d 	bl	80004c8 <__aeabi_dmul>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	e9c4 2300 	strd	r2, r3, [r4]
    v->index[1][0] = r / (2 * R) * (right_angular_velocity - left_angular_velocity);
 80026b6:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <velocity+0xb8>)
 80026b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026bc:	4b17      	ldr	r3, [pc, #92]	@ (800271c <velocity+0xbc>)
 80026be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	f7fd fd49 	bl	800015c <__adddf3>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fe f823 	bl	800071c <__aeabi_ddiv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4690      	mov	r8, r2
 80026dc:	4699      	mov	r9, r3
 80026de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026e6:	f7fd fd37 	bl	8000158 <__aeabi_dsub>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3304      	adds	r3, #4
 80026f8:	681c      	ldr	r4, [r3, #0]
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4640      	mov	r0, r8
 8002700:	4649      	mov	r1, r9
 8002702:	f7fd fee1 	bl	80004c8 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002718:	20000048 	.word	0x20000048
 800271c:	20000050 	.word	0x20000050

08002720 <velocity_control_input>:


// Caculate virtural control signal
// Must allocate v_c matrix and K matrix in the main program
void velocity_control_input(matrix *v_c, matrix *v_c_pre, matrix v_r, matrix K, double e_x, double e_y, double e_theta)
{
 8002720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	4639      	mov	r1, r7
 800272e:	e881 000c 	stmia.w	r1, {r2, r3}
    // lưu trữ v_c để tính derivative_v_c
    v_c_pre->index[0][0] = v_c->index[0][0];
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	6811      	ldr	r1, [r2, #0]
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	e9c1 2300 	strd	r2, r3, [r1]
    v_c_pre->index[1][0] = v_c->index[1][0];
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3304      	adds	r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	3204      	adds	r2, #4
 8002754:	6811      	ldr	r1, [r2, #0]
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	e9c1 2300 	strd	r2, r3, [r1]

    // tính toán v_c tiếp theo
    v_c->index[0][0] = v_r.index[0][0] * cos(e_theta) + K.index[0][0] * e_x;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002766:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800276a:	f002 fd3b 	bl	80051e4 <cos>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4620      	mov	r0, r4
 8002774:	4629      	mov	r1, r5
 8002776:	f7fd fea7 	bl	80004c8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4690      	mov	r8, r2
 8002780:	4699      	mov	r9, r3
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800278a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800278e:	f7fd fe9b 	bl	80004c8 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681c      	ldr	r4, [r3, #0]
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4640      	mov	r0, r8
 80027a6:	4649      	mov	r1, r9
 80027a8:	f7fd fcd8 	bl	800015c <__adddf3>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	e9c4 2300 	strd	r2, r3, [r4]
    v_c->index[1][0] = v_r.index[1][0] + K.index[1][0] * v_r.index[0][0]* e_y + K.index[2][0] * v_r.index[0][0] * sin(e_theta);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3304      	adds	r3, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c0:	3304      	adds	r3, #4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fd fe7a 	bl	80004c8 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027e0:	f7fd fe72 	bl	80004c8 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fcb6 	bl	800015c <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4690      	mov	r8, r2
 80027f6:	4699      	mov	r9, r3
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	3308      	adds	r3, #8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f7fd fe5d 	bl	80004c8 <__aeabi_dmul>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4614      	mov	r4, r2
 8002814:	461d      	mov	r5, r3
 8002816:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800281a:	f002 fd29 	bl	8005270 <sin>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fd fe4f 	bl	80004c8 <__aeabi_dmul>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3304      	adds	r3, #4
 8002838:	681c      	ldr	r4, [r3, #0]
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4640      	mov	r0, r8
 8002840:	4649      	mov	r1, r9
 8002842:	f7fd fc8b 	bl	800015c <__adddf3>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002858 <control_input_signal>:

// Calculate the control signal u
// Must allocate u matrix in the main program
void control_input_signal(matrix *u, matrix v_c, matrix v_c_pre, matrix v, matrix K_4)
{
 8002858:	b082      	sub	sp, #8
 800285a:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800285e:	b08b      	sub	sp, #44	@ 0x2c
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	1d38      	adds	r0, r7, #4
 8002866:	e880 0006 	stmia.w	r0, {r1, r2}
 800286a:	647b      	str	r3, [r7, #68]	@ 0x44

    matrix derivative_v_c;
    allocate_matrix(&derivative_v_c, 2, 1);
 800286c:	f107 0320 	add.w	r3, r7, #32
 8002870:	2201      	movs	r2, #1
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fb21 	bl	8002ebc <allocate_matrix>
    derivative_v_c.index[0][0] = (v_c.index[0][0] - v_c_pre.index[0][0]) / sampling_interval;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fc65 	bl	8000158 <__aeabi_dsub>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4690      	mov	r8, r2
 8002894:	4699      	mov	r9, r3
 8002896:	4b42      	ldr	r3, [pc, #264]	@ (80029a0 <control_input_signal+0x148>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	680c      	ldr	r4, [r1, #0]
 80028a0:	4640      	mov	r0, r8
 80028a2:	4649      	mov	r1, r9
 80028a4:	f7fd ff3a 	bl	800071c <__aeabi_ddiv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	e9c4 2300 	strd	r2, r3, [r4]
    derivative_v_c.index[1][0] = (v_c.index[1][0] - v_c_pre.index[1][0]) / sampling_interval;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028bc:	3304      	adds	r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f7fd fc48 	bl	8000158 <__aeabi_dsub>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4690      	mov	r8, r2
 80028ce:	4699      	mov	r9, r3
 80028d0:	4b33      	ldr	r3, [pc, #204]	@ (80029a0 <control_input_signal+0x148>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	6a39      	ldr	r1, [r7, #32]
 80028d8:	3104      	adds	r1, #4
 80028da:	680c      	ldr	r4, [r1, #0]
 80028dc:	4640      	mov	r0, r8
 80028de:	4649      	mov	r1, r9
 80028e0:	f7fd ff1c 	bl	800071c <__aeabi_ddiv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	e9c4 2300 	strd	r2, r3, [r4]

    // tạo ra ma trận temp để v_c ko bị thay đổi trong hàm tính toán này
    matrix temp;
    allocate_matrix(&temp, 2, 1);
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	2201      	movs	r2, #1
 80028f2:	2102      	movs	r1, #2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fae1 	bl	8002ebc <allocate_matrix>
    temp = v_c;
 80028fa:	f107 0318 	add.w	r3, r7, #24
 80028fe:	1d3a      	adds	r2, r7, #4
 8002900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002904:	e883 0003 	stmia.w	r3, {r0, r1}
    subtraction(&temp, &v);
 8002908:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800290c:	f107 0318 	add.w	r3, r7, #24
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fb7c 	bl	8003010 <subtraction>

    matrix C;
    mutiplication(&K_4, &temp, &C);
 8002918:	f107 0210 	add.w	r2, r7, #16
 800291c:	f107 0118 	add.w	r1, r7, #24
 8002920:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fc05 	bl	8003134 <mutiplication>

    deallocate_matrix(&temp);
 800292a:	f107 0318 	add.w	r3, r7, #24
 800292e:	4618      	mov	r0, r3
 8002930:	f000 faf9 	bl	8002f26 <deallocate_matrix>

    // tính toán tín hiệu điều khiển
    u->index[0][0] = derivative_v_c.index[0][0] + C.index[0][0];
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	68fc      	ldr	r4, [r7, #12]
 8002946:	6824      	ldr	r4, [r4, #0]
 8002948:	6824      	ldr	r4, [r4, #0]
 800294a:	f7fd fc07 	bl	800015c <__adddf3>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	e9c4 2300 	strd	r2, r3, [r4]
    u->index[1][0] = derivative_v_c.index[1][0] + C.index[1][0];
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	3304      	adds	r3, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	3304      	adds	r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	68fc      	ldr	r4, [r7, #12]
 800296c:	6824      	ldr	r4, [r4, #0]
 800296e:	3404      	adds	r4, #4
 8002970:	6824      	ldr	r4, [r4, #0]
 8002972:	f7fd fbf3 	bl	800015c <__adddf3>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	e9c4 2300 	strd	r2, r3, [r4]
    
    // giải phóng các vùng nhớ tạm thời xuất hiện trong hàm
    deallocate_matrix(&C);
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4618      	mov	r0, r3
 8002984:	f000 facf 	bl	8002f26 <deallocate_matrix>
    deallocate_matrix(&derivative_v_c);
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	4618      	mov	r0, r3
 800298e:	f000 faca 	bl	8002f26 <deallocate_matrix>
}
 8002992:	bf00      	nop
 8002994:	372c      	adds	r7, #44	@ 0x2c
 8002996:	46bd      	mov	sp, r7
 8002998:	e8bd 4390 	ldmia.w	sp!, {r4, r7, r8, r9, lr}
 800299c:	b002      	add	sp, #8
 800299e:	4770      	bx	lr
 80029a0:	20000020 	.word	0x20000020

080029a4 <next_state>:

// Calculate future coordinates of the robot
// Call after applying voltages to motors
void next_state(double *x, double *y, double *theta, double *x_r, double *y_r, double *theta_r, matrix v, matrix v_r)
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b090      	sub	sp, #64	@ 0x40
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
    double derivative_x = cos(*theta) * v.index[0][0];
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f002 fc12 	bl	80051e4 <cos>
 80029c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fd7e 	bl	80004c8 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double derivative_y = sin(*theta) * v.index[0][0];
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f002 fc47 	bl	8005270 <sin>
 80029e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd fd6d 	bl	80004c8 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double derivative_theta = v.index[1][0];
 80029f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f8:	3304      	adds	r3, #4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    //tính toán tọa độ thực của xe
    *x += sampling_interval * derivative_x;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a0a:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <next_state+0x1b8>)
 8002a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a14:	f7fd fd58 	bl	80004c8 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fb9c 	bl	800015c <__adddf3>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	68f9      	ldr	r1, [r7, #12]
 8002a2a:	e9c1 2300 	strd	r2, r3, [r1]
    *y += sampling_interval * derivative_y;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a34:	4b49      	ldr	r3, [pc, #292]	@ (8002b5c <next_state+0x1b8>)
 8002a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a3e:	f7fd fd43 	bl	80004c8 <__aeabi_dmul>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4620      	mov	r0, r4
 8002a48:	4629      	mov	r1, r5
 8002a4a:	f7fd fb87 	bl	800015c <__adddf3>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	e9c1 2300 	strd	r2, r3, [r1]
    *theta += sampling_interval * derivative_theta;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <next_state+0x1b8>)
 8002a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a68:	f7fd fd2e 	bl	80004c8 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4620      	mov	r0, r4
 8002a72:	4629      	mov	r1, r5
 8002a74:	f7fd fb72 	bl	800015c <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	e9c1 2300 	strd	r2, r3, [r1]

    double derivative_x_r = cos(*theta_r) * v_r.index[0][0];
 8002a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f002 fbaa 	bl	80051e4 <cos>
 8002a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fd16 	bl	80004c8 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double derivative_y_r = sin(*theta_r) * v_r.index[0][0];
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f002 fbdf 	bl	8005270 <sin>
 8002ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fd05 	bl	80004c8 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double derivative_theta_r = v_r.index[1][0];
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac8:	3304      	adds	r3, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //tính toán tọa độ ref của xe
    *x_r +=  sampling_interval * derivative_x_r;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ada:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <next_state+0x1b8>)
 8002adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ae4:	f7fd fcf0 	bl	80004c8 <__aeabi_dmul>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4620      	mov	r0, r4
 8002aee:	4629      	mov	r1, r5
 8002af0:	f7fd fb34 	bl	800015c <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	6839      	ldr	r1, [r7, #0]
 8002afa:	e9c1 2300 	strd	r2, r3, [r1]
    *y_r +=  sampling_interval * derivative_y_r;
 8002afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <next_state+0x1b8>)
 8002b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b0e:	f7fd fcdb 	bl	80004c8 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f7fd fb1f 	bl	800015c <__adddf3>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002b24:	e9c1 2300 	strd	r2, r3, [r1]
    *theta_r +=  sampling_interval *derivative_theta_r;
 8002b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <next_state+0x1b8>)
 8002b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b38:	f7fd fcc6 	bl	80004c8 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fb0a 	bl	800015c <__adddf3>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b4e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002b52:	bf00      	nop
 8002b54:	3740      	adds	r7, #64	@ 0x40
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000020 	.word	0x20000020

08002b60 <cal_torque>:

// Calculate torque signal
// Must allocate tau matrix in the main program
void cal_torque(matrix *torque, matrix v, matrix u)
{
 8002b60:	b082      	sub	sp, #8
 8002b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b66:	b095      	sub	sp, #84	@ 0x54
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	1d38      	adds	r0, r7, #4
 8002b6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b72:	677b      	str	r3, [r7, #116]	@ 0x74
    matrix M;
    allocate_matrix(&M, 2, 2);
 8002b74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b78:	2202      	movs	r2, #2
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f99d 	bl	8002ebc <allocate_matrix>
    M.index[0][0] = m;
 8002b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	4b8a      	ldr	r3, [pc, #552]	@ (8002db0 <cal_torque+0x250>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	e9c1 2300 	strd	r2, r3, [r1]
    // M.index[1][0] = 0;
    // M.index[0][1] = 0;
    M.index[1][1] = I;
 8002b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b92:	3304      	adds	r3, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f103 0108 	add.w	r1, r3, #8
 8002b9a:	4b86      	ldr	r3, [pc, #536]	@ (8002db4 <cal_torque+0x254>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]

    double derivative_theta = v.index[1][0];
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    matrix V;
    allocate_matrix(&V, 2, 2);
 8002bb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	2102      	movs	r1, #2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f97e 	bl	8002ebc <allocate_matrix>
    // V.index[0][0] = 0;
    V.index[0][1] = m * d * derivative_theta;
 8002bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8002db0 <cal_torque+0x250>)
 8002bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8002db8 <cal_torque+0x258>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fc7c 	bl	80004c8 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f103 0608 	add.w	r6, r3, #8
 8002be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002be4:	f7fd fc70 	bl	80004c8 <__aeabi_dmul>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	e9c6 2300 	strd	r2, r3, [r6]
    V.index[1][0] = - m * d * derivative_theta;
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8002db0 <cal_torque+0x250>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002bfc:	4b6e      	ldr	r3, [pc, #440]	@ (8002db8 <cal_torque+0x258>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	4640      	mov	r0, r8
 8002c04:	4649      	mov	r1, r9
 8002c06:	f7fd fc5f 	bl	80004c8 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c14:	3304      	adds	r3, #4
 8002c16:	681e      	ldr	r6, [r3, #0]
 8002c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c1c:	f7fd fc54 	bl	80004c8 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	e9c6 2300 	strd	r2, r3, [r6]
    // V.index[1][1] = 0;

    matrix B;
    allocate_matrix(&B, 2, 2);
 8002c28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f943 	bl	8002ebc <allocate_matrix>
    B.index[0][0] = 1 / r;
 8002c36:	4b61      	ldr	r3, [pc, #388]	@ (8002dbc <cal_torque+0x25c>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c3e:	680e      	ldr	r6, [r1, #0]
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	495e      	ldr	r1, [pc, #376]	@ (8002dc0 <cal_torque+0x260>)
 8002c46:	f7fd fd69 	bl	800071c <__aeabi_ddiv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	e9c6 2300 	strd	r2, r3, [r6]
    B.index[0][1] = 1 / r;
 8002c52:	4b5a      	ldr	r3, [pc, #360]	@ (8002dbc <cal_torque+0x25c>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c5a:	6809      	ldr	r1, [r1, #0]
 8002c5c:	f101 0608 	add.w	r6, r1, #8
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	4956      	ldr	r1, [pc, #344]	@ (8002dc0 <cal_torque+0x260>)
 8002c66:	f7fd fd59 	bl	800071c <__aeabi_ddiv>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	e9c6 2300 	strd	r2, r3, [r6]
    B.index[1][0] = R / r;
 8002c72:	4b54      	ldr	r3, [pc, #336]	@ (8002dc4 <cal_torque+0x264>)
 8002c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c78:	4b50      	ldr	r3, [pc, #320]	@ (8002dbc <cal_torque+0x25c>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8002c80:	3604      	adds	r6, #4
 8002c82:	6836      	ldr	r6, [r6, #0]
 8002c84:	f7fd fd4a 	bl	800071c <__aeabi_ddiv>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	e9c6 2300 	strd	r2, r3, [r6]
    B.index[1][1] = - R / r;
 8002c90:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc4 <cal_torque+0x264>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	4614      	mov	r4, r2
 8002c98:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002c9c:	4b47      	ldr	r3, [pc, #284]	@ (8002dbc <cal_torque+0x25c>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ca4:	3104      	adds	r1, #4
 8002ca6:	6809      	ldr	r1, [r1, #0]
 8002ca8:	f101 0608 	add.w	r6, r1, #8
 8002cac:	4620      	mov	r0, r4
 8002cae:	4629      	mov	r1, r5
 8002cb0:	f7fd fd34 	bl	800071c <__aeabi_ddiv>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	e9c6 2300 	strd	r2, r3, [r6]

    matrix B_inverse;
    inverse(&B, &B_inverse);
 8002cbc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002cc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fc74 	bl	80035b4 <inverse>

    deallocate_matrix(&B);
 8002ccc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 f928 	bl	8002f26 <deallocate_matrix>

    matrix M_u;
    mutiplication(&M, &u, &M_u);
 8002cd6:	f107 0220 	add.w	r2, r7, #32
 8002cda:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8002cde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fa26 	bl	8003134 <mutiplication>

    deallocate_matrix(&M);
 8002ce8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f91a 	bl	8002f26 <deallocate_matrix>

    matrix V_v;
    mutiplication(&V, &v, &V_v);
 8002cf2:	f107 0218 	add.w	r2, r7, #24
 8002cf6:	1d39      	adds	r1, r7, #4
 8002cf8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fa19 	bl	8003134 <mutiplication>

    deallocate_matrix(&V);
 8002d02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f90d 	bl	8002f26 <deallocate_matrix>

    addition(&M_u, &V_v);
 8002d0c:	f107 0218 	add.w	r2, r7, #24
 8002d10:	f107 0320 	add.w	r3, r7, #32
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f927 	bl	8002f6a <addition>

    deallocate_matrix(&V_v);
 8002d1c:	f107 0318 	add.w	r3, r7, #24
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f900 	bl	8002f26 <deallocate_matrix>

    matrix tau;
    mutiplication(&B_inverse, &M_u, &tau);
 8002d26:	f107 0210 	add.w	r2, r7, #16
 8002d2a:	f107 0120 	add.w	r1, r7, #32
 8002d2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f9fe 	bl	8003134 <mutiplication>

    deallocate_matrix(&B_inverse);
 8002d38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f8f2 	bl	8002f26 <deallocate_matrix>
    deallocate_matrix(&M_u);
 8002d42:	f107 0320 	add.w	r3, r7, #32
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f8ed 	bl	8002f26 <deallocate_matrix>

    torque->index[0][0] = tau.index[0][0];
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	6811      	ldr	r1, [r2, #0]
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	e9c1 2300 	strd	r2, r3, [r1]
    torque->index[1][0] = tau.index[1][0];
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3304      	adds	r3, #4
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	3204      	adds	r2, #4
 8002d6a:	6811      	ldr	r1, [r2, #0]
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	e9c1 2300 	strd	r2, r3, [r1]

    t1 = torque->index[0][0];
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	4912      	ldr	r1, [pc, #72]	@ (8002dc8 <cal_torque+0x268>)
 8002d80:	e9c1 2300 	strd	r2, r3, [r1]
    t2 = torque->index[1][0];
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	490e      	ldr	r1, [pc, #56]	@ (8002dcc <cal_torque+0x26c>)
 8002d92:	e9c1 2300 	strd	r2, r3, [r1]

    deallocate_matrix(&tau);
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f8c3 	bl	8002f26 <deallocate_matrix>
}
 8002da0:	bf00      	nop
 8002da2:	3754      	adds	r7, #84	@ 0x54
 8002da4:	46bd      	mov	sp, r7
 8002da6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002daa:	b002      	add	sp, #8
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000060 	.word	0x20000060
 8002db4:	20000040 	.word	0x20000040
 8002db8:	20000058 	.word	0x20000058
 8002dbc:	20000048 	.word	0x20000048
 8002dc0:	3ff00000 	.word	0x3ff00000
 8002dc4:	20000050 	.word	0x20000050
 8002dc8:	20000248 	.word	0x20000248
 8002dcc:	20000250 	.word	0x20000250

08002dd0 <voltage>:

// Calculate the linear velocity and angular velocity of the vehicle
void voltage(double *voltage_left, double *voltage_right, double left_angular_velocity, double right_angular_velocity, matrix *torque)
{
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	e9c7 2300 	strd	r2, r3, [r7]
    *voltage_left = k_phi * left_angular_velocity * 30 + R_a * torque->index[1][0] / k_phi;
 8002dde:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <voltage+0xe0>)
 8002de0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002de8:	f7fd fb6e 	bl	80004c8 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb4 <voltage+0xe4>)
 8002dfa:	f7fd fb65 	bl	80004c8 <__aeabi_dmul>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4614      	mov	r4, r2
 8002e04:	461d      	mov	r5, r3
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e12:	4b29      	ldr	r3, [pc, #164]	@ (8002eb8 <voltage+0xe8>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f7fd fb56 	bl	80004c8 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	4b22      	ldr	r3, [pc, #136]	@ (8002eb0 <voltage+0xe0>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f7fd fc77 	bl	800071c <__aeabi_ddiv>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4620      	mov	r0, r4
 8002e34:	4629      	mov	r1, r5
 8002e36:	f7fd f991 	bl	800015c <__adddf3>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	68f9      	ldr	r1, [r7, #12]
 8002e40:	e9c1 2300 	strd	r2, r3, [r1]
    *voltage_right = k_phi * right_angular_velocity * 30 + R_a * torque->index[0][0] / k_phi;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <voltage+0xe0>)
 8002e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	f7fd fb3b 	bl	80004c8 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <voltage+0xe4>)
 8002e60:	f7fd fb32 	bl	80004c8 <__aeabi_dmul>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <voltage+0xe8>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fb24 	bl	80004c8 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <voltage+0xe0>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f7fd fc45 	bl	800071c <__aeabi_ddiv>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4620      	mov	r0, r4
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f7fd f95f 	bl	800015c <__adddf3>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb0:	20000068 	.word	0x20000068
 8002eb4:	403e0000 	.word	0x403e0000
 8002eb8:	20000070 	.word	0x20000070

08002ebc <allocate_matrix>:
#include "matrices_op2.h"

//Allocate memmory space and matrix A
void allocate_matrix(matrix *A, unsigned_int8 num_rows, unsigned_int8 num_columns)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	70bb      	strb	r3, [r7, #2]
    A->index = (double **) malloc(sizeof(double *) * num_rows);
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 ffb1 	bl	8004e38 <malloc>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
    A->num_columns = num_columns;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	78ba      	ldrb	r2, [r7, #2]
 8002ee2:	711a      	strb	r2, [r3, #4]
    A->num_rows = num_rows;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	715a      	strb	r2, [r3, #5]

    for (int i = 0; i < A->num_rows; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e00f      	b.n	8002f10 <allocate_matrix+0x54>
        A->index[i] = (double *) calloc(sizeof(double), A->num_columns);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	791b      	ldrb	r3, [r3, #4]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	18d4      	adds	r4, r2, r3
 8002f00:	2008      	movs	r0, #8
 8002f02:	f001 ff7d 	bl	8004e00 <calloc>
 8002f06:	4603      	mov	r3, r0
 8002f08:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < A->num_rows; i++)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	795b      	ldrb	r3, [r3, #5]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	dbe9      	blt.n	8002ef0 <allocate_matrix+0x34>
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}

08002f26 <deallocate_matrix>:

//Deallocate memory space for matrix A
void deallocate_matrix(matrix *A)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < A->num_rows; i++){
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e00b      	b.n	8002f4c <deallocate_matrix+0x26>
        free(A->index[i]);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 ff81 	bl	8004e48 <free>
    for (int i = 0; i < A->num_rows; i++){
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	795b      	ldrb	r3, [r3, #5]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	dbed      	blt.n	8002f34 <deallocate_matrix+0xe>
    }
    free(A->index);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 ff73 	bl	8004e48 <free>
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <addition>:
}

//Calculate addtion of matrix A and B
//Answer is directly assigned to A
void addition(matrix *A, matrix *B)
{
 8002f6a:	b5b0      	push	{r4, r5, r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	795a      	ldrb	r2, [r3, #5]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	795b      	ldrb	r3, [r3, #5]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d143      	bne.n	8003008 <addition+0x9e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	791a      	ldrb	r2, [r3, #4]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	791b      	ldrb	r3, [r3, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d13d      	bne.n	8003008 <addition+0x9e>
        return;
    
    //Calculate addition
    for (int i  = 0; i < A->num_rows; i++){
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e033      	b.n	8002ffa <addition+0x90>
        for (int j = 0; j < A->num_columns; j++){
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	e027      	b.n	8002fe8 <addition+0x7e>
            A->index[i][j] += B->index[i][j];
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	687c      	ldr	r4, [r7, #4]
 8002fc6:	6825      	ldr	r5, [r4, #0]
 8002fc8:	68fc      	ldr	r4, [r7, #12]
 8002fca:	00a4      	lsls	r4, r4, #2
 8002fcc:	442c      	add	r4, r5
 8002fce:	6825      	ldr	r5, [r4, #0]
 8002fd0:	68bc      	ldr	r4, [r7, #8]
 8002fd2:	00e4      	lsls	r4, r4, #3
 8002fd4:	442c      	add	r4, r5
 8002fd6:	f7fd f8c1 	bl	800015c <__adddf3>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	791b      	ldrb	r3, [r3, #4]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	dbd1      	blt.n	8002f98 <addition+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	795b      	ldrb	r3, [r3, #5]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4293      	cmp	r3, r2
 8003004:	dbc5      	blt.n	8002f92 <addition+0x28>
 8003006:	e000      	b.n	800300a <addition+0xa0>
        return;
 8003008:	bf00      	nop
        }
    }
}
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bdb0      	pop	{r4, r5, r7, pc}

08003010 <subtraction>:

//Calculate subtraction of matrix A and B (A - B)
//Answer is directly assigned to A
void subtraction(matrix *A, matrix *B)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    //Check dimensions of all matrix operands
    if ((A->num_rows != B->num_rows) || (A->num_columns != B->num_columns))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	795a      	ldrb	r2, [r3, #5]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	795b      	ldrb	r3, [r3, #5]
 8003022:	429a      	cmp	r2, r3
 8003024:	d143      	bne.n	80030ae <subtraction+0x9e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	791a      	ldrb	r2, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	791b      	ldrb	r3, [r3, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d13d      	bne.n	80030ae <subtraction+0x9e>
        return;
    
    //Calculate Subtraction
    for (int i  = 0; i < A->num_rows; i++){
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e033      	b.n	80030a0 <subtraction+0x90>
        for (int j = 0; j < A->num_columns; j++){
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	e027      	b.n	800308e <subtraction+0x7e>
            A->index[i][j] -= B->index[i][j];
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	687c      	ldr	r4, [r7, #4]
 800306c:	6825      	ldr	r5, [r4, #0]
 800306e:	68fc      	ldr	r4, [r7, #12]
 8003070:	00a4      	lsls	r4, r4, #2
 8003072:	442c      	add	r4, r5
 8003074:	6825      	ldr	r5, [r4, #0]
 8003076:	68bc      	ldr	r4, [r7, #8]
 8003078:	00e4      	lsls	r4, r4, #3
 800307a:	442c      	add	r4, r5
 800307c:	f7fd f86c 	bl	8000158 <__aeabi_dsub>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	3301      	adds	r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	791b      	ldrb	r3, [r3, #4]
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4293      	cmp	r3, r2
 8003098:	dbd1      	blt.n	800303e <subtraction+0x2e>
    for (int i  = 0; i < A->num_rows; i++){
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3301      	adds	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	795b      	ldrb	r3, [r3, #5]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	dbc5      	blt.n	8003038 <subtraction+0x28>
 80030ac:	e000      	b.n	80030b0 <subtraction+0xa0>
        return;
 80030ae:	bf00      	nop
        }
    }
}
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bdb0      	pop	{r4, r5, r7, pc}

080030b6 <scalar_multiplication>:

//Scalar multiplication of matrix
////Answer is directly assigned to A
void scalar_multiplication(matrix *A, double scalar)
{
 80030b6:	b590      	push	{r4, r7, lr}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	e9c7 2300 	strd	r2, r3, [r7]
    for (int i  = 0; i < A->num_rows; i++){
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e02a      	b.n	800311e <scalar_multiplication+0x68>
        for (int j = 0; j < A->num_columns; j++){
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e01e      	b.n	800310c <scalar_multiplication+0x56>
            A->index[i][j] *= scalar;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	18d4      	adds	r4, r2, r3
 80030f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030fa:	f7fd f9e5 	bl	80004c8 <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	e9c4 2300 	strd	r2, r3, [r4]
        for (int j = 0; j < A->num_columns; j++){
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3301      	adds	r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	791b      	ldrb	r3, [r3, #4]
 8003110:	461a      	mov	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4293      	cmp	r3, r2
 8003116:	dbda      	blt.n	80030ce <scalar_multiplication+0x18>
    for (int i  = 0; i < A->num_rows; i++){
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	795b      	ldrb	r3, [r3, #5]
 8003122:	461a      	mov	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4293      	cmp	r3, r2
 8003128:	dbce      	blt.n	80030c8 <scalar_multiplication+0x12>
        }
    }
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd90      	pop	{r4, r7, pc}

08003134 <mutiplication>:

//Calculate multiplication of matrix A and B
//Answer is directly assigned to Ans
void mutiplication(matrix *A, matrix *B, matrix *Ans)
{
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
    //Check for appropriate size
    if (A->num_columns != B->num_rows)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	791a      	ldrb	r2, [r3, #4]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	795b      	ldrb	r3, [r3, #5]
 8003148:	429a      	cmp	r2, r3
 800314a:	d166      	bne.n	800321a <mutiplication+0xe6>
        return;

    //Allocate memory space for answer
    allocate_matrix(Ans, A->num_rows, B->num_columns);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	7959      	ldrb	r1, [r3, #5]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	791b      	ldrb	r3, [r3, #4]
 8003154:	461a      	mov	r2, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff feb0 	bl	8002ebc <allocate_matrix>

    //Perform multiplication
    for (int i = 0; i < Ans->num_rows; i++){
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	e054      	b.n	800320c <mutiplication+0xd8>
        for(int j = 0; j < Ans->num_columns; j++){
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	e048      	b.n	80031fa <mutiplication+0xc6>
            for (int x = 0; x < A->num_columns; x++){
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e03c      	b.n	80031e8 <mutiplication+0xb4>
                Ans->index[i][j] += (A->index[i][x] * B->index[x][j]); 
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd f98a 	bl	80004c8 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	18d6      	adds	r6, r2, r3
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4620      	mov	r0, r4
 80031d4:	4629      	mov	r1, r5
 80031d6:	f7fc ffc1 	bl	800015c <__adddf3>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	e9c6 2300 	strd	r2, r3, [r6]
            for (int x = 0; x < A->num_columns; x++){
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	3301      	adds	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	791b      	ldrb	r3, [r3, #4]
 80031ec:	461a      	mov	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	4293      	cmp	r3, r2
 80031f2:	dbbc      	blt.n	800316e <mutiplication+0x3a>
        for(int j = 0; j < Ans->num_columns; j++){
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	791b      	ldrb	r3, [r3, #4]
 80031fe:	461a      	mov	r2, r3
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4293      	cmp	r3, r2
 8003204:	dbb0      	blt.n	8003168 <mutiplication+0x34>
    for (int i = 0; i < Ans->num_rows; i++){
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3301      	adds	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	795b      	ldrb	r3, [r3, #5]
 8003210:	461a      	mov	r2, r3
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4293      	cmp	r3, r2
 8003216:	dba4      	blt.n	8003162 <mutiplication+0x2e>
 8003218:	e000      	b.n	800321c <mutiplication+0xe8>
        return;
 800321a:	bf00      	nop
            }
        }
    }
}
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003222 <transpose>:

//Perform transpose of A
void transpose(matrix *A, matrix *transpose_A)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
    allocate_matrix(transpose_A, A->num_columns, A->num_rows);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7919      	ldrb	r1, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	795b      	ldrb	r3, [r3, #5]
 8003234:	461a      	mov	r2, r3
 8003236:	6838      	ldr	r0, [r7, #0]
 8003238:	f7ff fe40 	bl	8002ebc <allocate_matrix>

    //Perform transpose operation
    for (int i = 0; i < transpose_A->num_rows; i++){
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e024      	b.n	800328c <transpose+0x6a>
        for (int j = 0; j < transpose_A->num_columns; j++){
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	e018      	b.n	800327a <transpose+0x58>
            transpose_A->index[i][j] = A->index[j][i];
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	6811      	ldr	r1, [r2, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	440a      	add	r2, r1
 8003264:	6811      	ldr	r1, [r2, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	00d2      	lsls	r2, r2, #3
 800326a:	4411      	add	r1, r2
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < transpose_A->num_columns; j++){
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3301      	adds	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	791b      	ldrb	r3, [r3, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4293      	cmp	r3, r2
 8003284:	dbe0      	blt.n	8003248 <transpose+0x26>
    for (int i = 0; i < transpose_A->num_rows; i++){
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3301      	adds	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	795b      	ldrb	r3, [r3, #5]
 8003290:	461a      	mov	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4293      	cmp	r3, r2
 8003296:	dbd4      	blt.n	8003242 <transpose+0x20>
        }
    }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <minor>:

void minor(matrix *major, matrix *minor, unsigned_int8 skip_row, unsigned_int8 skip_column)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	4611      	mov	r1, r2
 80032ae:	461a      	mov	r2, r3
 80032b0:	460b      	mov	r3, r1
 80032b2:	71fb      	strb	r3, [r7, #7]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71bb      	strb	r3, [r7, #6]
    //Allocate memory space for minor
    allocate_matrix(minor, major->num_rows - 1, major->num_columns - 1);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	795b      	ldrb	r3, [r3, #5]
 80032bc:	3b01      	subs	r3, #1
 80032be:	b2d9      	uxtb	r1, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	68b8      	ldr	r0, [r7, #8]
 80032cc:	f7ff fdf6 	bl	8002ebc <allocate_matrix>

    int x = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
    int y = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]

    //Assign element to minor
    //Skip row skip_row
    //Skip column skip_column
    for (int i = 0; i < major->num_rows; i++){
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e038      	b.n	8003350 <minor+0xae>
        if (i != skip_row){
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d030      	beq.n	8003348 <minor+0xa6>
            for (int j = 0; j < major->num_columns; j++){
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e021      	b.n	8003330 <minor+0x8e>
                if (j != skip_column){
 80032ec:	79bb      	ldrb	r3, [r7, #6]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d019      	beq.n	8003328 <minor+0x86>
                    minor->index[x][y] = major->index[i][j];
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	6811      	ldr	r1, [r2, #0]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	0092      	lsls	r2, r2, #2
 800330e:	440a      	add	r2, r1
 8003310:	6811      	ldr	r1, [r2, #0]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	00d2      	lsls	r2, r2, #3
 8003316:	4411      	add	r1, r2
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	e9c1 2300 	strd	r2, r3, [r1]
                    y++;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	3301      	adds	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e000      	b.n	800332a <minor+0x88>
                } else {
                    continue;
 8003328:	bf00      	nop
            for (int j = 0; j < major->num_columns; j++){
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	3301      	adds	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	791b      	ldrb	r3, [r3, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4293      	cmp	r3, r2
 800333a:	dbd7      	blt.n	80032ec <minor+0x4a>
                }
            }
            x++;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3301      	adds	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
            y = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e000      	b.n	800334a <minor+0xa8>
        } else {
            continue;
 8003348:	bf00      	nop
    for (int i = 0; i < major->num_rows; i++){
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	795b      	ldrb	r3, [r3, #5]
 8003354:	461a      	mov	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	4293      	cmp	r3, r2
 800335a:	dbc0      	blt.n	80032de <minor+0x3c>
        }
    }
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <determinant>:

// Calculate the determinant of A
double determinant(matrix *A, unsigned_int8 expand_row)
{
 8003366:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
    double result = 0;
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    if (A->num_rows == 1 && A->num_columns == 1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	795b      	ldrb	r3, [r3, #5]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d10d      	bne.n	80033a4 <determinant+0x3e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	791b      	ldrb	r3, [r3, #4]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d109      	bne.n	80033a4 <determinant+0x3e>
        return result = A->index[0][0];
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800339e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a2:	e09a      	b.n	80034da <determinant+0x174>

    //Calculate determinant with chosen expand_row
    for (int j = 0; j < A->num_columns; j++){
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e08e      	b.n	80034c8 <determinant+0x162>
        
        //Create minor matrix
        matrix M;
        minor(A, &M, expand_row, j);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	f107 010c 	add.w	r1, r7, #12
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff74 	bl	80032a2 <minor>
        
        if ((expand_row + j) % 2 == 0){
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	4413      	add	r3, r2
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d13a      	bne.n	800343e <determinant+0xd8>
            result += (A->index[expand_row][j] == 0) ? (0) : (A->index[expand_row][j] * determinant(&M, 0));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	f7fd fad7 	bl	8000998 <__aeabi_dcmpeq>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d119      	bne.n	8003424 <determinant+0xbe>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ffaa 	bl	8003366 <determinant>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4640      	mov	r0, r8
 8003418:	4649      	mov	r1, r9
 800341a:	f7fd f855 	bl	80004c8 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	e003      	b.n	800342c <determinant+0xc6>
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003430:	f7fc fe94 	bl	800015c <__adddf3>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800343c:	e03c      	b.n	80034b8 <determinant+0x152>
        } else {
            result += (A->index[expand_row][j] == 0) ? (0) : ((-1) * A->index[expand_row][j] * determinant(&M, 0));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	f7fd fa9c 	bl	8000998 <__aeabi_dcmpeq>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11c      	bne.n	80034a0 <determinant+0x13a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	4614      	mov	r4, r2
 800347e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff6c 	bl	8003366 <determinant>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f7fd f817 	bl	80004c8 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	e003      	b.n	80034a8 <determinant+0x142>
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034ac:	f7fc fe56 	bl	800015c <__adddf3>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }

        //Deallocate minor matrix
        deallocate_matrix(&M);
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fd32 	bl	8002f26 <deallocate_matrix>
    for (int j = 0; j < A->num_columns; j++){
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3301      	adds	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	791b      	ldrb	r3, [r3, #4]
 80034cc:	461a      	mov	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4293      	cmp	r3, r2
 80034d2:	f6ff af6a 	blt.w	80033aa <determinant+0x44>
    }

    return result;
 80034d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080034e6 <adjoint>:

//Calculate adjoint matrix
void adjoint(matrix *A, matrix *Ans)
{
 80034e6:	b5b0      	push	{r4, r5, r7, lr}
 80034e8:	b088      	sub	sp, #32
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
    matrix temp;
    allocate_matrix(&temp, A->num_rows, A->num_columns);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7959      	ldrb	r1, [r3, #5]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	791a      	ldrb	r2, [r3, #4]
 80034f8:	f107 0310 	add.w	r3, r7, #16
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fcdd 	bl	8002ebc <allocate_matrix>
    for (int i = 0; i < temp.num_rows; i++){
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	e040      	b.n	800358a <adjoint+0xa4>
        for (int j = 0; j < temp.num_columns; j++){
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	e035      	b.n	800357a <adjoint+0x94>
            matrix M;
            minor(A, &M, i, j);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f107 0108 	add.w	r1, r7, #8
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fec1 	bl	80032a2 <minor>

            temp.index[i][j] = ((i + j) % 2 == 0) ? (determinant(&M, 0)) : ((-1) * determinant(&M, 0));
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4413      	add	r3, r2
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d108      	bne.n	8003540 <adjoint+0x5a>
 800352e:	f107 0308 	add.w	r3, r7, #8
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff16 	bl	8003366 <determinant>
 800353a:	4604      	mov	r4, r0
 800353c:	460d      	mov	r5, r1
 800353e:	e00a      	b.n	8003556 <adjoint+0x70>
 8003540:	f107 0308 	add.w	r3, r7, #8
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff0d 	bl	8003366 <determinant>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4614      	mov	r4, r2
 8003552:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	e9c3 4500 	strd	r4, r5, [r3]
            
            //Deallocate minor matrix
            deallocate_matrix(&M);
 800356a:	f107 0308 	add.w	r3, r7, #8
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fcd9 	bl	8002f26 <deallocate_matrix>
        for (int j = 0; j < temp.num_columns; j++){
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	3301      	adds	r3, #1
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	7d3b      	ldrb	r3, [r7, #20]
 800357c:	461a      	mov	r2, r3
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4293      	cmp	r3, r2
 8003582:	dbc4      	blt.n	800350e <adjoint+0x28>
    for (int i = 0; i < temp.num_rows; i++){
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	7d7b      	ldrb	r3, [r7, #21]
 800358c:	461a      	mov	r2, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4293      	cmp	r3, r2
 8003592:	dbb9      	blt.n	8003508 <adjoint+0x22>
        }
    }
    transpose(&temp, Ans);
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fe41 	bl	8003222 <transpose>
    deallocate_matrix(&temp);
 80035a0:	f107 0310 	add.w	r3, r7, #16
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fcbe 	bl	8002f26 <deallocate_matrix>
}
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080035b4 <inverse>:

void inverse(matrix *A, matrix *inverse_of_A)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
    //Calculate determinant of A
    double determinant_of_A = determinant(A, 0);
 80035be:	2100      	movs	r1, #0
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fed0 	bl	8003366 <determinant>
 80035c6:	e9c7 0102 	strd	r0, r1, [r7, #8]

    //Calculate adjoint matrix of A
    adjoint(A, inverse_of_A);
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff8a 	bl	80034e6 <adjoint>

    //Calculate inverse of A
    scalar_multiplication(inverse_of_A, 1 / determinant_of_A);
 80035d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	4906      	ldr	r1, [pc, #24]	@ (80035f4 <inverse+0x40>)
 80035dc:	f7fd f89e 	bl	800071c <__aeabi_ddiv>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	6838      	ldr	r0, [r7, #0]
 80035e6:	f7ff fd66 	bl	80030b6 <scalar_multiplication>
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	3ff00000 	.word	0x3ff00000

080035f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035fc:	4b08      	ldr	r3, [pc, #32]	@ (8003620 <HAL_Init+0x28>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a07      	ldr	r2, [pc, #28]	@ (8003620 <HAL_Init+0x28>)
 8003602:	f043 0310 	orr.w	r3, r3, #16
 8003606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003608:	2003      	movs	r0, #3
 800360a:	f000 f907 	bl	800381c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800360e:	200f      	movs	r0, #15
 8003610:	f000 f808 	bl	8003624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003614:	f7fd ff7c 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40022000 	.word	0x40022000

08003624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800362c:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_InitTick+0x54>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b12      	ldr	r3, [pc, #72]	@ (800367c <HAL_InitTick+0x58>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4619      	mov	r1, r3
 8003636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800363a:	fbb3 f3f1 	udiv	r3, r3, r1
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f911 	bl	800386a <HAL_SYSTICK_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e00e      	b.n	8003670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b0f      	cmp	r3, #15
 8003656:	d80a      	bhi.n	800366e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003658:	2200      	movs	r2, #0
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	f000 f8e7 	bl	8003832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003664:	4a06      	ldr	r2, [pc, #24]	@ (8003680 <HAL_InitTick+0x5c>)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000078 	.word	0x20000078
 800367c:	20000080 	.word	0x20000080
 8003680:	2000007c 	.word	0x2000007c

08003684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_IncTick+0x1c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_IncTick+0x20>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4413      	add	r3, r2
 8003694:	4a03      	ldr	r2, [pc, #12]	@ (80036a4 <HAL_IncTick+0x20>)
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000080 	.word	0x20000080
 80036a4:	20000298 	.word	0x20000298

080036a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b02      	ldr	r3, [pc, #8]	@ (80036b8 <HAL_GetTick+0x10>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	20000298 	.word	0x20000298

080036bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <__NVIC_SetPriorityGrouping+0x44>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036d8:	4013      	ands	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ee:	4a04      	ldr	r2, [pc, #16]	@ (8003700 <__NVIC_SetPriorityGrouping+0x44>)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	60d3      	str	r3, [r2, #12]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003708:	4b04      	ldr	r3, [pc, #16]	@ (800371c <__NVIC_GetPriorityGrouping+0x18>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 0307 	and.w	r3, r3, #7
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	6039      	str	r1, [r7, #0]
 800372a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	2b00      	cmp	r3, #0
 8003732:	db0a      	blt.n	800374a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	490c      	ldr	r1, [pc, #48]	@ (800376c <__NVIC_SetPriority+0x4c>)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	440b      	add	r3, r1
 8003744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003748:	e00a      	b.n	8003760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4908      	ldr	r1, [pc, #32]	@ (8003770 <__NVIC_SetPriority+0x50>)
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	3b04      	subs	r3, #4
 8003758:	0112      	lsls	r2, r2, #4
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	440b      	add	r3, r1
 800375e:	761a      	strb	r2, [r3, #24]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000e100 	.word	0xe000e100
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	@ 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f1c3 0307 	rsb	r3, r3, #7
 800378e:	2b04      	cmp	r3, #4
 8003790:	bf28      	it	cs
 8003792:	2304      	movcs	r3, #4
 8003794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3304      	adds	r3, #4
 800379a:	2b06      	cmp	r3, #6
 800379c:	d902      	bls.n	80037a4 <NVIC_EncodePriority+0x30>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3b03      	subs	r3, #3
 80037a2:	e000      	b.n	80037a6 <NVIC_EncodePriority+0x32>
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	401a      	ands	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037bc:	f04f 31ff 	mov.w	r1, #4294967295
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	43d9      	mvns	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037cc:	4313      	orrs	r3, r2
         );
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3724      	adds	r7, #36	@ 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e8:	d301      	bcc.n	80037ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00f      	b.n	800380e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <SysTick_Config+0x40>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f6:	210f      	movs	r1, #15
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f7ff ff90 	bl	8003720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <SysTick_Config+0x40>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <SysTick_Config+0x40>)
 8003808:	2207      	movs	r2, #7
 800380a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff49 	bl	80036bc <__NVIC_SetPriorityGrouping>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003844:	f7ff ff5e 	bl	8003704 <__NVIC_GetPriorityGrouping>
 8003848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff90 	bl	8003774 <NVIC_EncodePriority>
 8003854:	4602      	mov	r2, r0
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff5f 	bl	8003720 <__NVIC_SetPriority>
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffb0 	bl	80037d8 <SysTick_Config>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b08b      	sub	sp, #44	@ 0x2c
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388e:	2300      	movs	r3, #0
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003896:	e169      	b.n	8003b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003898:	2201      	movs	r2, #1
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8158 	bne.w	8003b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a9a      	ldr	r2, [pc, #616]	@ (8003b24 <HAL_GPIO_Init+0x2a0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d05e      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038c0:	4a98      	ldr	r2, [pc, #608]	@ (8003b24 <HAL_GPIO_Init+0x2a0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d875      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038c6:	4a98      	ldr	r2, [pc, #608]	@ (8003b28 <HAL_GPIO_Init+0x2a4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d058      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038cc:	4a96      	ldr	r2, [pc, #600]	@ (8003b28 <HAL_GPIO_Init+0x2a4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d86f      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038d2:	4a96      	ldr	r2, [pc, #600]	@ (8003b2c <HAL_GPIO_Init+0x2a8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d052      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038d8:	4a94      	ldr	r2, [pc, #592]	@ (8003b2c <HAL_GPIO_Init+0x2a8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d869      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038de:	4a94      	ldr	r2, [pc, #592]	@ (8003b30 <HAL_GPIO_Init+0x2ac>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04c      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038e4:	4a92      	ldr	r2, [pc, #584]	@ (8003b30 <HAL_GPIO_Init+0x2ac>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d863      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038ea:	4a92      	ldr	r2, [pc, #584]	@ (8003b34 <HAL_GPIO_Init+0x2b0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d046      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038f0:	4a90      	ldr	r2, [pc, #576]	@ (8003b34 <HAL_GPIO_Init+0x2b0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d85d      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038f6:	2b12      	cmp	r3, #18
 80038f8:	d82a      	bhi.n	8003950 <HAL_GPIO_Init+0xcc>
 80038fa:	2b12      	cmp	r3, #18
 80038fc:	d859      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <HAL_GPIO_Init+0x80>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	0800397f 	.word	0x0800397f
 8003908:	08003959 	.word	0x08003959
 800390c:	0800396b 	.word	0x0800396b
 8003910:	080039ad 	.word	0x080039ad
 8003914:	080039b3 	.word	0x080039b3
 8003918:	080039b3 	.word	0x080039b3
 800391c:	080039b3 	.word	0x080039b3
 8003920:	080039b3 	.word	0x080039b3
 8003924:	080039b3 	.word	0x080039b3
 8003928:	080039b3 	.word	0x080039b3
 800392c:	080039b3 	.word	0x080039b3
 8003930:	080039b3 	.word	0x080039b3
 8003934:	080039b3 	.word	0x080039b3
 8003938:	080039b3 	.word	0x080039b3
 800393c:	080039b3 	.word	0x080039b3
 8003940:	080039b3 	.word	0x080039b3
 8003944:	080039b3 	.word	0x080039b3
 8003948:	08003961 	.word	0x08003961
 800394c:	08003975 	.word	0x08003975
 8003950:	4a79      	ldr	r2, [pc, #484]	@ (8003b38 <HAL_GPIO_Init+0x2b4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003956:	e02c      	b.n	80039b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	623b      	str	r3, [r7, #32]
          break;
 800395e:	e029      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	3304      	adds	r3, #4
 8003966:	623b      	str	r3, [r7, #32]
          break;
 8003968:	e024      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	3308      	adds	r3, #8
 8003970:	623b      	str	r3, [r7, #32]
          break;
 8003972:	e01f      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	330c      	adds	r3, #12
 800397a:	623b      	str	r3, [r7, #32]
          break;
 800397c:	e01a      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003986:	2304      	movs	r3, #4
 8003988:	623b      	str	r3, [r7, #32]
          break;
 800398a:	e013      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d105      	bne.n	80039a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003994:	2308      	movs	r3, #8
 8003996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	611a      	str	r2, [r3, #16]
          break;
 800399e:	e009      	b.n	80039b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a0:	2308      	movs	r3, #8
 80039a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	615a      	str	r2, [r3, #20]
          break;
 80039aa:	e003      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039ac:	2300      	movs	r3, #0
 80039ae:	623b      	str	r3, [r7, #32]
          break;
 80039b0:	e000      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          break;
 80039b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2bff      	cmp	r3, #255	@ 0xff
 80039b8:	d801      	bhi.n	80039be <HAL_GPIO_Init+0x13a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	e001      	b.n	80039c2 <HAL_GPIO_Init+0x13e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2bff      	cmp	r3, #255	@ 0xff
 80039c8:	d802      	bhi.n	80039d0 <HAL_GPIO_Init+0x14c>
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	e002      	b.n	80039d6 <HAL_GPIO_Init+0x152>
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	3b08      	subs	r3, #8
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	210f      	movs	r1, #15
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	6a39      	ldr	r1, [r7, #32]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80b1 	beq.w	8003b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a04:	4b4d      	ldr	r3, [pc, #308]	@ (8003b3c <HAL_GPIO_Init+0x2b8>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	4a4c      	ldr	r2, [pc, #304]	@ (8003b3c <HAL_GPIO_Init+0x2b8>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6193      	str	r3, [r2, #24]
 8003a10:	4b4a      	ldr	r3, [pc, #296]	@ (8003b3c <HAL_GPIO_Init+0x2b8>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a1c:	4a48      	ldr	r2, [pc, #288]	@ (8003b40 <HAL_GPIO_Init+0x2bc>)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	220f      	movs	r2, #15
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a40      	ldr	r2, [pc, #256]	@ (8003b44 <HAL_GPIO_Init+0x2c0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_GPIO_Init+0x1ec>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b48 <HAL_GPIO_Init+0x2c4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00d      	beq.n	8003a6c <HAL_GPIO_Init+0x1e8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3e      	ldr	r2, [pc, #248]	@ (8003b4c <HAL_GPIO_Init+0x2c8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <HAL_GPIO_Init+0x1e4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b50 <HAL_GPIO_Init+0x2cc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_GPIO_Init+0x1e0>
 8003a60:	2303      	movs	r3, #3
 8003a62:	e006      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e004      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e002      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a70:	2300      	movs	r3, #0
 8003a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a74:	f002 0203 	and.w	r2, r2, #3
 8003a78:	0092      	lsls	r2, r2, #2
 8003a7a:	4093      	lsls	r3, r2
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a82:	492f      	ldr	r1, [pc, #188]	@ (8003b40 <HAL_GPIO_Init+0x2bc>)
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	3302      	adds	r3, #2
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	492c      	ldr	r1, [pc, #176]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]
 8003aa8:	e006      	b.n	8003ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	4928      	ldr	r1, [pc, #160]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ac4:	4b23      	ldr	r3, [pc, #140]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	4922      	ldr	r1, [pc, #136]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60cb      	str	r3, [r1, #12]
 8003ad0:	e006      	b.n	8003ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ad2:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	491e      	ldr	r1, [pc, #120]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003aec:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4918      	ldr	r1, [pc, #96]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
 8003af8:	e006      	b.n	8003b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003afa:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	4914      	ldr	r1, [pc, #80]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d021      	beq.n	8003b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b14:	4b0f      	ldr	r3, [pc, #60]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	490e      	ldr	r1, [pc, #56]	@ (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
 8003b20:	e021      	b.n	8003b66 <HAL_GPIO_Init+0x2e2>
 8003b22:	bf00      	nop
 8003b24:	10320000 	.word	0x10320000
 8003b28:	10310000 	.word	0x10310000
 8003b2c:	10220000 	.word	0x10220000
 8003b30:	10210000 	.word	0x10210000
 8003b34:	10120000 	.word	0x10120000
 8003b38:	10110000 	.word	0x10110000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40010800 	.word	0x40010800
 8003b48:	40010c00 	.word	0x40010c00
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	40011400 	.word	0x40011400
 8003b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	4909      	ldr	r1, [pc, #36]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f47f ae8e 	bne.w	8003898 <HAL_GPIO_Init+0x14>
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	372c      	adds	r7, #44	@ 0x2c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40010400 	.word	0x40010400

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e272      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8087 	beq.w	8003cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bac:	4b92      	ldr	r3, [pc, #584]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d00c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bb8:	4b8f      	ldr	r3, [pc, #572]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d112      	bne.n	8003bea <HAL_RCC_OscConfig+0x5e>
 8003bc4:	4b8c      	ldr	r3, [pc, #560]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d10b      	bne.n	8003bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd2:	4b89      	ldr	r3, [pc, #548]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d06c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x12c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d168      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e24c      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x76>
 8003bf4:	4b80      	ldr	r3, [pc, #512]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a7f      	ldr	r2, [pc, #508]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	e02e      	b.n	8003c60 <HAL_RCC_OscConfig+0xd4>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x98>
 8003c0a:	4b7b      	ldr	r3, [pc, #492]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a7a      	ldr	r2, [pc, #488]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b78      	ldr	r3, [pc, #480]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a77      	ldr	r2, [pc, #476]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xd4>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0xbc>
 8003c2e:	4b72      	ldr	r3, [pc, #456]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a71      	ldr	r2, [pc, #452]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xd4>
 8003c48:	4b6b      	ldr	r3, [pc, #428]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b68      	ldr	r3, [pc, #416]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a67      	ldr	r2, [pc, #412]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7ff fd1e 	bl	80036a8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7ff fd1a 	bl	80036a8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e200      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b5d      	ldr	r3, [pc, #372]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe4>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7ff fd0a 	bl	80036a8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7ff fd06 	bl	80036a8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	@ 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1ec      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b53      	ldr	r3, [pc, #332]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x10c>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d063      	beq.n	8003d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cd2:	4b49      	ldr	r3, [pc, #292]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x18c>
 8003cde:	4b46      	ldr	r3, [pc, #280]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	4b43      	ldr	r3, [pc, #268]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCC_OscConfig+0x176>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1c0      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b3d      	ldr	r3, [pc, #244]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4939      	ldr	r1, [pc, #228]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e03a      	b.n	8003d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d20:	4b36      	ldr	r3, [pc, #216]	@ (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7ff fcbf 	bl	80036a8 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7ff fcbb 	bl	80036a8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e1a1      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	4b2d      	ldr	r3, [pc, #180]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4927      	ldr	r1, [pc, #156]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b26      	ldr	r3, [pc, #152]	@ (8003dfc <HAL_RCC_OscConfig+0x270>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7ff fc9e 	bl	80036a8 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d70:	f7ff fc9a 	bl	80036a8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e180      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d03a      	beq.n	8003e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d019      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <HAL_RCC_OscConfig+0x274>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da8:	f7ff fc7e 	bl	80036a8 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db0:	f7ff fc7a 	bl	80036a8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e160      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f000 fa9c 	bl	800430c <RCC_Delay>
 8003dd4:	e01c      	b.n	8003e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ddc:	f7ff fc64 	bl	80036a8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de2:	e00f      	b.n	8003e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de4:	f7ff fc60 	bl	80036a8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d908      	bls.n	8003e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e146      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	42420000 	.word	0x42420000
 8003e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b92      	ldr	r3, [pc, #584]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e9      	bne.n	8003de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a6 	beq.w	8003f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b8b      	ldr	r3, [pc, #556]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10d      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	4b88      	ldr	r3, [pc, #544]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	4a87      	ldr	r2, [pc, #540]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	61d3      	str	r3, [r2, #28]
 8003e3a:	4b85      	ldr	r3, [pc, #532]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b82      	ldr	r3, [pc, #520]	@ (8004054 <HAL_RCC_OscConfig+0x4c8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e56:	4b7f      	ldr	r3, [pc, #508]	@ (8004054 <HAL_RCC_OscConfig+0x4c8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004054 <HAL_RCC_OscConfig+0x4c8>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7ff fc21 	bl	80036a8 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7ff fc1d 	bl	80036a8 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	@ 0x64
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e103      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	4b75      	ldr	r3, [pc, #468]	@ (8004054 <HAL_RCC_OscConfig+0x4c8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x312>
 8003e90:	4b6f      	ldr	r3, [pc, #444]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4a6e      	ldr	r2, [pc, #440]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6213      	str	r3, [r2, #32]
 8003e9c:	e02d      	b.n	8003efa <HAL_RCC_OscConfig+0x36e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x334>
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4a69      	ldr	r2, [pc, #420]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6213      	str	r3, [r2, #32]
 8003eb2:	4b67      	ldr	r3, [pc, #412]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4a66      	ldr	r2, [pc, #408]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6213      	str	r3, [r2, #32]
 8003ebe:	e01c      	b.n	8003efa <HAL_RCC_OscConfig+0x36e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x356>
 8003ec8:	4b61      	ldr	r3, [pc, #388]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4a60      	ldr	r2, [pc, #384]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6213      	str	r3, [r2, #32]
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4a5d      	ldr	r2, [pc, #372]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	e00b      	b.n	8003efa <HAL_RCC_OscConfig+0x36e>
 8003ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4a5a      	ldr	r2, [pc, #360]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6213      	str	r3, [r2, #32]
 8003eee:	4b58      	ldr	r3, [pc, #352]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4a57      	ldr	r2, [pc, #348]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7ff fbd1 	bl	80036a8 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7ff fbcd 	bl	80036a8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0b1      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	4b4b      	ldr	r3, [pc, #300]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ee      	beq.n	8003f0a <HAL_RCC_OscConfig+0x37e>
 8003f2c:	e014      	b.n	8003f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7ff fbbb 	bl	80036a8 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7ff fbb7 	bl	80036a8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e09b      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	4b40      	ldr	r3, [pc, #256]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ee      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4a3b      	ldr	r2, [pc, #236]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8087 	beq.w	8004082 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f74:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d061      	beq.n	8004044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d146      	bne.n	8004016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b33      	ldr	r3, [pc, #204]	@ (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7ff fb8b 	bl	80036a8 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f96:	f7ff fb87 	bl	80036a8 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e06d      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa8:	4b29      	ldr	r3, [pc, #164]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4921      	ldr	r1, [pc, #132]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a19      	ldr	r1, [r3, #32]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	491b      	ldr	r1, [pc, #108]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7ff fb5b 	bl	80036a8 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7ff fb57 	bl	80036a8 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e03d      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004008:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x46a>
 8004014:	e035      	b.n	8004082 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <HAL_RCC_OscConfig+0x4cc>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7ff fb44 	bl	80036a8 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7ff fb40 	bl	80036a8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e026      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x498>
 8004042:	e01e      	b.n	8004082 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e019      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
 8004050:	40021000 	.word	0x40021000
 8004054:	40007000 	.word	0x40007000
 8004058:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_RCC_OscConfig+0x500>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	429a      	cmp	r2, r3
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000

08004090 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0d0      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d910      	bls.n	80040d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b67      	ldr	r3, [pc, #412]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	4965      	ldr	r1, [pc, #404]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b63      	ldr	r3, [pc, #396]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0b8      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d020      	beq.n	8004122 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ec:	4b59      	ldr	r3, [pc, #356]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a58      	ldr	r2, [pc, #352]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004104:	4b53      	ldr	r3, [pc, #332]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a52      	ldr	r2, [pc, #328]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800410e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004110:	4b50      	ldr	r3, [pc, #320]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	494d      	ldr	r1, [pc, #308]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d040      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d115      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e07f      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e073      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06b      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b39      	ldr	r3, [pc, #228]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4936      	ldr	r1, [pc, #216]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004180:	f7ff fa92 	bl	80036a8 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7ff fa8e 	bl	80036a8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e053      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b27      	ldr	r3, [pc, #156]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d210      	bcs.n	80041e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b24      	ldr	r3, [pc, #144]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 0207 	bic.w	r2, r3, #7
 80041c6:	4922      	ldr	r1, [pc, #136]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	4b20      	ldr	r3, [pc, #128]	@ (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e032      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4916      	ldr	r1, [pc, #88]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	490e      	ldr	r1, [pc, #56]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800421e:	f000 f821 	bl	8004264 <HAL_RCC_GetSysClockFreq>
 8004222:	4602      	mov	r2, r0
 8004224:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	490a      	ldr	r1, [pc, #40]	@ (8004258 <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	5ccb      	ldrb	r3, [r1, r3]
 8004232:	fa22 f303 	lsr.w	r3, r2, r3
 8004236:	4a09      	ldr	r2, [pc, #36]	@ (800425c <HAL_RCC_ClockConfig+0x1cc>)
 8004238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <HAL_RCC_ClockConfig+0x1d0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f9f0 	bl	8003624 <HAL_InitTick>

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40022000 	.word	0x40022000
 8004254:	40021000 	.word	0x40021000
 8004258:	08006e90 	.word	0x08006e90
 800425c:	20000078 	.word	0x20000078
 8004260:	2000007c 	.word	0x2000007c

08004264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800427e:	4b1e      	ldr	r3, [pc, #120]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b04      	cmp	r3, #4
 800428c:	d002      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x30>
 800428e:	2b08      	cmp	r3, #8
 8004290:	d003      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0x36>
 8004292:	e027      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004294:	4b19      	ldr	r3, [pc, #100]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004296:	613b      	str	r3, [r7, #16]
      break;
 8004298:	e027      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0c9b      	lsrs	r3, r3, #18
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042a4:	5cd3      	ldrb	r3, [r2, r3]
 80042a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d010      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042b2:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	0c5b      	lsrs	r3, r3, #17
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042be:	5cd3      	ldrb	r3, [r2, r3]
 80042c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a0d      	ldr	r2, [pc, #52]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x98>)
 80042c6:	fb03 f202 	mul.w	r2, r3, r2
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e004      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004308 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	613b      	str	r3, [r7, #16]
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x98>)
 80042e6:	613b      	str	r3, [r7, #16]
      break;
 80042e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ea:	693b      	ldr	r3, [r7, #16]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	007a1200 	.word	0x007a1200
 8004300:	08006ea0 	.word	0x08006ea0
 8004304:	08006eb0 	.word	0x08006eb0
 8004308:	003d0900 	.word	0x003d0900

0800430c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004314:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <RCC_Delay+0x34>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a0a      	ldr	r2, [pc, #40]	@ (8004344 <RCC_Delay+0x38>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0a5b      	lsrs	r3, r3, #9
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004328:	bf00      	nop
  }
  while (Delay --);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1e5a      	subs	r2, r3, #1
 800432e:	60fa      	str	r2, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f9      	bne.n	8004328 <RCC_Delay+0x1c>
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	20000078 	.word	0x20000078
 8004344:	10624dd3 	.word	0x10624dd3

08004348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e041      	b.n	80043de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd f96a 	bl	8001648 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f000 fac2 	bl	8004910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_TIM_PWM_Start+0x24>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e022      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d109      	bne.n	8004426 <HAL_TIM_PWM_Start+0x3e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e015      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d109      	bne.n	8004440 <HAL_TIM_PWM_Start+0x58>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	e008      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e05e      	b.n	8004518 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0x82>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004468:	e013      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0x92>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004478:	e00b      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0xa2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004488:	e003      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2202      	movs	r2, #2
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fc2e 	bl	8004cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004520 <HAL_TIM_PWM_Start+0x138>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a18      	ldr	r2, [pc, #96]	@ (8004520 <HAL_TIM_PWM_Start+0x138>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIM_PWM_Start+0xfa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044cc:	d009      	beq.n	80044e2 <HAL_TIM_PWM_Start+0xfa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <HAL_TIM_PWM_Start+0x13c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIM_PWM_Start+0xfa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <HAL_TIM_PWM_Start+0x140>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d111      	bne.n	8004506 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d010      	beq.n	8004516 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004504:	e007      	b.n	8004516 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800

0800452c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e093      	b.n	8004668 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fd f80d 	bl	8001574 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004570:	f023 0307 	bic.w	r3, r3, #7
 8004574:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f000 f9c5 	bl	8004910 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	4313      	orrs	r3, r2
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045cc:	f023 030c 	bic.w	r3, r3, #12
 80045d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	4313      	orrs	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	031b      	lsls	r3, r3, #12
 80045fc:	4313      	orrs	r3, r2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	4313      	orrs	r3, r2
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004680:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004688:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004690:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004698:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d110      	bne.n	80046c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d102      	bne.n	80046ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a6:	7b7b      	ldrb	r3, [r7, #13]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e069      	b.n	8004784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046c0:	e031      	b.n	8004726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d110      	bne.n	80046ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c8:	7bbb      	ldrb	r3, [r7, #14]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d102      	bne.n	80046d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ce:	7b3b      	ldrb	r3, [r7, #12]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e055      	b.n	8004784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046e8:	e01d      	b.n	8004726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d108      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f6:	7b7b      	ldrb	r3, [r7, #13]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d102      	bne.n	8004702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046fc:	7b3b      	ldrb	r3, [r7, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e03e      	b.n	8004784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_TIM_Encoder_Start+0xc4>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d008      	beq.n	8004744 <HAL_TIM_Encoder_Start+0xd4>
 8004732:	e00f      	b.n	8004754 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fadd 	bl	8004cfc <TIM_CCxChannelCmd>
      break;
 8004742:	e016      	b.n	8004772 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2201      	movs	r2, #1
 800474a:	2104      	movs	r1, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fad5 	bl	8004cfc <TIM_CCxChannelCmd>
      break;
 8004752:	e00e      	b.n	8004772 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 facd 	bl	8004cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	2104      	movs	r1, #4
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fac6 	bl	8004cfc <TIM_CCxChannelCmd>
      break;
 8004770:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0ae      	b.n	8004908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	f200 809f 	bhi.w	80048f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047f5 	.word	0x080047f5
 80047c4:	080048f9 	.word	0x080048f9
 80047c8:	080048f9 	.word	0x080048f9
 80047cc:	080048f9 	.word	0x080048f9
 80047d0:	08004835 	.word	0x08004835
 80047d4:	080048f9 	.word	0x080048f9
 80047d8:	080048f9 	.word	0x080048f9
 80047dc:	080048f9 	.word	0x080048f9
 80047e0:	08004877 	.word	0x08004877
 80047e4:	080048f9 	.word	0x080048f9
 80047e8:	080048f9 	.word	0x080048f9
 80047ec:	080048f9 	.word	0x080048f9
 80047f0:	080048b7 	.word	0x080048b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f8f6 	bl	80049ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0208 	orr.w	r2, r2, #8
 800480e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0204 	bic.w	r2, r2, #4
 800481e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	619a      	str	r2, [r3, #24]
      break;
 8004832:	e064      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f93c 	bl	8004ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	021a      	lsls	r2, r3, #8
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
      break;
 8004874:	e043      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f985 	bl	8004b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0208 	orr.w	r2, r2, #8
 8004890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0204 	bic.w	r2, r2, #4
 80048a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	61da      	str	r2, [r3, #28]
      break;
 80048b4:	e023      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f9cf 	bl	8004c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69d9      	ldr	r1, [r3, #28]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	021a      	lsls	r2, r3, #8
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	61da      	str	r2, [r3, #28]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	75fb      	strb	r3, [r7, #23]
      break;
 80048fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a2f      	ldr	r2, [pc, #188]	@ (80049e0 <TIM_Base_SetConfig+0xd0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00b      	beq.n	8004940 <TIM_Base_SetConfig+0x30>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492e:	d007      	beq.n	8004940 <TIM_Base_SetConfig+0x30>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a2c      	ldr	r2, [pc, #176]	@ (80049e4 <TIM_Base_SetConfig+0xd4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0x30>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a2b      	ldr	r2, [pc, #172]	@ (80049e8 <TIM_Base_SetConfig+0xd8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d108      	bne.n	8004952 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a22      	ldr	r2, [pc, #136]	@ (80049e0 <TIM_Base_SetConfig+0xd0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00b      	beq.n	8004972 <TIM_Base_SetConfig+0x62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004960:	d007      	beq.n	8004972 <TIM_Base_SetConfig+0x62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1f      	ldr	r2, [pc, #124]	@ (80049e4 <TIM_Base_SetConfig+0xd4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_Base_SetConfig+0x62>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1e      	ldr	r2, [pc, #120]	@ (80049e8 <TIM_Base_SetConfig+0xd8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d108      	bne.n	8004984 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a0d      	ldr	r2, [pc, #52]	@ (80049e0 <TIM_Base_SetConfig+0xd0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d103      	bne.n	80049b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	611a      	str	r2, [r3, #16]
  }
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800

080049ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f023 0201 	bic.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 0302 	bic.w	r3, r3, #2
 8004a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab4 <TIM_OC1_SetConfig+0xc8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10c      	bne.n	8004a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0308 	bic.w	r3, r3, #8
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <TIM_OC1_SetConfig+0xc8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d111      	bne.n	8004a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40012c00 	.word	0x40012c00

08004ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f023 0210 	bic.w	r2, r3, #16
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0320 	bic.w	r3, r3, #32
 8004b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1d      	ldr	r2, [pc, #116]	@ (8004b88 <TIM_OC2_SetConfig+0xd0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10d      	bne.n	8004b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a14      	ldr	r2, [pc, #80]	@ (8004b88 <TIM_OC2_SetConfig+0xd0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d113      	bne.n	8004b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00

08004b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0303 	bic.w	r3, r3, #3
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <TIM_OC3_SetConfig+0xd0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10d      	bne.n	8004c06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a14      	ldr	r2, [pc, #80]	@ (8004c5c <TIM_OC3_SetConfig+0xd0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d113      	bne.n	8004c36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	621a      	str	r2, [r3, #32]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00

08004c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	031b      	lsls	r3, r3, #12
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf8 <TIM_OC4_SetConfig+0x98>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d109      	bne.n	8004cd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	019b      	lsls	r3, r3, #6
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	40012c00 	.word	0x40012c00

08004cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2201      	movs	r2, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	401a      	ands	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e046      	b.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a16      	ldr	r2, [pc, #88]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00e      	beq.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da8:	d009      	beq.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a10      	ldr	r2, [pc, #64]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800

08004e00 <calloc>:
 8004e00:	4b02      	ldr	r3, [pc, #8]	@ (8004e0c <calloc+0xc>)
 8004e02:	460a      	mov	r2, r1
 8004e04:	4601      	mov	r1, r0
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	f000 b802 	b.w	8004e10 <_calloc_r>
 8004e0c:	20000084 	.word	0x20000084

08004e10 <_calloc_r>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	fba1 5402 	umull	r5, r4, r1, r2
 8004e16:	b93c      	cbnz	r4, 8004e28 <_calloc_r+0x18>
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f000 f83f 	bl	8004e9c <_malloc_r>
 8004e1e:	4606      	mov	r6, r0
 8004e20:	b928      	cbnz	r0, 8004e2e <_calloc_r+0x1e>
 8004e22:	2600      	movs	r6, #0
 8004e24:	4630      	mov	r0, r6
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	220c      	movs	r2, #12
 8004e2a:	6002      	str	r2, [r0, #0]
 8004e2c:	e7f9      	b.n	8004e22 <_calloc_r+0x12>
 8004e2e:	462a      	mov	r2, r5
 8004e30:	4621      	mov	r1, r4
 8004e32:	f000 f8bf 	bl	8004fb4 <memset>
 8004e36:	e7f5      	b.n	8004e24 <_calloc_r+0x14>

08004e38 <malloc>:
 8004e38:	4b02      	ldr	r3, [pc, #8]	@ (8004e44 <malloc+0xc>)
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	f000 b82d 	b.w	8004e9c <_malloc_r>
 8004e42:	bf00      	nop
 8004e44:	20000084 	.word	0x20000084

08004e48 <free>:
 8004e48:	4b02      	ldr	r3, [pc, #8]	@ (8004e54 <free+0xc>)
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	f000 b8f5 	b.w	800503c <_free_r>
 8004e52:	bf00      	nop
 8004e54:	20000084 	.word	0x20000084

08004e58 <sbrk_aligned>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004e98 <sbrk_aligned+0x40>)
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	6831      	ldr	r1, [r6, #0]
 8004e60:	4605      	mov	r5, r0
 8004e62:	b911      	cbnz	r1, 8004e6a <sbrk_aligned+0x12>
 8004e64:	f000 f8ae 	bl	8004fc4 <_sbrk_r>
 8004e68:	6030      	str	r0, [r6, #0]
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 f8a9 	bl	8004fc4 <_sbrk_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	d103      	bne.n	8004e7e <sbrk_aligned+0x26>
 8004e76:	f04f 34ff 	mov.w	r4, #4294967295
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
 8004e7e:	1cc4      	adds	r4, r0, #3
 8004e80:	f024 0403 	bic.w	r4, r4, #3
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d0f8      	beq.n	8004e7a <sbrk_aligned+0x22>
 8004e88:	1a21      	subs	r1, r4, r0
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 f89a 	bl	8004fc4 <_sbrk_r>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d1f2      	bne.n	8004e7a <sbrk_aligned+0x22>
 8004e94:	e7ef      	b.n	8004e76 <sbrk_aligned+0x1e>
 8004e96:	bf00      	nop
 8004e98:	2000029c 	.word	0x2000029c

08004e9c <_malloc_r>:
 8004e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea0:	1ccd      	adds	r5, r1, #3
 8004ea2:	f025 0503 	bic.w	r5, r5, #3
 8004ea6:	3508      	adds	r5, #8
 8004ea8:	2d0c      	cmp	r5, #12
 8004eaa:	bf38      	it	cc
 8004eac:	250c      	movcc	r5, #12
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	db01      	blt.n	8004eb8 <_malloc_r+0x1c>
 8004eb4:	42a9      	cmp	r1, r5
 8004eb6:	d904      	bls.n	8004ec2 <_malloc_r+0x26>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f98 <_malloc_r+0xfc>
 8004ec6:	f000 f869 	bl	8004f9c <__malloc_lock>
 8004eca:	f8d8 3000 	ldr.w	r3, [r8]
 8004ece:	461c      	mov	r4, r3
 8004ed0:	bb44      	cbnz	r4, 8004f24 <_malloc_r+0x88>
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7ff ffbf 	bl	8004e58 <sbrk_aligned>
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	4604      	mov	r4, r0
 8004ede:	d158      	bne.n	8004f92 <_malloc_r+0xf6>
 8004ee0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ee4:	4627      	mov	r7, r4
 8004ee6:	2f00      	cmp	r7, #0
 8004ee8:	d143      	bne.n	8004f72 <_malloc_r+0xd6>
 8004eea:	2c00      	cmp	r4, #0
 8004eec:	d04b      	beq.n	8004f86 <_malloc_r+0xea>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	eb04 0903 	add.w	r9, r4, r3
 8004ef8:	f000 f864 	bl	8004fc4 <_sbrk_r>
 8004efc:	4581      	cmp	r9, r0
 8004efe:	d142      	bne.n	8004f86 <_malloc_r+0xea>
 8004f00:	6821      	ldr	r1, [r4, #0]
 8004f02:	4630      	mov	r0, r6
 8004f04:	1a6d      	subs	r5, r5, r1
 8004f06:	4629      	mov	r1, r5
 8004f08:	f7ff ffa6 	bl	8004e58 <sbrk_aligned>
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d03a      	beq.n	8004f86 <_malloc_r+0xea>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	442b      	add	r3, r5
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	f8d8 3000 	ldr.w	r3, [r8]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	bb62      	cbnz	r2, 8004f78 <_malloc_r+0xdc>
 8004f1e:	f8c8 7000 	str.w	r7, [r8]
 8004f22:	e00f      	b.n	8004f44 <_malloc_r+0xa8>
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	1b52      	subs	r2, r2, r5
 8004f28:	d420      	bmi.n	8004f6c <_malloc_r+0xd0>
 8004f2a:	2a0b      	cmp	r2, #11
 8004f2c:	d917      	bls.n	8004f5e <_malloc_r+0xc2>
 8004f2e:	1961      	adds	r1, r4, r5
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	6025      	str	r5, [r4, #0]
 8004f34:	bf18      	it	ne
 8004f36:	6059      	strne	r1, [r3, #4]
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	bf08      	it	eq
 8004f3c:	f8c8 1000 	streq.w	r1, [r8]
 8004f40:	5162      	str	r2, [r4, r5]
 8004f42:	604b      	str	r3, [r1, #4]
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 f82f 	bl	8004fa8 <__malloc_unlock>
 8004f4a:	f104 000b 	add.w	r0, r4, #11
 8004f4e:	1d23      	adds	r3, r4, #4
 8004f50:	f020 0007 	bic.w	r0, r0, #7
 8004f54:	1ac2      	subs	r2, r0, r3
 8004f56:	bf1c      	itt	ne
 8004f58:	1a1b      	subne	r3, r3, r0
 8004f5a:	50a3      	strne	r3, [r4, r2]
 8004f5c:	e7af      	b.n	8004ebe <_malloc_r+0x22>
 8004f5e:	6862      	ldr	r2, [r4, #4]
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	bf0c      	ite	eq
 8004f64:	f8c8 2000 	streq.w	r2, [r8]
 8004f68:	605a      	strne	r2, [r3, #4]
 8004f6a:	e7eb      	b.n	8004f44 <_malloc_r+0xa8>
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	6864      	ldr	r4, [r4, #4]
 8004f70:	e7ae      	b.n	8004ed0 <_malloc_r+0x34>
 8004f72:	463c      	mov	r4, r7
 8004f74:	687f      	ldr	r7, [r7, #4]
 8004f76:	e7b6      	b.n	8004ee6 <_malloc_r+0x4a>
 8004f78:	461a      	mov	r2, r3
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	d1fb      	bne.n	8004f78 <_malloc_r+0xdc>
 8004f80:	2300      	movs	r3, #0
 8004f82:	6053      	str	r3, [r2, #4]
 8004f84:	e7de      	b.n	8004f44 <_malloc_r+0xa8>
 8004f86:	230c      	movs	r3, #12
 8004f88:	4630      	mov	r0, r6
 8004f8a:	6033      	str	r3, [r6, #0]
 8004f8c:	f000 f80c 	bl	8004fa8 <__malloc_unlock>
 8004f90:	e794      	b.n	8004ebc <_malloc_r+0x20>
 8004f92:	6005      	str	r5, [r0, #0]
 8004f94:	e7d6      	b.n	8004f44 <_malloc_r+0xa8>
 8004f96:	bf00      	nop
 8004f98:	200002a0 	.word	0x200002a0

08004f9c <__malloc_lock>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	@ (8004fa4 <__malloc_lock+0x8>)
 8004f9e:	f000 b84b 	b.w	8005038 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	200003e0 	.word	0x200003e0

08004fa8 <__malloc_unlock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	@ (8004fb0 <__malloc_unlock+0x8>)
 8004faa:	f000 b846 	b.w	800503a <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	200003e0 	.word	0x200003e0

08004fb4 <memset>:
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4402      	add	r2, r0
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <_sbrk_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4d05      	ldr	r5, [pc, #20]	@ (8004fe0 <_sbrk_r+0x1c>)
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fc fbb8 	bl	8001744 <_sbrk>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_sbrk_r+0x1a>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_sbrk_r+0x1a>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200003dc 	.word	0x200003dc

08004fe4 <__errno>:
 8004fe4:	4b01      	ldr	r3, [pc, #4]	@ (8004fec <__errno+0x8>)
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000084 	.word	0x20000084

08004ff0 <__libc_init_array>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	2600      	movs	r6, #0
 8004ff4:	4d0c      	ldr	r5, [pc, #48]	@ (8005028 <__libc_init_array+0x38>)
 8004ff6:	4c0d      	ldr	r4, [pc, #52]	@ (800502c <__libc_init_array+0x3c>)
 8004ff8:	1b64      	subs	r4, r4, r5
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	42a6      	cmp	r6, r4
 8004ffe:	d109      	bne.n	8005014 <__libc_init_array+0x24>
 8005000:	f001 ff3a 	bl	8006e78 <_init>
 8005004:	2600      	movs	r6, #0
 8005006:	4d0a      	ldr	r5, [pc, #40]	@ (8005030 <__libc_init_array+0x40>)
 8005008:	4c0a      	ldr	r4, [pc, #40]	@ (8005034 <__libc_init_array+0x44>)
 800500a:	1b64      	subs	r4, r4, r5
 800500c:	10a4      	asrs	r4, r4, #2
 800500e:	42a6      	cmp	r6, r4
 8005010:	d105      	bne.n	800501e <__libc_init_array+0x2e>
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	f855 3b04 	ldr.w	r3, [r5], #4
 8005018:	4798      	blx	r3
 800501a:	3601      	adds	r6, #1
 800501c:	e7ee      	b.n	8004ffc <__libc_init_array+0xc>
 800501e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005022:	4798      	blx	r3
 8005024:	3601      	adds	r6, #1
 8005026:	e7f2      	b.n	800500e <__libc_init_array+0x1e>
 8005028:	080070c0 	.word	0x080070c0
 800502c:	080070c0 	.word	0x080070c0
 8005030:	080070c0 	.word	0x080070c0
 8005034:	080070c4 	.word	0x080070c4

08005038 <__retarget_lock_acquire_recursive>:
 8005038:	4770      	bx	lr

0800503a <__retarget_lock_release_recursive>:
 800503a:	4770      	bx	lr

0800503c <_free_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4605      	mov	r5, r0
 8005040:	2900      	cmp	r1, #0
 8005042:	d040      	beq.n	80050c6 <_free_r+0x8a>
 8005044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005048:	1f0c      	subs	r4, r1, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	18e4      	addlt	r4, r4, r3
 8005050:	f7ff ffa4 	bl	8004f9c <__malloc_lock>
 8005054:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <_free_r+0x8c>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	b933      	cbnz	r3, 8005068 <_free_r+0x2c>
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	6014      	str	r4, [r2, #0]
 800505e:	4628      	mov	r0, r5
 8005060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005064:	f7ff bfa0 	b.w	8004fa8 <__malloc_unlock>
 8005068:	42a3      	cmp	r3, r4
 800506a:	d908      	bls.n	800507e <_free_r+0x42>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	1821      	adds	r1, r4, r0
 8005070:	428b      	cmp	r3, r1
 8005072:	bf01      	itttt	eq
 8005074:	6819      	ldreq	r1, [r3, #0]
 8005076:	685b      	ldreq	r3, [r3, #4]
 8005078:	1809      	addeq	r1, r1, r0
 800507a:	6021      	streq	r1, [r4, #0]
 800507c:	e7ed      	b.n	800505a <_free_r+0x1e>
 800507e:	461a      	mov	r2, r3
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	b10b      	cbz	r3, 8005088 <_free_r+0x4c>
 8005084:	42a3      	cmp	r3, r4
 8005086:	d9fa      	bls.n	800507e <_free_r+0x42>
 8005088:	6811      	ldr	r1, [r2, #0]
 800508a:	1850      	adds	r0, r2, r1
 800508c:	42a0      	cmp	r0, r4
 800508e:	d10b      	bne.n	80050a8 <_free_r+0x6c>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	4401      	add	r1, r0
 8005094:	1850      	adds	r0, r2, r1
 8005096:	4283      	cmp	r3, r0
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	d1e0      	bne.n	800505e <_free_r+0x22>
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4408      	add	r0, r1
 80050a2:	6010      	str	r0, [r2, #0]
 80050a4:	6053      	str	r3, [r2, #4]
 80050a6:	e7da      	b.n	800505e <_free_r+0x22>
 80050a8:	d902      	bls.n	80050b0 <_free_r+0x74>
 80050aa:	230c      	movs	r3, #12
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	e7d6      	b.n	800505e <_free_r+0x22>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	1821      	adds	r1, r4, r0
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf01      	itttt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	1809      	addeq	r1, r1, r0
 80050be:	6021      	streq	r1, [r4, #0]
 80050c0:	6063      	str	r3, [r4, #4]
 80050c2:	6054      	str	r4, [r2, #4]
 80050c4:	e7cb      	b.n	800505e <_free_r+0x22>
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	200002a0 	.word	0x200002a0

080050cc <pow>:
 80050cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d0:	4614      	mov	r4, r2
 80050d2:	461d      	mov	r5, r3
 80050d4:	4680      	mov	r8, r0
 80050d6:	4689      	mov	r9, r1
 80050d8:	f000 fb66 	bl	80057a8 <__ieee754_pow>
 80050dc:	4622      	mov	r2, r4
 80050de:	4606      	mov	r6, r0
 80050e0:	460f      	mov	r7, r1
 80050e2:	462b      	mov	r3, r5
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb fc88 	bl	80009fc <__aeabi_dcmpun>
 80050ec:	bbc8      	cbnz	r0, 8005162 <pow+0x96>
 80050ee:	2200      	movs	r2, #0
 80050f0:	2300      	movs	r3, #0
 80050f2:	4640      	mov	r0, r8
 80050f4:	4649      	mov	r1, r9
 80050f6:	f7fb fc4f 	bl	8000998 <__aeabi_dcmpeq>
 80050fa:	b1b8      	cbz	r0, 800512c <pow+0x60>
 80050fc:	2200      	movs	r2, #0
 80050fe:	2300      	movs	r3, #0
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb fc48 	bl	8000998 <__aeabi_dcmpeq>
 8005108:	2800      	cmp	r0, #0
 800510a:	d141      	bne.n	8005190 <pow+0xc4>
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f000 f8f4 	bl	80052fc <finite>
 8005114:	b328      	cbz	r0, 8005162 <pow+0x96>
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	4620      	mov	r0, r4
 800511c:	4629      	mov	r1, r5
 800511e:	f7fb fc45 	bl	80009ac <__aeabi_dcmplt>
 8005122:	b1f0      	cbz	r0, 8005162 <pow+0x96>
 8005124:	f7ff ff5e 	bl	8004fe4 <__errno>
 8005128:	2322      	movs	r3, #34	@ 0x22
 800512a:	e019      	b.n	8005160 <pow+0x94>
 800512c:	4630      	mov	r0, r6
 800512e:	4639      	mov	r1, r7
 8005130:	f000 f8e4 	bl	80052fc <finite>
 8005134:	b9c8      	cbnz	r0, 800516a <pow+0x9e>
 8005136:	4640      	mov	r0, r8
 8005138:	4649      	mov	r1, r9
 800513a:	f000 f8df 	bl	80052fc <finite>
 800513e:	b1a0      	cbz	r0, 800516a <pow+0x9e>
 8005140:	4620      	mov	r0, r4
 8005142:	4629      	mov	r1, r5
 8005144:	f000 f8da 	bl	80052fc <finite>
 8005148:	b178      	cbz	r0, 800516a <pow+0x9e>
 800514a:	4632      	mov	r2, r6
 800514c:	463b      	mov	r3, r7
 800514e:	4630      	mov	r0, r6
 8005150:	4639      	mov	r1, r7
 8005152:	f7fb fc53 	bl	80009fc <__aeabi_dcmpun>
 8005156:	2800      	cmp	r0, #0
 8005158:	d0e4      	beq.n	8005124 <pow+0x58>
 800515a:	f7ff ff43 	bl	8004fe4 <__errno>
 800515e:	2321      	movs	r3, #33	@ 0x21
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	4630      	mov	r0, r6
 8005164:	4639      	mov	r1, r7
 8005166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800516a:	2200      	movs	r2, #0
 800516c:	2300      	movs	r3, #0
 800516e:	4630      	mov	r0, r6
 8005170:	4639      	mov	r1, r7
 8005172:	f7fb fc11 	bl	8000998 <__aeabi_dcmpeq>
 8005176:	2800      	cmp	r0, #0
 8005178:	d0f3      	beq.n	8005162 <pow+0x96>
 800517a:	4640      	mov	r0, r8
 800517c:	4649      	mov	r1, r9
 800517e:	f000 f8bd 	bl	80052fc <finite>
 8005182:	2800      	cmp	r0, #0
 8005184:	d0ed      	beq.n	8005162 <pow+0x96>
 8005186:	4620      	mov	r0, r4
 8005188:	4629      	mov	r1, r5
 800518a:	f000 f8b7 	bl	80052fc <finite>
 800518e:	e7c8      	b.n	8005122 <pow+0x56>
 8005190:	2600      	movs	r6, #0
 8005192:	4f01      	ldr	r7, [pc, #4]	@ (8005198 <pow+0xcc>)
 8005194:	e7e5      	b.n	8005162 <pow+0x96>
 8005196:	bf00      	nop
 8005198:	3ff00000 	.word	0x3ff00000

0800519c <sqrt>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	4606      	mov	r6, r0
 80051a0:	460f      	mov	r7, r1
 80051a2:	f000 f8b1 	bl	8005308 <__ieee754_sqrt>
 80051a6:	4632      	mov	r2, r6
 80051a8:	4604      	mov	r4, r0
 80051aa:	460d      	mov	r5, r1
 80051ac:	463b      	mov	r3, r7
 80051ae:	4630      	mov	r0, r6
 80051b0:	4639      	mov	r1, r7
 80051b2:	f7fb fc23 	bl	80009fc <__aeabi_dcmpun>
 80051b6:	b990      	cbnz	r0, 80051de <sqrt+0x42>
 80051b8:	2200      	movs	r2, #0
 80051ba:	2300      	movs	r3, #0
 80051bc:	4630      	mov	r0, r6
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb fbf4 	bl	80009ac <__aeabi_dcmplt>
 80051c4:	b158      	cbz	r0, 80051de <sqrt+0x42>
 80051c6:	f7ff ff0d 	bl	8004fe4 <__errno>
 80051ca:	2321      	movs	r3, #33	@ 0x21
 80051cc:	2200      	movs	r2, #0
 80051ce:	6003      	str	r3, [r0, #0]
 80051d0:	2300      	movs	r3, #0
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	f7fb faa1 	bl	800071c <__aeabi_ddiv>
 80051da:	4604      	mov	r4, r0
 80051dc:	460d      	mov	r5, r1
 80051de:	4620      	mov	r0, r4
 80051e0:	4629      	mov	r1, r5
 80051e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051e4 <cos>:
 80051e4:	b530      	push	{r4, r5, lr}
 80051e6:	4d20      	ldr	r5, [pc, #128]	@ (8005268 <cos+0x84>)
 80051e8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80051ec:	42ac      	cmp	r4, r5
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	b087      	sub	sp, #28
 80051f4:	d806      	bhi.n	8005204 <cos+0x20>
 80051f6:	2200      	movs	r2, #0
 80051f8:	2300      	movs	r3, #0
 80051fa:	b007      	add	sp, #28
 80051fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005200:	f000 b95a 	b.w	80054b8 <__kernel_cos>
 8005204:	4d19      	ldr	r5, [pc, #100]	@ (800526c <cos+0x88>)
 8005206:	42ac      	cmp	r4, r5
 8005208:	d903      	bls.n	8005212 <cos+0x2e>
 800520a:	f7fa ffa5 	bl	8000158 <__aeabi_dsub>
 800520e:	b007      	add	sp, #28
 8005210:	bd30      	pop	{r4, r5, pc}
 8005212:	aa02      	add	r2, sp, #8
 8005214:	f000 fff0 	bl	80061f8 <__ieee754_rem_pio2>
 8005218:	f000 0003 	and.w	r0, r0, #3
 800521c:	2801      	cmp	r0, #1
 800521e:	d009      	beq.n	8005234 <cos+0x50>
 8005220:	2802      	cmp	r0, #2
 8005222:	d011      	beq.n	8005248 <cos+0x64>
 8005224:	b9b8      	cbnz	r0, 8005256 <cos+0x72>
 8005226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800522a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800522e:	f000 f943 	bl	80054b8 <__kernel_cos>
 8005232:	e7ec      	b.n	800520e <cos+0x2a>
 8005234:	9000      	str	r0, [sp, #0]
 8005236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800523e:	f000 f9fb 	bl	8005638 <__kernel_sin>
 8005242:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8005246:	e7e2      	b.n	800520e <cos+0x2a>
 8005248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800524c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005250:	f000 f932 	bl	80054b8 <__kernel_cos>
 8005254:	e7f5      	b.n	8005242 <cos+0x5e>
 8005256:	2301      	movs	r3, #1
 8005258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005262:	f000 f9e9 	bl	8005638 <__kernel_sin>
 8005266:	e7d2      	b.n	800520e <cos+0x2a>
 8005268:	3fe921fb 	.word	0x3fe921fb
 800526c:	7fefffff 	.word	0x7fefffff

08005270 <sin>:
 8005270:	b530      	push	{r4, r5, lr}
 8005272:	4d20      	ldr	r5, [pc, #128]	@ (80052f4 <sin+0x84>)
 8005274:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8005278:	42ac      	cmp	r4, r5
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	b087      	sub	sp, #28
 8005280:	d806      	bhi.n	8005290 <sin+0x20>
 8005282:	2300      	movs	r3, #0
 8005284:	2200      	movs	r2, #0
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	f000 f9d5 	bl	8005638 <__kernel_sin>
 800528e:	e004      	b.n	800529a <sin+0x2a>
 8005290:	4d19      	ldr	r5, [pc, #100]	@ (80052f8 <sin+0x88>)
 8005292:	42ac      	cmp	r4, r5
 8005294:	d903      	bls.n	800529e <sin+0x2e>
 8005296:	f7fa ff5f 	bl	8000158 <__aeabi_dsub>
 800529a:	b007      	add	sp, #28
 800529c:	bd30      	pop	{r4, r5, pc}
 800529e:	aa02      	add	r2, sp, #8
 80052a0:	f000 ffaa 	bl	80061f8 <__ieee754_rem_pio2>
 80052a4:	f000 0003 	and.w	r0, r0, #3
 80052a8:	2801      	cmp	r0, #1
 80052aa:	d009      	beq.n	80052c0 <sin+0x50>
 80052ac:	2802      	cmp	r0, #2
 80052ae:	d00e      	beq.n	80052ce <sin+0x5e>
 80052b0:	b9c0      	cbnz	r0, 80052e4 <sin+0x74>
 80052b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b6:	2301      	movs	r3, #1
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052be:	e7e4      	b.n	800528a <sin+0x1a>
 80052c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c8:	f000 f8f6 	bl	80054b8 <__kernel_cos>
 80052cc:	e7e5      	b.n	800529a <sin+0x2a>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052da:	f000 f9ad 	bl	8005638 <__kernel_sin>
 80052de:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80052e2:	e7da      	b.n	800529a <sin+0x2a>
 80052e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ec:	f000 f8e4 	bl	80054b8 <__kernel_cos>
 80052f0:	e7f5      	b.n	80052de <sin+0x6e>
 80052f2:	bf00      	nop
 80052f4:	3fe921fb 	.word	0x3fe921fb
 80052f8:	7fefffff 	.word	0x7fefffff

080052fc <finite>:
 80052fc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8005300:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005304:	0fc0      	lsrs	r0, r0, #31
 8005306:	4770      	bx	lr

08005308 <__ieee754_sqrt>:
 8005308:	4a67      	ldr	r2, [pc, #412]	@ (80054a8 <__ieee754_sqrt+0x1a0>)
 800530a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530e:	438a      	bics	r2, r1
 8005310:	4606      	mov	r6, r0
 8005312:	460f      	mov	r7, r1
 8005314:	460b      	mov	r3, r1
 8005316:	4604      	mov	r4, r0
 8005318:	d10e      	bne.n	8005338 <__ieee754_sqrt+0x30>
 800531a:	4602      	mov	r2, r0
 800531c:	f7fb f8d4 	bl	80004c8 <__aeabi_dmul>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4630      	mov	r0, r6
 8005326:	4639      	mov	r1, r7
 8005328:	f7fa ff18 	bl	800015c <__adddf3>
 800532c:	4606      	mov	r6, r0
 800532e:	460f      	mov	r7, r1
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005338:	2900      	cmp	r1, #0
 800533a:	dc0c      	bgt.n	8005356 <__ieee754_sqrt+0x4e>
 800533c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005340:	4302      	orrs	r2, r0
 8005342:	d0f5      	beq.n	8005330 <__ieee754_sqrt+0x28>
 8005344:	b189      	cbz	r1, 800536a <__ieee754_sqrt+0x62>
 8005346:	4602      	mov	r2, r0
 8005348:	f7fa ff06 	bl	8000158 <__aeabi_dsub>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	f7fb f9e4 	bl	800071c <__aeabi_ddiv>
 8005354:	e7ea      	b.n	800532c <__ieee754_sqrt+0x24>
 8005356:	150a      	asrs	r2, r1, #20
 8005358:	d115      	bne.n	8005386 <__ieee754_sqrt+0x7e>
 800535a:	2100      	movs	r1, #0
 800535c:	e009      	b.n	8005372 <__ieee754_sqrt+0x6a>
 800535e:	0ae3      	lsrs	r3, r4, #11
 8005360:	3a15      	subs	r2, #21
 8005362:	0564      	lsls	r4, r4, #21
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0fa      	beq.n	800535e <__ieee754_sqrt+0x56>
 8005368:	e7f7      	b.n	800535a <__ieee754_sqrt+0x52>
 800536a:	460a      	mov	r2, r1
 800536c:	e7fa      	b.n	8005364 <__ieee754_sqrt+0x5c>
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	3101      	adds	r1, #1
 8005372:	02d8      	lsls	r0, r3, #11
 8005374:	d5fb      	bpl.n	800536e <__ieee754_sqrt+0x66>
 8005376:	1e48      	subs	r0, r1, #1
 8005378:	1a12      	subs	r2, r2, r0
 800537a:	f1c1 0020 	rsb	r0, r1, #32
 800537e:	fa24 f000 	lsr.w	r0, r4, r0
 8005382:	4303      	orrs	r3, r0
 8005384:	408c      	lsls	r4, r1
 8005386:	2600      	movs	r6, #0
 8005388:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800538c:	2116      	movs	r1, #22
 800538e:	07d2      	lsls	r2, r2, #31
 8005390:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005394:	4632      	mov	r2, r6
 8005396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800539e:	bf5c      	itt	pl
 80053a0:	005b      	lslpl	r3, r3, #1
 80053a2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80053a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053aa:	bf58      	it	pl
 80053ac:	0064      	lslpl	r4, r4, #1
 80053ae:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80053b2:	107f      	asrs	r7, r7, #1
 80053b4:	0064      	lsls	r4, r4, #1
 80053b6:	1815      	adds	r5, r2, r0
 80053b8:	429d      	cmp	r5, r3
 80053ba:	bfde      	ittt	le
 80053bc:	182a      	addle	r2, r5, r0
 80053be:	1b5b      	suble	r3, r3, r5
 80053c0:	1836      	addle	r6, r6, r0
 80053c2:	0fe5      	lsrs	r5, r4, #31
 80053c4:	3901      	subs	r1, #1
 80053c6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80053ca:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80053ce:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80053d2:	d1f0      	bne.n	80053b6 <__ieee754_sqrt+0xae>
 80053d4:	460d      	mov	r5, r1
 80053d6:	f04f 0a20 	mov.w	sl, #32
 80053da:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80053de:	429a      	cmp	r2, r3
 80053e0:	eb01 0c00 	add.w	ip, r1, r0
 80053e4:	db02      	blt.n	80053ec <__ieee754_sqrt+0xe4>
 80053e6:	d113      	bne.n	8005410 <__ieee754_sqrt+0x108>
 80053e8:	45a4      	cmp	ip, r4
 80053ea:	d811      	bhi.n	8005410 <__ieee754_sqrt+0x108>
 80053ec:	f1bc 0f00 	cmp.w	ip, #0
 80053f0:	eb0c 0100 	add.w	r1, ip, r0
 80053f4:	da42      	bge.n	800547c <__ieee754_sqrt+0x174>
 80053f6:	2900      	cmp	r1, #0
 80053f8:	db40      	blt.n	800547c <__ieee754_sqrt+0x174>
 80053fa:	f102 0e01 	add.w	lr, r2, #1
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	4672      	mov	r2, lr
 8005402:	45a4      	cmp	ip, r4
 8005404:	bf88      	it	hi
 8005406:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800540a:	eba4 040c 	sub.w	r4, r4, ip
 800540e:	4405      	add	r5, r0
 8005410:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005414:	f1ba 0a01 	subs.w	sl, sl, #1
 8005418:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800541c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005420:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005424:	d1db      	bne.n	80053de <__ieee754_sqrt+0xd6>
 8005426:	431c      	orrs	r4, r3
 8005428:	d01a      	beq.n	8005460 <__ieee754_sqrt+0x158>
 800542a:	4c20      	ldr	r4, [pc, #128]	@ (80054ac <__ieee754_sqrt+0x1a4>)
 800542c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80054b0 <__ieee754_sqrt+0x1a8>
 8005430:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005434:	e9db 2300 	ldrd	r2, r3, [fp]
 8005438:	f7fa fe8e 	bl	8000158 <__aeabi_dsub>
 800543c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4640      	mov	r0, r8
 8005446:	4649      	mov	r1, r9
 8005448:	f7fb faba 	bl	80009c0 <__aeabi_dcmple>
 800544c:	b140      	cbz	r0, 8005460 <__ieee754_sqrt+0x158>
 800544e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005452:	e9db 2300 	ldrd	r2, r3, [fp]
 8005456:	f1b5 3fff 	cmp.w	r5, #4294967295
 800545a:	d111      	bne.n	8005480 <__ieee754_sqrt+0x178>
 800545c:	4655      	mov	r5, sl
 800545e:	3601      	adds	r6, #1
 8005460:	1072      	asrs	r2, r6, #1
 8005462:	086b      	lsrs	r3, r5, #1
 8005464:	07f1      	lsls	r1, r6, #31
 8005466:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800546a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800546e:	bf48      	it	mi
 8005470:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005474:	4618      	mov	r0, r3
 8005476:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800547a:	e757      	b.n	800532c <__ieee754_sqrt+0x24>
 800547c:	4696      	mov	lr, r2
 800547e:	e7be      	b.n	80053fe <__ieee754_sqrt+0xf6>
 8005480:	f7fa fe6c 	bl	800015c <__adddf3>
 8005484:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fa8c 	bl	80009ac <__aeabi_dcmplt>
 8005494:	b120      	cbz	r0, 80054a0 <__ieee754_sqrt+0x198>
 8005496:	1ca8      	adds	r0, r5, #2
 8005498:	bf08      	it	eq
 800549a:	3601      	addeq	r6, #1
 800549c:	3502      	adds	r5, #2
 800549e:	e7df      	b.n	8005460 <__ieee754_sqrt+0x158>
 80054a0:	1c6b      	adds	r3, r5, #1
 80054a2:	f023 0501 	bic.w	r5, r3, #1
 80054a6:	e7db      	b.n	8005460 <__ieee754_sqrt+0x158>
 80054a8:	7ff00000 	.word	0x7ff00000
 80054ac:	200000e0 	.word	0x200000e0
 80054b0:	200000d8 	.word	0x200000d8
 80054b4:	00000000 	.word	0x00000000

080054b8 <__kernel_cos>:
 80054b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80054c0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80054c4:	4680      	mov	r8, r0
 80054c6:	4689      	mov	r9, r1
 80054c8:	e9cd 2300 	strd	r2, r3, [sp]
 80054cc:	d204      	bcs.n	80054d8 <__kernel_cos+0x20>
 80054ce:	f7fb faab 	bl	8000a28 <__aeabi_d2iz>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f000 8086 	beq.w	80055e4 <__kernel_cos+0x12c>
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fa fff2 	bl	80004c8 <__aeabi_dmul>
 80054e4:	2200      	movs	r2, #0
 80054e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005620 <__kernel_cos+0x168>)
 80054e8:	4604      	mov	r4, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	f7fa ffec 	bl	80004c8 <__aeabi_dmul>
 80054f0:	a33f      	add	r3, pc, #252	@ (adr r3, 80055f0 <__kernel_cos+0x138>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	4682      	mov	sl, r0
 80054f8:	468b      	mov	fp, r1
 80054fa:	4620      	mov	r0, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	f7fa ffe3 	bl	80004c8 <__aeabi_dmul>
 8005502:	a33d      	add	r3, pc, #244	@ (adr r3, 80055f8 <__kernel_cos+0x140>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fa fe28 	bl	800015c <__adddf3>
 800550c:	4622      	mov	r2, r4
 800550e:	462b      	mov	r3, r5
 8005510:	f7fa ffda 	bl	80004c8 <__aeabi_dmul>
 8005514:	a33a      	add	r3, pc, #232	@ (adr r3, 8005600 <__kernel_cos+0x148>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa fe1d 	bl	8000158 <__aeabi_dsub>
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	f7fa ffd1 	bl	80004c8 <__aeabi_dmul>
 8005526:	a338      	add	r3, pc, #224	@ (adr r3, 8005608 <__kernel_cos+0x150>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa fe16 	bl	800015c <__adddf3>
 8005530:	4622      	mov	r2, r4
 8005532:	462b      	mov	r3, r5
 8005534:	f7fa ffc8 	bl	80004c8 <__aeabi_dmul>
 8005538:	a335      	add	r3, pc, #212	@ (adr r3, 8005610 <__kernel_cos+0x158>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fa fe0b 	bl	8000158 <__aeabi_dsub>
 8005542:	4622      	mov	r2, r4
 8005544:	462b      	mov	r3, r5
 8005546:	f7fa ffbf 	bl	80004c8 <__aeabi_dmul>
 800554a:	a333      	add	r3, pc, #204	@ (adr r3, 8005618 <__kernel_cos+0x160>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f7fa fe04 	bl	800015c <__adddf3>
 8005554:	4622      	mov	r2, r4
 8005556:	462b      	mov	r3, r5
 8005558:	f7fa ffb6 	bl	80004c8 <__aeabi_dmul>
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	f7fa ffb2 	bl	80004c8 <__aeabi_dmul>
 8005564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005568:	4604      	mov	r4, r0
 800556a:	460d      	mov	r5, r1
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fa ffaa 	bl	80004c8 <__aeabi_dmul>
 8005574:	460b      	mov	r3, r1
 8005576:	4602      	mov	r2, r0
 8005578:	4629      	mov	r1, r5
 800557a:	4620      	mov	r0, r4
 800557c:	f7fa fdec 	bl	8000158 <__aeabi_dsub>
 8005580:	4b28      	ldr	r3, [pc, #160]	@ (8005624 <__kernel_cos+0x16c>)
 8005582:	4680      	mov	r8, r0
 8005584:	429e      	cmp	r6, r3
 8005586:	4689      	mov	r9, r1
 8005588:	d80e      	bhi.n	80055a8 <__kernel_cos+0xf0>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4650      	mov	r0, sl
 8005590:	4659      	mov	r1, fp
 8005592:	f7fa fde1 	bl	8000158 <__aeabi_dsub>
 8005596:	4602      	mov	r2, r0
 8005598:	2000      	movs	r0, #0
 800559a:	460b      	mov	r3, r1
 800559c:	4922      	ldr	r1, [pc, #136]	@ (8005628 <__kernel_cos+0x170>)
 800559e:	f7fa fddb 	bl	8000158 <__aeabi_dsub>
 80055a2:	b003      	add	sp, #12
 80055a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a8:	2400      	movs	r4, #0
 80055aa:	4b20      	ldr	r3, [pc, #128]	@ (800562c <__kernel_cos+0x174>)
 80055ac:	4622      	mov	r2, r4
 80055ae:	429e      	cmp	r6, r3
 80055b0:	bf8c      	ite	hi
 80055b2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8005630 <__kernel_cos+0x178>)
 80055b4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80055b8:	462b      	mov	r3, r5
 80055ba:	2000      	movs	r0, #0
 80055bc:	491a      	ldr	r1, [pc, #104]	@ (8005628 <__kernel_cos+0x170>)
 80055be:	f7fa fdcb 	bl	8000158 <__aeabi_dsub>
 80055c2:	4622      	mov	r2, r4
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	462b      	mov	r3, r5
 80055ca:	4650      	mov	r0, sl
 80055cc:	4659      	mov	r1, fp
 80055ce:	f7fa fdc3 	bl	8000158 <__aeabi_dsub>
 80055d2:	4642      	mov	r2, r8
 80055d4:	464b      	mov	r3, r9
 80055d6:	f7fa fdbf 	bl	8000158 <__aeabi_dsub>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	e7dc      	b.n	800559e <__kernel_cos+0xe6>
 80055e4:	2000      	movs	r0, #0
 80055e6:	4910      	ldr	r1, [pc, #64]	@ (8005628 <__kernel_cos+0x170>)
 80055e8:	e7db      	b.n	80055a2 <__kernel_cos+0xea>
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w
 80055f0:	be8838d4 	.word	0xbe8838d4
 80055f4:	bda8fae9 	.word	0xbda8fae9
 80055f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80055fc:	3e21ee9e 	.word	0x3e21ee9e
 8005600:	809c52ad 	.word	0x809c52ad
 8005604:	3e927e4f 	.word	0x3e927e4f
 8005608:	19cb1590 	.word	0x19cb1590
 800560c:	3efa01a0 	.word	0x3efa01a0
 8005610:	16c15177 	.word	0x16c15177
 8005614:	3f56c16c 	.word	0x3f56c16c
 8005618:	5555554c 	.word	0x5555554c
 800561c:	3fa55555 	.word	0x3fa55555
 8005620:	3fe00000 	.word	0x3fe00000
 8005624:	3fd33332 	.word	0x3fd33332
 8005628:	3ff00000 	.word	0x3ff00000
 800562c:	3fe90000 	.word	0x3fe90000
 8005630:	3fd20000 	.word	0x3fd20000
 8005634:	00000000 	.word	0x00000000

08005638 <__kernel_sin>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	461f      	mov	r7, r3
 800563e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005642:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005646:	4604      	mov	r4, r0
 8005648:	460d      	mov	r5, r1
 800564a:	4616      	mov	r6, r2
 800564c:	b085      	sub	sp, #20
 800564e:	d203      	bcs.n	8005658 <__kernel_sin+0x20>
 8005650:	f7fb f9ea 	bl	8000a28 <__aeabi_d2iz>
 8005654:	2800      	cmp	r0, #0
 8005656:	d051      	beq.n	80056fc <__kernel_sin+0xc4>
 8005658:	4622      	mov	r2, r4
 800565a:	462b      	mov	r3, r5
 800565c:	4620      	mov	r0, r4
 800565e:	4629      	mov	r1, r5
 8005660:	f7fa ff32 	bl	80004c8 <__aeabi_dmul>
 8005664:	4682      	mov	sl, r0
 8005666:	468b      	mov	fp, r1
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4620      	mov	r0, r4
 800566e:	4629      	mov	r1, r5
 8005670:	f7fa ff2a 	bl	80004c8 <__aeabi_dmul>
 8005674:	a33e      	add	r3, pc, #248	@ (adr r3, 8005770 <__kernel_sin+0x138>)
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	4680      	mov	r8, r0
 800567c:	4689      	mov	r9, r1
 800567e:	4650      	mov	r0, sl
 8005680:	4659      	mov	r1, fp
 8005682:	f7fa ff21 	bl	80004c8 <__aeabi_dmul>
 8005686:	a33c      	add	r3, pc, #240	@ (adr r3, 8005778 <__kernel_sin+0x140>)
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f7fa fd64 	bl	8000158 <__aeabi_dsub>
 8005690:	4652      	mov	r2, sl
 8005692:	465b      	mov	r3, fp
 8005694:	f7fa ff18 	bl	80004c8 <__aeabi_dmul>
 8005698:	a339      	add	r3, pc, #228	@ (adr r3, 8005780 <__kernel_sin+0x148>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f7fa fd5d 	bl	800015c <__adddf3>
 80056a2:	4652      	mov	r2, sl
 80056a4:	465b      	mov	r3, fp
 80056a6:	f7fa ff0f 	bl	80004c8 <__aeabi_dmul>
 80056aa:	a337      	add	r3, pc, #220	@ (adr r3, 8005788 <__kernel_sin+0x150>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa fd52 	bl	8000158 <__aeabi_dsub>
 80056b4:	4652      	mov	r2, sl
 80056b6:	465b      	mov	r3, fp
 80056b8:	f7fa ff06 	bl	80004c8 <__aeabi_dmul>
 80056bc:	a334      	add	r3, pc, #208	@ (adr r3, 8005790 <__kernel_sin+0x158>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fa fd4b 	bl	800015c <__adddf3>
 80056c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056c8:	e9cd 0100 	strd	r0, r1, [sp]
 80056cc:	b9db      	cbnz	r3, 8005706 <__kernel_sin+0xce>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4650      	mov	r0, sl
 80056d4:	4659      	mov	r1, fp
 80056d6:	f7fa fef7 	bl	80004c8 <__aeabi_dmul>
 80056da:	a32f      	add	r3, pc, #188	@ (adr r3, 8005798 <__kernel_sin+0x160>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f7fa fd3a 	bl	8000158 <__aeabi_dsub>
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	f7fa feee 	bl	80004c8 <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4620      	mov	r0, r4
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fd32 	bl	800015c <__adddf3>
 80056f8:	4604      	mov	r4, r0
 80056fa:	460d      	mov	r5, r1
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	b005      	add	sp, #20
 8005702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005706:	2200      	movs	r2, #0
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <__kernel_sin+0x168>)
 800570e:	f7fa fedb 	bl	80004c8 <__aeabi_dmul>
 8005712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa fed3 	bl	80004c8 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800572a:	f7fa fd15 	bl	8000158 <__aeabi_dsub>
 800572e:	4652      	mov	r2, sl
 8005730:	465b      	mov	r3, fp
 8005732:	f7fa fec9 	bl	80004c8 <__aeabi_dmul>
 8005736:	4632      	mov	r2, r6
 8005738:	463b      	mov	r3, r7
 800573a:	f7fa fd0d 	bl	8000158 <__aeabi_dsub>
 800573e:	a316      	add	r3, pc, #88	@ (adr r3, 8005798 <__kernel_sin+0x160>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	f7fa febc 	bl	80004c8 <__aeabi_dmul>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4630      	mov	r0, r6
 8005756:	4639      	mov	r1, r7
 8005758:	f7fa fd00 	bl	800015c <__adddf3>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4620      	mov	r0, r4
 8005762:	4629      	mov	r1, r5
 8005764:	f7fa fcf8 	bl	8000158 <__aeabi_dsub>
 8005768:	e7c6      	b.n	80056f8 <__kernel_sin+0xc0>
 800576a:	bf00      	nop
 800576c:	f3af 8000 	nop.w
 8005770:	5acfd57c 	.word	0x5acfd57c
 8005774:	3de5d93a 	.word	0x3de5d93a
 8005778:	8a2b9ceb 	.word	0x8a2b9ceb
 800577c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005780:	57b1fe7d 	.word	0x57b1fe7d
 8005784:	3ec71de3 	.word	0x3ec71de3
 8005788:	19c161d5 	.word	0x19c161d5
 800578c:	3f2a01a0 	.word	0x3f2a01a0
 8005790:	1110f8a6 	.word	0x1110f8a6
 8005794:	3f811111 	.word	0x3f811111
 8005798:	55555549 	.word	0x55555549
 800579c:	3fc55555 	.word	0x3fc55555
 80057a0:	3fe00000 	.word	0x3fe00000
 80057a4:	00000000 	.word	0x00000000

080057a8 <__ieee754_pow>:
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	b091      	sub	sp, #68	@ 0x44
 80057ae:	e9cd 2300 	strd	r2, r3, [sp]
 80057b2:	468b      	mov	fp, r1
 80057b4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80057b8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80057bc:	4682      	mov	sl, r0
 80057be:	ea57 0001 	orrs.w	r0, r7, r1
 80057c2:	d112      	bne.n	80057ea <__ieee754_pow+0x42>
 80057c4:	4653      	mov	r3, sl
 80057c6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80057ca:	18db      	adds	r3, r3, r3
 80057cc:	4152      	adcs	r2, r2
 80057ce:	4298      	cmp	r0, r3
 80057d0:	4b91      	ldr	r3, [pc, #580]	@ (8005a18 <__ieee754_pow+0x270>)
 80057d2:	4193      	sbcs	r3, r2
 80057d4:	f080 84ce 	bcs.w	8006174 <__ieee754_pow+0x9cc>
 80057d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057dc:	4650      	mov	r0, sl
 80057de:	4659      	mov	r1, fp
 80057e0:	f7fa fcbc 	bl	800015c <__adddf3>
 80057e4:	b011      	add	sp, #68	@ 0x44
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	4b8c      	ldr	r3, [pc, #560]	@ (8005a1c <__ieee754_pow+0x274>)
 80057ec:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80057f0:	429e      	cmp	r6, r3
 80057f2:	465d      	mov	r5, fp
 80057f4:	46d1      	mov	r9, sl
 80057f6:	d807      	bhi.n	8005808 <__ieee754_pow+0x60>
 80057f8:	d102      	bne.n	8005800 <__ieee754_pow+0x58>
 80057fa:	f1ba 0f00 	cmp.w	sl, #0
 80057fe:	d1eb      	bne.n	80057d8 <__ieee754_pow+0x30>
 8005800:	429f      	cmp	r7, r3
 8005802:	d801      	bhi.n	8005808 <__ieee754_pow+0x60>
 8005804:	d10f      	bne.n	8005826 <__ieee754_pow+0x7e>
 8005806:	b171      	cbz	r1, 8005826 <__ieee754_pow+0x7e>
 8005808:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800580c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005810:	ea55 0509 	orrs.w	r5, r5, r9
 8005814:	d1e0      	bne.n	80057d8 <__ieee754_pow+0x30>
 8005816:	e9dd 3200 	ldrd	r3, r2, [sp]
 800581a:	18db      	adds	r3, r3, r3
 800581c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005820:	4152      	adcs	r2, r2
 8005822:	429d      	cmp	r5, r3
 8005824:	e7d4      	b.n	80057d0 <__ieee754_pow+0x28>
 8005826:	2d00      	cmp	r5, #0
 8005828:	4633      	mov	r3, r6
 800582a:	da39      	bge.n	80058a0 <__ieee754_pow+0xf8>
 800582c:	4a7c      	ldr	r2, [pc, #496]	@ (8005a20 <__ieee754_pow+0x278>)
 800582e:	4297      	cmp	r7, r2
 8005830:	d84e      	bhi.n	80058d0 <__ieee754_pow+0x128>
 8005832:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005836:	4297      	cmp	r7, r2
 8005838:	f240 84ab 	bls.w	8006192 <__ieee754_pow+0x9ea>
 800583c:	153a      	asrs	r2, r7, #20
 800583e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005842:	2a14      	cmp	r2, #20
 8005844:	dd0f      	ble.n	8005866 <__ieee754_pow+0xbe>
 8005846:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800584a:	fa21 f402 	lsr.w	r4, r1, r2
 800584e:	fa04 f202 	lsl.w	r2, r4, r2
 8005852:	428a      	cmp	r2, r1
 8005854:	f040 849d 	bne.w	8006192 <__ieee754_pow+0x9ea>
 8005858:	f004 0401 	and.w	r4, r4, #1
 800585c:	f1c4 0402 	rsb	r4, r4, #2
 8005860:	2900      	cmp	r1, #0
 8005862:	d15a      	bne.n	800591a <__ieee754_pow+0x172>
 8005864:	e00e      	b.n	8005884 <__ieee754_pow+0xdc>
 8005866:	2900      	cmp	r1, #0
 8005868:	d156      	bne.n	8005918 <__ieee754_pow+0x170>
 800586a:	f1c2 0214 	rsb	r2, r2, #20
 800586e:	fa47 f402 	asr.w	r4, r7, r2
 8005872:	fa04 f202 	lsl.w	r2, r4, r2
 8005876:	42ba      	cmp	r2, r7
 8005878:	f040 8488 	bne.w	800618c <__ieee754_pow+0x9e4>
 800587c:	f004 0401 	and.w	r4, r4, #1
 8005880:	f1c4 0402 	rsb	r4, r4, #2
 8005884:	4a67      	ldr	r2, [pc, #412]	@ (8005a24 <__ieee754_pow+0x27c>)
 8005886:	4297      	cmp	r7, r2
 8005888:	d130      	bne.n	80058ec <__ieee754_pow+0x144>
 800588a:	f1b8 0f00 	cmp.w	r8, #0
 800588e:	f280 8479 	bge.w	8006184 <__ieee754_pow+0x9dc>
 8005892:	4652      	mov	r2, sl
 8005894:	465b      	mov	r3, fp
 8005896:	2000      	movs	r0, #0
 8005898:	4962      	ldr	r1, [pc, #392]	@ (8005a24 <__ieee754_pow+0x27c>)
 800589a:	f7fa ff3f 	bl	800071c <__aeabi_ddiv>
 800589e:	e7a1      	b.n	80057e4 <__ieee754_pow+0x3c>
 80058a0:	2400      	movs	r4, #0
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d139      	bne.n	800591a <__ieee754_pow+0x172>
 80058a6:	4a5d      	ldr	r2, [pc, #372]	@ (8005a1c <__ieee754_pow+0x274>)
 80058a8:	4297      	cmp	r7, r2
 80058aa:	d1eb      	bne.n	8005884 <__ieee754_pow+0xdc>
 80058ac:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80058b0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80058b4:	ea53 0309 	orrs.w	r3, r3, r9
 80058b8:	f000 845c 	beq.w	8006174 <__ieee754_pow+0x9cc>
 80058bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005a28 <__ieee754_pow+0x280>)
 80058be:	429e      	cmp	r6, r3
 80058c0:	d908      	bls.n	80058d4 <__ieee754_pow+0x12c>
 80058c2:	f1b8 0f00 	cmp.w	r8, #0
 80058c6:	f2c0 8459 	blt.w	800617c <__ieee754_pow+0x9d4>
 80058ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ce:	e789      	b.n	80057e4 <__ieee754_pow+0x3c>
 80058d0:	2402      	movs	r4, #2
 80058d2:	e7e6      	b.n	80058a2 <__ieee754_pow+0xfa>
 80058d4:	f1b8 0f00 	cmp.w	r8, #0
 80058d8:	f04f 0000 	mov.w	r0, #0
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	da80      	bge.n	80057e4 <__ieee754_pow+0x3c>
 80058e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80058e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80058ea:	e77b      	b.n	80057e4 <__ieee754_pow+0x3c>
 80058ec:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80058f0:	d106      	bne.n	8005900 <__ieee754_pow+0x158>
 80058f2:	4652      	mov	r2, sl
 80058f4:	465b      	mov	r3, fp
 80058f6:	4650      	mov	r0, sl
 80058f8:	4659      	mov	r1, fp
 80058fa:	f7fa fde5 	bl	80004c8 <__aeabi_dmul>
 80058fe:	e771      	b.n	80057e4 <__ieee754_pow+0x3c>
 8005900:	4a4a      	ldr	r2, [pc, #296]	@ (8005a2c <__ieee754_pow+0x284>)
 8005902:	4590      	cmp	r8, r2
 8005904:	d109      	bne.n	800591a <__ieee754_pow+0x172>
 8005906:	2d00      	cmp	r5, #0
 8005908:	db07      	blt.n	800591a <__ieee754_pow+0x172>
 800590a:	4650      	mov	r0, sl
 800590c:	4659      	mov	r1, fp
 800590e:	b011      	add	sp, #68	@ 0x44
 8005910:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	f7ff bcf8 	b.w	8005308 <__ieee754_sqrt>
 8005918:	2400      	movs	r4, #0
 800591a:	4650      	mov	r0, sl
 800591c:	4659      	mov	r1, fp
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	f000 fe60 	bl	80065e4 <fabs>
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	f1b9 0f00 	cmp.w	r9, #0
 800592a:	d127      	bne.n	800597c <__ieee754_pow+0x1d4>
 800592c:	4a3d      	ldr	r2, [pc, #244]	@ (8005a24 <__ieee754_pow+0x27c>)
 800592e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8005932:	4594      	cmp	ip, r2
 8005934:	d000      	beq.n	8005938 <__ieee754_pow+0x190>
 8005936:	bb0e      	cbnz	r6, 800597c <__ieee754_pow+0x1d4>
 8005938:	f1b8 0f00 	cmp.w	r8, #0
 800593c:	da05      	bge.n	800594a <__ieee754_pow+0x1a2>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	2000      	movs	r0, #0
 8005944:	4937      	ldr	r1, [pc, #220]	@ (8005a24 <__ieee754_pow+0x27c>)
 8005946:	f7fa fee9 	bl	800071c <__aeabi_ddiv>
 800594a:	2d00      	cmp	r5, #0
 800594c:	f6bf af4a 	bge.w	80057e4 <__ieee754_pow+0x3c>
 8005950:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005954:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005958:	4326      	orrs	r6, r4
 800595a:	d108      	bne.n	800596e <__ieee754_pow+0x1c6>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	f7fa fbf8 	bl	8000158 <__aeabi_dsub>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	e795      	b.n	800589a <__ieee754_pow+0xf2>
 800596e:	2c01      	cmp	r4, #1
 8005970:	f47f af38 	bne.w	80057e4 <__ieee754_pow+0x3c>
 8005974:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005978:	4619      	mov	r1, r3
 800597a:	e733      	b.n	80057e4 <__ieee754_pow+0x3c>
 800597c:	0fea      	lsrs	r2, r5, #31
 800597e:	3a01      	subs	r2, #1
 8005980:	ea52 0c04 	orrs.w	ip, r2, r4
 8005984:	d102      	bne.n	800598c <__ieee754_pow+0x1e4>
 8005986:	4652      	mov	r2, sl
 8005988:	465b      	mov	r3, fp
 800598a:	e7e9      	b.n	8005960 <__ieee754_pow+0x1b8>
 800598c:	f04f 0900 	mov.w	r9, #0
 8005990:	3c01      	subs	r4, #1
 8005992:	4314      	orrs	r4, r2
 8005994:	bf14      	ite	ne
 8005996:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005a24 <__ieee754_pow+0x27c>
 800599a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8005a30 <__ieee754_pow+0x288>
 800599e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80059a2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80059a6:	f240 8107 	bls.w	8005bb8 <__ieee754_pow+0x410>
 80059aa:	4b22      	ldr	r3, [pc, #136]	@ (8005a34 <__ieee754_pow+0x28c>)
 80059ac:	429f      	cmp	r7, r3
 80059ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005a28 <__ieee754_pow+0x280>)
 80059b0:	d913      	bls.n	80059da <__ieee754_pow+0x232>
 80059b2:	429e      	cmp	r6, r3
 80059b4:	d808      	bhi.n	80059c8 <__ieee754_pow+0x220>
 80059b6:	f1b8 0f00 	cmp.w	r8, #0
 80059ba:	da08      	bge.n	80059ce <__ieee754_pow+0x226>
 80059bc:	2000      	movs	r0, #0
 80059be:	b011      	add	sp, #68	@ 0x44
 80059c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	f000 beac 	b.w	8006720 <__math_oflow>
 80059c8:	f1b8 0f00 	cmp.w	r8, #0
 80059cc:	dcf6      	bgt.n	80059bc <__ieee754_pow+0x214>
 80059ce:	2000      	movs	r0, #0
 80059d0:	b011      	add	sp, #68	@ 0x44
 80059d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f000 be9e 	b.w	8006716 <__math_uflow>
 80059da:	429e      	cmp	r6, r3
 80059dc:	d20c      	bcs.n	80059f8 <__ieee754_pow+0x250>
 80059de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	2300      	movs	r3, #0
 80059e6:	f7fa ffe1 	bl	80009ac <__aeabi_dcmplt>
 80059ea:	3800      	subs	r0, #0
 80059ec:	bf18      	it	ne
 80059ee:	2001      	movne	r0, #1
 80059f0:	f1b8 0f00 	cmp.w	r8, #0
 80059f4:	daec      	bge.n	80059d0 <__ieee754_pow+0x228>
 80059f6:	e7e2      	b.n	80059be <__ieee754_pow+0x216>
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <__ieee754_pow+0x27c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	429e      	cmp	r6, r3
 80059fe:	d91b      	bls.n	8005a38 <__ieee754_pow+0x290>
 8005a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a04:	2300      	movs	r3, #0
 8005a06:	f7fa ffd1 	bl	80009ac <__aeabi_dcmplt>
 8005a0a:	3800      	subs	r0, #0
 8005a0c:	bf18      	it	ne
 8005a0e:	2001      	movne	r0, #1
 8005a10:	f1b8 0f00 	cmp.w	r8, #0
 8005a14:	dcd3      	bgt.n	80059be <__ieee754_pow+0x216>
 8005a16:	e7db      	b.n	80059d0 <__ieee754_pow+0x228>
 8005a18:	fff00000 	.word	0xfff00000
 8005a1c:	7ff00000 	.word	0x7ff00000
 8005a20:	433fffff 	.word	0x433fffff
 8005a24:	3ff00000 	.word	0x3ff00000
 8005a28:	3fefffff 	.word	0x3fefffff
 8005a2c:	3fe00000 	.word	0x3fe00000
 8005a30:	bff00000 	.word	0xbff00000
 8005a34:	43f00000 	.word	0x43f00000
 8005a38:	4b5b      	ldr	r3, [pc, #364]	@ (8005ba8 <__ieee754_pow+0x400>)
 8005a3a:	f7fa fb8d 	bl	8000158 <__aeabi_dsub>
 8005a3e:	a352      	add	r3, pc, #328	@ (adr r3, 8005b88 <__ieee754_pow+0x3e0>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	4604      	mov	r4, r0
 8005a46:	460d      	mov	r5, r1
 8005a48:	f7fa fd3e 	bl	80004c8 <__aeabi_dmul>
 8005a4c:	a350      	add	r3, pc, #320	@ (adr r3, 8005b90 <__ieee754_pow+0x3e8>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	4606      	mov	r6, r0
 8005a54:	460f      	mov	r7, r1
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7fa fd35 	bl	80004c8 <__aeabi_dmul>
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	4620      	mov	r0, r4
 8005a66:	4629      	mov	r1, r5
 8005a68:	4b50      	ldr	r3, [pc, #320]	@ (8005bac <__ieee754_pow+0x404>)
 8005a6a:	f7fa fd2d 	bl	80004c8 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	a149      	add	r1, pc, #292	@ (adr r1, 8005b98 <__ieee754_pow+0x3f0>)
 8005a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a78:	f7fa fb6e 	bl	8000158 <__aeabi_dsub>
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	462b      	mov	r3, r5
 8005a80:	f7fa fd22 	bl	80004c8 <__aeabi_dmul>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	2000      	movs	r0, #0
 8005a8a:	4949      	ldr	r1, [pc, #292]	@ (8005bb0 <__ieee754_pow+0x408>)
 8005a8c:	f7fa fb64 	bl	8000158 <__aeabi_dsub>
 8005a90:	4622      	mov	r2, r4
 8005a92:	4680      	mov	r8, r0
 8005a94:	4689      	mov	r9, r1
 8005a96:	462b      	mov	r3, r5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f7fa fd14 	bl	80004c8 <__aeabi_dmul>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	f7fa fd0e 	bl	80004c8 <__aeabi_dmul>
 8005aac:	a33c      	add	r3, pc, #240	@ (adr r3, 8005ba0 <__ieee754_pow+0x3f8>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f7fa fd09 	bl	80004c8 <__aeabi_dmul>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4650      	mov	r0, sl
 8005abc:	4659      	mov	r1, fp
 8005abe:	f7fa fb4b 	bl	8000158 <__aeabi_dsub>
 8005ac2:	2400      	movs	r4, #0
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4680      	mov	r8, r0
 8005aca:	4689      	mov	r9, r1
 8005acc:	4630      	mov	r0, r6
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7fa fb44 	bl	800015c <__adddf3>
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	4620      	mov	r0, r4
 8005ada:	460d      	mov	r5, r1
 8005adc:	f7fa fb3c 	bl	8000158 <__aeabi_dsub>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f7fa fb36 	bl	8000158 <__aeabi_dsub>
 8005aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005af4:	2300      	movs	r3, #0
 8005af6:	9304      	str	r3, [sp, #16]
 8005af8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005afc:	4606      	mov	r6, r0
 8005afe:	460f      	mov	r7, r1
 8005b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b04:	4652      	mov	r2, sl
 8005b06:	465b      	mov	r3, fp
 8005b08:	f7fa fb26 	bl	8000158 <__aeabi_dsub>
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	462b      	mov	r3, r5
 8005b10:	f7fa fcda 	bl	80004c8 <__aeabi_dmul>
 8005b14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b18:	4680      	mov	r8, r0
 8005b1a:	4689      	mov	r9, r1
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	4639      	mov	r1, r7
 8005b20:	f7fa fcd2 	bl	80004c8 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4640      	mov	r0, r8
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	f7fa fb16 	bl	800015c <__adddf3>
 8005b30:	4652      	mov	r2, sl
 8005b32:	465b      	mov	r3, fp
 8005b34:	4606      	mov	r6, r0
 8005b36:	460f      	mov	r7, r1
 8005b38:	4620      	mov	r0, r4
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	f7fa fcc4 	bl	80004c8 <__aeabi_dmul>
 8005b40:	460b      	mov	r3, r1
 8005b42:	4602      	mov	r2, r0
 8005b44:	4680      	mov	r8, r0
 8005b46:	4689      	mov	r9, r1
 8005b48:	4630      	mov	r0, r6
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	f7fa fb06 	bl	800015c <__adddf3>
 8005b50:	4b18      	ldr	r3, [pc, #96]	@ (8005bb4 <__ieee754_pow+0x40c>)
 8005b52:	4604      	mov	r4, r0
 8005b54:	4299      	cmp	r1, r3
 8005b56:	460d      	mov	r5, r1
 8005b58:	468a      	mov	sl, r1
 8005b5a:	468b      	mov	fp, r1
 8005b5c:	f340 82e0 	ble.w	8006120 <__ieee754_pow+0x978>
 8005b60:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005b64:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005b68:	4303      	orrs	r3, r0
 8005b6a:	f000 81df 	beq.w	8005f2c <__ieee754_pow+0x784>
 8005b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2300      	movs	r3, #0
 8005b76:	f7fa ff19 	bl	80009ac <__aeabi_dcmplt>
 8005b7a:	3800      	subs	r0, #0
 8005b7c:	bf18      	it	ne
 8005b7e:	2001      	movne	r0, #1
 8005b80:	e71d      	b.n	80059be <__ieee754_pow+0x216>
 8005b82:	bf00      	nop
 8005b84:	f3af 8000 	nop.w
 8005b88:	60000000 	.word	0x60000000
 8005b8c:	3ff71547 	.word	0x3ff71547
 8005b90:	f85ddf44 	.word	0xf85ddf44
 8005b94:	3e54ae0b 	.word	0x3e54ae0b
 8005b98:	55555555 	.word	0x55555555
 8005b9c:	3fd55555 	.word	0x3fd55555
 8005ba0:	652b82fe 	.word	0x652b82fe
 8005ba4:	3ff71547 	.word	0x3ff71547
 8005ba8:	3ff00000 	.word	0x3ff00000
 8005bac:	3fd00000 	.word	0x3fd00000
 8005bb0:	3fe00000 	.word	0x3fe00000
 8005bb4:	408fffff 	.word	0x408fffff
 8005bb8:	4ad3      	ldr	r2, [pc, #844]	@ (8005f08 <__ieee754_pow+0x760>)
 8005bba:	402a      	ands	r2, r5
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	f040 817a 	bne.w	8005eb6 <__ieee754_pow+0x70e>
 8005bc2:	4bd2      	ldr	r3, [pc, #840]	@ (8005f0c <__ieee754_pow+0x764>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f7fa fc7f 	bl	80004c8 <__aeabi_dmul>
 8005bca:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8005bce:	460b      	mov	r3, r1
 8005bd0:	151a      	asrs	r2, r3, #20
 8005bd2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005bd6:	4422      	add	r2, r4
 8005bd8:	920a      	str	r2, [sp, #40]	@ 0x28
 8005bda:	4acd      	ldr	r2, [pc, #820]	@ (8005f10 <__ieee754_pow+0x768>)
 8005bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005bea:	dd08      	ble.n	8005bfe <__ieee754_pow+0x456>
 8005bec:	4ac9      	ldr	r2, [pc, #804]	@ (8005f14 <__ieee754_pow+0x76c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f340 8163 	ble.w	8005eba <__ieee754_pow+0x712>
 8005bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bf6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bfe:	2600      	movs	r6, #0
 8005c00:	00f3      	lsls	r3, r6, #3
 8005c02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c04:	4bc4      	ldr	r3, [pc, #784]	@ (8005f18 <__ieee754_pow+0x770>)
 8005c06:	4629      	mov	r1, r5
 8005c08:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c10:	461a      	mov	r2, r3
 8005c12:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005c16:	4623      	mov	r3, r4
 8005c18:	4682      	mov	sl, r0
 8005c1a:	f7fa fa9d 	bl	8000158 <__aeabi_dsub>
 8005c1e:	4652      	mov	r2, sl
 8005c20:	462b      	mov	r3, r5
 8005c22:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005c26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c2a:	f7fa fa97 	bl	800015c <__adddf3>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	2000      	movs	r0, #0
 8005c34:	49b9      	ldr	r1, [pc, #740]	@ (8005f1c <__ieee754_pow+0x774>)
 8005c36:	f7fa fd71 	bl	800071c <__aeabi_ddiv>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c46:	f7fa fc3f 	bl	80004c8 <__aeabi_dmul>
 8005c4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c4e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005c52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c56:	2300      	movs	r3, #0
 8005c58:	2200      	movs	r2, #0
 8005c5a:	46ab      	mov	fp, r5
 8005c5c:	106d      	asrs	r5, r5, #1
 8005c5e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005c68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c6c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005c70:	4640      	mov	r0, r8
 8005c72:	4649      	mov	r1, r9
 8005c74:	4614      	mov	r4, r2
 8005c76:	461d      	mov	r5, r3
 8005c78:	f7fa fc26 	bl	80004c8 <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c84:	f7fa fa68 	bl	8000158 <__aeabi_dsub>
 8005c88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	460f      	mov	r7, r1
 8005c90:	4620      	mov	r0, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7fa fa60 	bl	8000158 <__aeabi_dsub>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	f7fa fa5a 	bl	8000158 <__aeabi_dsub>
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	f7fa fc0e 	bl	80004c8 <__aeabi_dmul>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	f7fa fa50 	bl	8000158 <__aeabi_dsub>
 8005cb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005cbc:	f7fa fc04 	bl	80004c8 <__aeabi_dmul>
 8005cc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f7fa fbfc 	bl	80004c8 <__aeabi_dmul>
 8005cd0:	a37b      	add	r3, pc, #492	@ (adr r3, 8005ec0 <__ieee754_pow+0x718>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	460d      	mov	r5, r1
 8005cda:	f7fa fbf5 	bl	80004c8 <__aeabi_dmul>
 8005cde:	a37a      	add	r3, pc, #488	@ (adr r3, 8005ec8 <__ieee754_pow+0x720>)
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f7fa fa3a 	bl	800015c <__adddf3>
 8005ce8:	4622      	mov	r2, r4
 8005cea:	462b      	mov	r3, r5
 8005cec:	f7fa fbec 	bl	80004c8 <__aeabi_dmul>
 8005cf0:	a377      	add	r3, pc, #476	@ (adr r3, 8005ed0 <__ieee754_pow+0x728>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f7fa fa31 	bl	800015c <__adddf3>
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	f7fa fbe3 	bl	80004c8 <__aeabi_dmul>
 8005d02:	a375      	add	r3, pc, #468	@ (adr r3, 8005ed8 <__ieee754_pow+0x730>)
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f7fa fa28 	bl	800015c <__adddf3>
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	462b      	mov	r3, r5
 8005d10:	f7fa fbda 	bl	80004c8 <__aeabi_dmul>
 8005d14:	a372      	add	r3, pc, #456	@ (adr r3, 8005ee0 <__ieee754_pow+0x738>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f7fa fa1f 	bl	800015c <__adddf3>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f7fa fbd1 	bl	80004c8 <__aeabi_dmul>
 8005d26:	a370      	add	r3, pc, #448	@ (adr r3, 8005ee8 <__ieee754_pow+0x740>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa fa16 	bl	800015c <__adddf3>
 8005d30:	4622      	mov	r2, r4
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	462b      	mov	r3, r5
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	f7fa fbc4 	bl	80004c8 <__aeabi_dmul>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4630      	mov	r0, r6
 8005d46:	4639      	mov	r1, r7
 8005d48:	f7fa fbbe 	bl	80004c8 <__aeabi_dmul>
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	460d      	mov	r5, r1
 8005d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d54:	4642      	mov	r2, r8
 8005d56:	464b      	mov	r3, r9
 8005d58:	f7fa fa00 	bl	800015c <__adddf3>
 8005d5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d60:	f7fa fbb2 	bl	80004c8 <__aeabi_dmul>
 8005d64:	4622      	mov	r2, r4
 8005d66:	462b      	mov	r3, r5
 8005d68:	f7fa f9f8 	bl	800015c <__adddf3>
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	4682      	mov	sl, r0
 8005d70:	468b      	mov	fp, r1
 8005d72:	464b      	mov	r3, r9
 8005d74:	4640      	mov	r0, r8
 8005d76:	4649      	mov	r1, r9
 8005d78:	f7fa fba6 	bl	80004c8 <__aeabi_dmul>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4b68      	ldr	r3, [pc, #416]	@ (8005f20 <__ieee754_pow+0x778>)
 8005d80:	4606      	mov	r6, r0
 8005d82:	460f      	mov	r7, r1
 8005d84:	f7fa f9ea 	bl	800015c <__adddf3>
 8005d88:	4652      	mov	r2, sl
 8005d8a:	465b      	mov	r3, fp
 8005d8c:	f7fa f9e6 	bl	800015c <__adddf3>
 8005d90:	2400      	movs	r4, #0
 8005d92:	460d      	mov	r5, r1
 8005d94:	4622      	mov	r2, r4
 8005d96:	460b      	mov	r3, r1
 8005d98:	4640      	mov	r0, r8
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	f7fa fb94 	bl	80004c8 <__aeabi_dmul>
 8005da0:	2200      	movs	r2, #0
 8005da2:	4680      	mov	r8, r0
 8005da4:	4689      	mov	r9, r1
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	4b5d      	ldr	r3, [pc, #372]	@ (8005f20 <__ieee754_pow+0x778>)
 8005dac:	f7fa f9d4 	bl	8000158 <__aeabi_dsub>
 8005db0:	4632      	mov	r2, r6
 8005db2:	463b      	mov	r3, r7
 8005db4:	f7fa f9d0 	bl	8000158 <__aeabi_dsub>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	4659      	mov	r1, fp
 8005dc0:	f7fa f9ca 	bl	8000158 <__aeabi_dsub>
 8005dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dc8:	f7fa fb7e 	bl	80004c8 <__aeabi_dmul>
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460f      	mov	r7, r1
 8005dd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	f7fa fb76 	bl	80004c8 <__aeabi_dmul>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4630      	mov	r0, r6
 8005de2:	4639      	mov	r1, r7
 8005de4:	f7fa f9ba 	bl	800015c <__adddf3>
 8005de8:	2400      	movs	r4, #0
 8005dea:	4606      	mov	r6, r0
 8005dec:	460f      	mov	r7, r1
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	f7fa f9b1 	bl	800015c <__adddf3>
 8005dfa:	a33d      	add	r3, pc, #244	@ (adr r3, 8005ef0 <__ieee754_pow+0x748>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	4620      	mov	r0, r4
 8005e02:	460d      	mov	r5, r1
 8005e04:	f7fa fb60 	bl	80004c8 <__aeabi_dmul>
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e10:	4620      	mov	r0, r4
 8005e12:	4629      	mov	r1, r5
 8005e14:	f7fa f9a0 	bl	8000158 <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa f99a 	bl	8000158 <__aeabi_dsub>
 8005e24:	a334      	add	r3, pc, #208	@ (adr r3, 8005ef8 <__ieee754_pow+0x750>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fb4d 	bl	80004c8 <__aeabi_dmul>
 8005e2e:	a334      	add	r3, pc, #208	@ (adr r3, 8005f00 <__ieee754_pow+0x758>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	4606      	mov	r6, r0
 8005e36:	460f      	mov	r7, r1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa fb44 	bl	80004c8 <__aeabi_dmul>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4630      	mov	r0, r6
 8005e46:	4639      	mov	r1, r7
 8005e48:	f7fa f988 	bl	800015c <__adddf3>
 8005e4c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e4e:	4b35      	ldr	r3, [pc, #212]	@ (8005f24 <__ieee754_pow+0x77c>)
 8005e50:	2400      	movs	r4, #0
 8005e52:	4413      	add	r3, r2
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa f980 	bl	800015c <__adddf3>
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e60:	468b      	mov	fp, r1
 8005e62:	f7fa fac7 	bl	80003f4 <__aeabi_i2d>
 8005e66:	4606      	mov	r6, r0
 8005e68:	460f      	mov	r7, r1
 8005e6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005f28 <__ieee754_pow+0x780>)
 8005e6e:	4413      	add	r3, r2
 8005e70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e74:	4652      	mov	r2, sl
 8005e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e7a:	465b      	mov	r3, fp
 8005e7c:	f7fa f96e 	bl	800015c <__adddf3>
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	f7fa f96a 	bl	800015c <__adddf3>
 8005e88:	4632      	mov	r2, r6
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	f7fa f966 	bl	800015c <__adddf3>
 8005e90:	4632      	mov	r2, r6
 8005e92:	463b      	mov	r3, r7
 8005e94:	4620      	mov	r0, r4
 8005e96:	460d      	mov	r5, r1
 8005e98:	f7fa f95e 	bl	8000158 <__aeabi_dsub>
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	f7fa f95a 	bl	8000158 <__aeabi_dsub>
 8005ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ea8:	f7fa f956 	bl	8000158 <__aeabi_dsub>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	e618      	b.n	8005ae8 <__ieee754_pow+0x340>
 8005eb6:	2400      	movs	r4, #0
 8005eb8:	e68a      	b.n	8005bd0 <__ieee754_pow+0x428>
 8005eba:	2601      	movs	r6, #1
 8005ebc:	e6a0      	b.n	8005c00 <__ieee754_pow+0x458>
 8005ebe:	bf00      	nop
 8005ec0:	4a454eef 	.word	0x4a454eef
 8005ec4:	3fca7e28 	.word	0x3fca7e28
 8005ec8:	93c9db65 	.word	0x93c9db65
 8005ecc:	3fcd864a 	.word	0x3fcd864a
 8005ed0:	a91d4101 	.word	0xa91d4101
 8005ed4:	3fd17460 	.word	0x3fd17460
 8005ed8:	518f264d 	.word	0x518f264d
 8005edc:	3fd55555 	.word	0x3fd55555
 8005ee0:	db6fabff 	.word	0xdb6fabff
 8005ee4:	3fdb6db6 	.word	0x3fdb6db6
 8005ee8:	33333303 	.word	0x33333303
 8005eec:	3fe33333 	.word	0x3fe33333
 8005ef0:	e0000000 	.word	0xe0000000
 8005ef4:	3feec709 	.word	0x3feec709
 8005ef8:	dc3a03fd 	.word	0xdc3a03fd
 8005efc:	3feec709 	.word	0x3feec709
 8005f00:	145b01f5 	.word	0x145b01f5
 8005f04:	be3e2fe0 	.word	0xbe3e2fe0
 8005f08:	7ff00000 	.word	0x7ff00000
 8005f0c:	43400000 	.word	0x43400000
 8005f10:	0003988e 	.word	0x0003988e
 8005f14:	000bb679 	.word	0x000bb679
 8005f18:	08006ed8 	.word	0x08006ed8
 8005f1c:	3ff00000 	.word	0x3ff00000
 8005f20:	40080000 	.word	0x40080000
 8005f24:	08006eb8 	.word	0x08006eb8
 8005f28:	08006ec8 	.word	0x08006ec8
 8005f2c:	a39a      	add	r3, pc, #616	@ (adr r3, 8006198 <__ieee754_pow+0x9f0>)
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	4630      	mov	r0, r6
 8005f34:	4639      	mov	r1, r7
 8005f36:	f7fa f911 	bl	800015c <__adddf3>
 8005f3a:	4642      	mov	r2, r8
 8005f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8005f40:	464b      	mov	r3, r9
 8005f42:	4620      	mov	r0, r4
 8005f44:	4629      	mov	r1, r5
 8005f46:	f7fa f907 	bl	8000158 <__aeabi_dsub>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f52:	f7fa fd49 	bl	80009e8 <__aeabi_dcmpgt>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f47f ae09 	bne.w	8005b6e <__ieee754_pow+0x3c6>
 8005f5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005f60:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005f64:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8005f68:	fa43 fa0a 	asr.w	sl, r3, sl
 8005f6c:	44da      	add	sl, fp
 8005f6e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005f72:	489b      	ldr	r0, [pc, #620]	@ (80061e0 <__ieee754_pow+0xa38>)
 8005f74:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005f78:	4108      	asrs	r0, r1
 8005f7a:	ea00 030a 	and.w	r3, r0, sl
 8005f7e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005f82:	f1c1 0114 	rsb	r1, r1, #20
 8005f86:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	fa4a fa01 	asr.w	sl, sl, r1
 8005f90:	f1bb 0f00 	cmp.w	fp, #0
 8005f94:	4649      	mov	r1, r9
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	bfb8      	it	lt
 8005f9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005fa0:	f7fa f8da 	bl	8000158 <__aeabi_dsub>
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	4689      	mov	r9, r1
 8005fa8:	2400      	movs	r4, #0
 8005faa:	4632      	mov	r2, r6
 8005fac:	463b      	mov	r3, r7
 8005fae:	4640      	mov	r0, r8
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	f7fa f8d3 	bl	800015c <__adddf3>
 8005fb6:	a37a      	add	r3, pc, #488	@ (adr r3, 80061a0 <__ieee754_pow+0x9f8>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	460d      	mov	r5, r1
 8005fc0:	f7fa fa82 	bl	80004c8 <__aeabi_dmul>
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa f8c2 	bl	8000158 <__aeabi_dsub>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f7fa f8bc 	bl	8000158 <__aeabi_dsub>
 8005fe0:	a371      	add	r3, pc, #452	@ (adr r3, 80061a8 <__ieee754_pow+0xa00>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f7fa fa6f 	bl	80004c8 <__aeabi_dmul>
 8005fea:	a371      	add	r3, pc, #452	@ (adr r3, 80061b0 <__ieee754_pow+0xa08>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	4689      	mov	r9, r1
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	f7fa fa66 	bl	80004c8 <__aeabi_dmul>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa f8aa 	bl	800015c <__adddf3>
 8006008:	4604      	mov	r4, r0
 800600a:	460d      	mov	r5, r1
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006014:	f7fa f8a2 	bl	800015c <__adddf3>
 8006018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800601c:	4680      	mov	r8, r0
 800601e:	4689      	mov	r9, r1
 8006020:	f7fa f89a 	bl	8000158 <__aeabi_dsub>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa f894 	bl	8000158 <__aeabi_dsub>
 8006030:	4642      	mov	r2, r8
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	464b      	mov	r3, r9
 8006038:	4640      	mov	r0, r8
 800603a:	4649      	mov	r1, r9
 800603c:	f7fa fa44 	bl	80004c8 <__aeabi_dmul>
 8006040:	a35d      	add	r3, pc, #372	@ (adr r3, 80061b8 <__ieee754_pow+0xa10>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	4604      	mov	r4, r0
 8006048:	460d      	mov	r5, r1
 800604a:	f7fa fa3d 	bl	80004c8 <__aeabi_dmul>
 800604e:	a35c      	add	r3, pc, #368	@ (adr r3, 80061c0 <__ieee754_pow+0xa18>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f7fa f880 	bl	8000158 <__aeabi_dsub>
 8006058:	4622      	mov	r2, r4
 800605a:	462b      	mov	r3, r5
 800605c:	f7fa fa34 	bl	80004c8 <__aeabi_dmul>
 8006060:	a359      	add	r3, pc, #356	@ (adr r3, 80061c8 <__ieee754_pow+0xa20>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa f879 	bl	800015c <__adddf3>
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	f7fa fa2b 	bl	80004c8 <__aeabi_dmul>
 8006072:	a357      	add	r3, pc, #348	@ (adr r3, 80061d0 <__ieee754_pow+0xa28>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f7fa f86e 	bl	8000158 <__aeabi_dsub>
 800607c:	4622      	mov	r2, r4
 800607e:	462b      	mov	r3, r5
 8006080:	f7fa fa22 	bl	80004c8 <__aeabi_dmul>
 8006084:	a354      	add	r3, pc, #336	@ (adr r3, 80061d8 <__ieee754_pow+0xa30>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f7fa f867 	bl	800015c <__adddf3>
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	f7fa fa19 	bl	80004c8 <__aeabi_dmul>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	f7fa f85b 	bl	8000158 <__aeabi_dsub>
 80060a2:	4604      	mov	r4, r0
 80060a4:	460d      	mov	r5, r1
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4640      	mov	r0, r8
 80060ac:	4649      	mov	r1, r9
 80060ae:	f7fa fa0b 	bl	80004c8 <__aeabi_dmul>
 80060b2:	2200      	movs	r2, #0
 80060b4:	e9cd 0100 	strd	r0, r1, [sp]
 80060b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80060bc:	4620      	mov	r0, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	f7fa f84a 	bl	8000158 <__aeabi_dsub>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060cc:	f7fa fb26 	bl	800071c <__aeabi_ddiv>
 80060d0:	4632      	mov	r2, r6
 80060d2:	4604      	mov	r4, r0
 80060d4:	460d      	mov	r5, r1
 80060d6:	463b      	mov	r3, r7
 80060d8:	4640      	mov	r0, r8
 80060da:	4649      	mov	r1, r9
 80060dc:	f7fa f9f4 	bl	80004c8 <__aeabi_dmul>
 80060e0:	4632      	mov	r2, r6
 80060e2:	463b      	mov	r3, r7
 80060e4:	f7fa f83a 	bl	800015c <__adddf3>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7fa f832 	bl	8000158 <__aeabi_dsub>
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	f7fa f82e 	bl	8000158 <__aeabi_dsub>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	2000      	movs	r0, #0
 8006102:	4938      	ldr	r1, [pc, #224]	@ (80061e4 <__ieee754_pow+0xa3c>)
 8006104:	f7fa f828 	bl	8000158 <__aeabi_dsub>
 8006108:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800610c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006110:	da2e      	bge.n	8006170 <__ieee754_pow+0x9c8>
 8006112:	4652      	mov	r2, sl
 8006114:	f000 fa6c 	bl	80065f0 <scalbn>
 8006118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800611c:	f7ff bbed 	b.w	80058fa <__ieee754_pow+0x152>
 8006120:	4c31      	ldr	r4, [pc, #196]	@ (80061e8 <__ieee754_pow+0xa40>)
 8006122:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006126:	42a3      	cmp	r3, r4
 8006128:	d91a      	bls.n	8006160 <__ieee754_pow+0x9b8>
 800612a:	4b30      	ldr	r3, [pc, #192]	@ (80061ec <__ieee754_pow+0xa44>)
 800612c:	440b      	add	r3, r1
 800612e:	4303      	orrs	r3, r0
 8006130:	d009      	beq.n	8006146 <__ieee754_pow+0x99e>
 8006132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	2300      	movs	r3, #0
 800613a:	f7fa fc37 	bl	80009ac <__aeabi_dcmplt>
 800613e:	3800      	subs	r0, #0
 8006140:	bf18      	it	ne
 8006142:	2001      	movne	r0, #1
 8006144:	e444      	b.n	80059d0 <__ieee754_pow+0x228>
 8006146:	4642      	mov	r2, r8
 8006148:	464b      	mov	r3, r9
 800614a:	f7fa f805 	bl	8000158 <__aeabi_dsub>
 800614e:	4632      	mov	r2, r6
 8006150:	463b      	mov	r3, r7
 8006152:	f7fa fc3f 	bl	80009d4 <__aeabi_dcmpge>
 8006156:	2800      	cmp	r0, #0
 8006158:	d1eb      	bne.n	8006132 <__ieee754_pow+0x98a>
 800615a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80061f0 <__ieee754_pow+0xa48>
 800615e:	e6fd      	b.n	8005f5c <__ieee754_pow+0x7b4>
 8006160:	469a      	mov	sl, r3
 8006162:	4b24      	ldr	r3, [pc, #144]	@ (80061f4 <__ieee754_pow+0xa4c>)
 8006164:	459a      	cmp	sl, r3
 8006166:	f63f aef9 	bhi.w	8005f5c <__ieee754_pow+0x7b4>
 800616a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800616e:	e71b      	b.n	8005fa8 <__ieee754_pow+0x800>
 8006170:	4621      	mov	r1, r4
 8006172:	e7d1      	b.n	8006118 <__ieee754_pow+0x970>
 8006174:	2000      	movs	r0, #0
 8006176:	491b      	ldr	r1, [pc, #108]	@ (80061e4 <__ieee754_pow+0xa3c>)
 8006178:	f7ff bb34 	b.w	80057e4 <__ieee754_pow+0x3c>
 800617c:	2000      	movs	r0, #0
 800617e:	2100      	movs	r1, #0
 8006180:	f7ff bb30 	b.w	80057e4 <__ieee754_pow+0x3c>
 8006184:	4650      	mov	r0, sl
 8006186:	4659      	mov	r1, fp
 8006188:	f7ff bb2c 	b.w	80057e4 <__ieee754_pow+0x3c>
 800618c:	460c      	mov	r4, r1
 800618e:	f7ff bb79 	b.w	8005884 <__ieee754_pow+0xdc>
 8006192:	2400      	movs	r4, #0
 8006194:	f7ff bb64 	b.w	8005860 <__ieee754_pow+0xb8>
 8006198:	652b82fe 	.word	0x652b82fe
 800619c:	3c971547 	.word	0x3c971547
 80061a0:	00000000 	.word	0x00000000
 80061a4:	3fe62e43 	.word	0x3fe62e43
 80061a8:	fefa39ef 	.word	0xfefa39ef
 80061ac:	3fe62e42 	.word	0x3fe62e42
 80061b0:	0ca86c39 	.word	0x0ca86c39
 80061b4:	be205c61 	.word	0xbe205c61
 80061b8:	72bea4d0 	.word	0x72bea4d0
 80061bc:	3e663769 	.word	0x3e663769
 80061c0:	c5d26bf1 	.word	0xc5d26bf1
 80061c4:	3ebbbd41 	.word	0x3ebbbd41
 80061c8:	af25de2c 	.word	0xaf25de2c
 80061cc:	3f11566a 	.word	0x3f11566a
 80061d0:	16bebd93 	.word	0x16bebd93
 80061d4:	3f66c16c 	.word	0x3f66c16c
 80061d8:	5555553e 	.word	0x5555553e
 80061dc:	3fc55555 	.word	0x3fc55555
 80061e0:	fff00000 	.word	0xfff00000
 80061e4:	3ff00000 	.word	0x3ff00000
 80061e8:	4090cbff 	.word	0x4090cbff
 80061ec:	3f6f3400 	.word	0x3f6f3400
 80061f0:	4090cc00 	.word	0x4090cc00
 80061f4:	3fe00000 	.word	0x3fe00000

080061f8 <__ieee754_rem_pio2>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	4bc4      	ldr	r3, [pc, #784]	@ (8006510 <__ieee754_rem_pio2+0x318>)
 80061fe:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8006202:	b08d      	sub	sp, #52	@ 0x34
 8006204:	4598      	cmp	r8, r3
 8006206:	4606      	mov	r6, r0
 8006208:	460f      	mov	r7, r1
 800620a:	4614      	mov	r4, r2
 800620c:	9104      	str	r1, [sp, #16]
 800620e:	d807      	bhi.n	8006220 <__ieee754_rem_pio2+0x28>
 8006210:	e9c2 6700 	strd	r6, r7, [r2]
 8006214:	2300      	movs	r3, #0
 8006216:	2200      	movs	r2, #0
 8006218:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800621c:	2500      	movs	r5, #0
 800621e:	e026      	b.n	800626e <__ieee754_rem_pio2+0x76>
 8006220:	4bbc      	ldr	r3, [pc, #752]	@ (8006514 <__ieee754_rem_pio2+0x31c>)
 8006222:	4598      	cmp	r8, r3
 8006224:	d876      	bhi.n	8006314 <__ieee754_rem_pio2+0x11c>
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	4dbb      	ldr	r5, [pc, #748]	@ (8006518 <__ieee754_rem_pio2+0x320>)
 800622a:	2b00      	cmp	r3, #0
 800622c:	a3aa      	add	r3, pc, #680	@ (adr r3, 80064d8 <__ieee754_rem_pio2+0x2e0>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	dd38      	ble.n	80062a6 <__ieee754_rem_pio2+0xae>
 8006234:	f7f9 ff90 	bl	8000158 <__aeabi_dsub>
 8006238:	45a8      	cmp	r8, r5
 800623a:	4606      	mov	r6, r0
 800623c:	460f      	mov	r7, r1
 800623e:	d01a      	beq.n	8006276 <__ieee754_rem_pio2+0x7e>
 8006240:	a3a7      	add	r3, pc, #668	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2e8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7f9 ff87 	bl	8000158 <__aeabi_dsub>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4680      	mov	r8, r0
 8006250:	4689      	mov	r9, r1
 8006252:	4630      	mov	r0, r6
 8006254:	4639      	mov	r1, r7
 8006256:	f7f9 ff7f 	bl	8000158 <__aeabi_dsub>
 800625a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2e8>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7f9 ff7a 	bl	8000158 <__aeabi_dsub>
 8006264:	2501      	movs	r5, #1
 8006266:	e9c4 8900 	strd	r8, r9, [r4]
 800626a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800626e:	4628      	mov	r0, r5
 8006270:	b00d      	add	sp, #52	@ 0x34
 8006272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006276:	a39c      	add	r3, pc, #624	@ (adr r3, 80064e8 <__ieee754_rem_pio2+0x2f0>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7f9 ff6c 	bl	8000158 <__aeabi_dsub>
 8006280:	a39b      	add	r3, pc, #620	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x2f8>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	4606      	mov	r6, r0
 8006288:	460f      	mov	r7, r1
 800628a:	f7f9 ff65 	bl	8000158 <__aeabi_dsub>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4680      	mov	r8, r0
 8006294:	4689      	mov	r9, r1
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7f9 ff5d 	bl	8000158 <__aeabi_dsub>
 800629e:	a394      	add	r3, pc, #592	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x2f8>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	e7dc      	b.n	8006260 <__ieee754_rem_pio2+0x68>
 80062a6:	f7f9 ff59 	bl	800015c <__adddf3>
 80062aa:	45a8      	cmp	r8, r5
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	d018      	beq.n	80062e4 <__ieee754_rem_pio2+0xec>
 80062b2:	a38b      	add	r3, pc, #556	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2e8>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f7f9 ff50 	bl	800015c <__adddf3>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4680      	mov	r8, r0
 80062c2:	4689      	mov	r9, r1
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	f7f9 ff46 	bl	8000158 <__aeabi_dsub>
 80062cc:	a384      	add	r3, pc, #528	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2e8>)
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f7f9 ff43 	bl	800015c <__adddf3>
 80062d6:	f04f 35ff 	mov.w	r5, #4294967295
 80062da:	e9c4 8900 	strd	r8, r9, [r4]
 80062de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80062e2:	e7c4      	b.n	800626e <__ieee754_rem_pio2+0x76>
 80062e4:	a380      	add	r3, pc, #512	@ (adr r3, 80064e8 <__ieee754_rem_pio2+0x2f0>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7f9 ff37 	bl	800015c <__adddf3>
 80062ee:	a380      	add	r3, pc, #512	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x2f8>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	4606      	mov	r6, r0
 80062f6:	460f      	mov	r7, r1
 80062f8:	f7f9 ff30 	bl	800015c <__adddf3>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4680      	mov	r8, r0
 8006302:	4689      	mov	r9, r1
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	f7f9 ff26 	bl	8000158 <__aeabi_dsub>
 800630c:	a378      	add	r3, pc, #480	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x2f8>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	e7de      	b.n	80062d2 <__ieee754_rem_pio2+0xda>
 8006314:	4b81      	ldr	r3, [pc, #516]	@ (800651c <__ieee754_rem_pio2+0x324>)
 8006316:	4598      	cmp	r8, r3
 8006318:	f200 80cf 	bhi.w	80064ba <__ieee754_rem_pio2+0x2c2>
 800631c:	f000 f962 	bl	80065e4 <fabs>
 8006320:	a375      	add	r3, pc, #468	@ (adr r3, 80064f8 <__ieee754_rem_pio2+0x300>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	4606      	mov	r6, r0
 8006328:	460f      	mov	r7, r1
 800632a:	f7fa f8cd 	bl	80004c8 <__aeabi_dmul>
 800632e:	2200      	movs	r2, #0
 8006330:	4b7b      	ldr	r3, [pc, #492]	@ (8006520 <__ieee754_rem_pio2+0x328>)
 8006332:	f7f9 ff13 	bl	800015c <__adddf3>
 8006336:	f7fa fb77 	bl	8000a28 <__aeabi_d2iz>
 800633a:	4605      	mov	r5, r0
 800633c:	f7fa f85a 	bl	80003f4 <__aeabi_i2d>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006348:	a363      	add	r3, pc, #396	@ (adr r3, 80064d8 <__ieee754_rem_pio2+0x2e0>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f7fa f8bb 	bl	80004c8 <__aeabi_dmul>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7f9 fefd 	bl	8000158 <__aeabi_dsub>
 800635e:	a360      	add	r3, pc, #384	@ (adr r3, 80064e0 <__ieee754_rem_pio2+0x2e8>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	4682      	mov	sl, r0
 8006366:	468b      	mov	fp, r1
 8006368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636c:	f7fa f8ac 	bl	80004c8 <__aeabi_dmul>
 8006370:	2d1f      	cmp	r5, #31
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	dc0c      	bgt.n	8006392 <__ieee754_rem_pio2+0x19a>
 8006378:	4b6a      	ldr	r3, [pc, #424]	@ (8006524 <__ieee754_rem_pio2+0x32c>)
 800637a:	1e6a      	subs	r2, r5, #1
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	4543      	cmp	r3, r8
 8006382:	d006      	beq.n	8006392 <__ieee754_rem_pio2+0x19a>
 8006384:	4632      	mov	r2, r6
 8006386:	463b      	mov	r3, r7
 8006388:	4650      	mov	r0, sl
 800638a:	4659      	mov	r1, fp
 800638c:	f7f9 fee4 	bl	8000158 <__aeabi_dsub>
 8006390:	e00e      	b.n	80063b0 <__ieee754_rem_pio2+0x1b8>
 8006392:	463b      	mov	r3, r7
 8006394:	4632      	mov	r2, r6
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	f7f9 fedd 	bl	8000158 <__aeabi_dsub>
 800639e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80063a2:	9305      	str	r3, [sp, #20]
 80063a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	dc02      	bgt.n	80063b6 <__ieee754_rem_pio2+0x1be>
 80063b0:	e9c4 0100 	strd	r0, r1, [r4]
 80063b4:	e039      	b.n	800642a <__ieee754_rem_pio2+0x232>
 80063b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80064e8 <__ieee754_rem_pio2+0x2f0>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c0:	f7fa f882 	bl	80004c8 <__aeabi_dmul>
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7f9 fec2 	bl	8000158 <__aeabi_dsub>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4680      	mov	r8, r0
 80063da:	4689      	mov	r9, r1
 80063dc:	4650      	mov	r0, sl
 80063de:	4659      	mov	r1, fp
 80063e0:	f7f9 feba 	bl	8000158 <__aeabi_dsub>
 80063e4:	4632      	mov	r2, r6
 80063e6:	463b      	mov	r3, r7
 80063e8:	f7f9 feb6 	bl	8000158 <__aeabi_dsub>
 80063ec:	a340      	add	r3, pc, #256	@ (adr r3, 80064f0 <__ieee754_rem_pio2+0x2f8>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	4606      	mov	r6, r0
 80063f4:	460f      	mov	r7, r1
 80063f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fa:	f7fa f865 	bl	80004c8 <__aeabi_dmul>
 80063fe:	4632      	mov	r2, r6
 8006400:	463b      	mov	r3, r7
 8006402:	f7f9 fea9 	bl	8000158 <__aeabi_dsub>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4606      	mov	r6, r0
 800640c:	460f      	mov	r7, r1
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7f9 fea1 	bl	8000158 <__aeabi_dsub>
 8006416:	9a05      	ldr	r2, [sp, #20]
 8006418:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b31      	cmp	r3, #49	@ 0x31
 8006420:	dc20      	bgt.n	8006464 <__ieee754_rem_pio2+0x26c>
 8006422:	46c2      	mov	sl, r8
 8006424:	46cb      	mov	fp, r9
 8006426:	e9c4 0100 	strd	r0, r1, [r4]
 800642a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800642e:	4650      	mov	r0, sl
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	4659      	mov	r1, fp
 8006436:	f7f9 fe8f 	bl	8000158 <__aeabi_dsub>
 800643a:	463b      	mov	r3, r7
 800643c:	4632      	mov	r2, r6
 800643e:	f7f9 fe8b 	bl	8000158 <__aeabi_dsub>
 8006442:	9b04      	ldr	r3, [sp, #16]
 8006444:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f6bf af10 	bge.w	800626e <__ieee754_rem_pio2+0x76>
 800644e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006452:	6063      	str	r3, [r4, #4]
 8006454:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006458:	f8c4 8000 	str.w	r8, [r4]
 800645c:	60a0      	str	r0, [r4, #8]
 800645e:	60e3      	str	r3, [r4, #12]
 8006460:	426d      	negs	r5, r5
 8006462:	e704      	b.n	800626e <__ieee754_rem_pio2+0x76>
 8006464:	a326      	add	r3, pc, #152	@ (adr r3, 8006500 <__ieee754_rem_pio2+0x308>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646e:	f7fa f82b 	bl	80004c8 <__aeabi_dmul>
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	f7f9 fe6b 	bl	8000158 <__aeabi_dsub>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4682      	mov	sl, r0
 8006488:	468b      	mov	fp, r1
 800648a:	4640      	mov	r0, r8
 800648c:	4649      	mov	r1, r9
 800648e:	f7f9 fe63 	bl	8000158 <__aeabi_dsub>
 8006492:	4632      	mov	r2, r6
 8006494:	463b      	mov	r3, r7
 8006496:	f7f9 fe5f 	bl	8000158 <__aeabi_dsub>
 800649a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006508 <__ieee754_rem_pio2+0x310>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	4606      	mov	r6, r0
 80064a2:	460f      	mov	r7, r1
 80064a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a8:	f7fa f80e 	bl	80004c8 <__aeabi_dmul>
 80064ac:	4632      	mov	r2, r6
 80064ae:	463b      	mov	r3, r7
 80064b0:	f7f9 fe52 	bl	8000158 <__aeabi_dsub>
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	e764      	b.n	8006384 <__ieee754_rem_pio2+0x18c>
 80064ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <__ieee754_rem_pio2+0x330>)
 80064bc:	4598      	cmp	r8, r3
 80064be:	d935      	bls.n	800652c <__ieee754_rem_pio2+0x334>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	f7f9 fe48 	bl	8000158 <__aeabi_dsub>
 80064c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064cc:	e9c4 0100 	strd	r0, r1, [r4]
 80064d0:	e6a4      	b.n	800621c <__ieee754_rem_pio2+0x24>
 80064d2:	bf00      	nop
 80064d4:	f3af 8000 	nop.w
 80064d8:	54400000 	.word	0x54400000
 80064dc:	3ff921fb 	.word	0x3ff921fb
 80064e0:	1a626331 	.word	0x1a626331
 80064e4:	3dd0b461 	.word	0x3dd0b461
 80064e8:	1a600000 	.word	0x1a600000
 80064ec:	3dd0b461 	.word	0x3dd0b461
 80064f0:	2e037073 	.word	0x2e037073
 80064f4:	3ba3198a 	.word	0x3ba3198a
 80064f8:	6dc9c883 	.word	0x6dc9c883
 80064fc:	3fe45f30 	.word	0x3fe45f30
 8006500:	2e000000 	.word	0x2e000000
 8006504:	3ba3198a 	.word	0x3ba3198a
 8006508:	252049c1 	.word	0x252049c1
 800650c:	397b839a 	.word	0x397b839a
 8006510:	3fe921fb 	.word	0x3fe921fb
 8006514:	4002d97b 	.word	0x4002d97b
 8006518:	3ff921fb 	.word	0x3ff921fb
 800651c:	413921fb 	.word	0x413921fb
 8006520:	3fe00000 	.word	0x3fe00000
 8006524:	08006ee8 	.word	0x08006ee8
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006530:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006534:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006538:	460f      	mov	r7, r1
 800653a:	f7fa fa75 	bl	8000a28 <__aeabi_d2iz>
 800653e:	f7f9 ff59 	bl	80003f4 <__aeabi_i2d>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800654e:	f7f9 fe03 	bl	8000158 <__aeabi_dsub>
 8006552:	2200      	movs	r2, #0
 8006554:	4b21      	ldr	r3, [pc, #132]	@ (80065dc <__ieee754_rem_pio2+0x3e4>)
 8006556:	f7f9 ffb7 	bl	80004c8 <__aeabi_dmul>
 800655a:	460f      	mov	r7, r1
 800655c:	4606      	mov	r6, r0
 800655e:	f7fa fa63 	bl	8000a28 <__aeabi_d2iz>
 8006562:	f7f9 ff47 	bl	80003f4 <__aeabi_i2d>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006572:	f7f9 fdf1 	bl	8000158 <__aeabi_dsub>
 8006576:	2200      	movs	r2, #0
 8006578:	4b18      	ldr	r3, [pc, #96]	@ (80065dc <__ieee754_rem_pio2+0x3e4>)
 800657a:	f7f9 ffa5 	bl	80004c8 <__aeabi_dmul>
 800657e:	f04f 0803 	mov.w	r8, #3
 8006582:	2600      	movs	r6, #0
 8006584:	2700      	movs	r7, #0
 8006586:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800658a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800658e:	4632      	mov	r2, r6
 8006590:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006594:	463b      	mov	r3, r7
 8006596:	46c2      	mov	sl, r8
 8006598:	f108 38ff 	add.w	r8, r8, #4294967295
 800659c:	f7fa f9fc 	bl	8000998 <__aeabi_dcmpeq>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d1f4      	bne.n	800658e <__ieee754_rem_pio2+0x396>
 80065a4:	4b0e      	ldr	r3, [pc, #56]	@ (80065e0 <__ieee754_rem_pio2+0x3e8>)
 80065a6:	462a      	mov	r2, r5
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	2302      	movs	r3, #2
 80065ac:	4621      	mov	r1, r4
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	a806      	add	r0, sp, #24
 80065b2:	4653      	mov	r3, sl
 80065b4:	f000 f8ba 	bl	800672c <__kernel_rem_pio2>
 80065b8:	9b04      	ldr	r3, [sp, #16]
 80065ba:	4605      	mov	r5, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f6bf ae56 	bge.w	800626e <__ieee754_rem_pio2+0x76>
 80065c2:	e9d4 2100 	ldrd	r2, r1, [r4]
 80065c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065ca:	e9c4 2300 	strd	r2, r3, [r4]
 80065ce:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80065d2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065d6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80065da:	e741      	b.n	8006460 <__ieee754_rem_pio2+0x268>
 80065dc:	41700000 	.word	0x41700000
 80065e0:	08006f68 	.word	0x08006f68

080065e4 <fabs>:
 80065e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80065e8:	4619      	mov	r1, r3
 80065ea:	4770      	bx	lr
 80065ec:	0000      	movs	r0, r0
	...

080065f0 <scalbn>:
 80065f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80065f4:	4616      	mov	r6, r2
 80065f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80065fa:	4683      	mov	fp, r0
 80065fc:	468c      	mov	ip, r1
 80065fe:	460b      	mov	r3, r1
 8006600:	b982      	cbnz	r2, 8006624 <scalbn+0x34>
 8006602:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006606:	4303      	orrs	r3, r0
 8006608:	d039      	beq.n	800667e <scalbn+0x8e>
 800660a:	4b2f      	ldr	r3, [pc, #188]	@ (80066c8 <scalbn+0xd8>)
 800660c:	2200      	movs	r2, #0
 800660e:	f7f9 ff5b 	bl	80004c8 <__aeabi_dmul>
 8006612:	4b2e      	ldr	r3, [pc, #184]	@ (80066cc <scalbn+0xdc>)
 8006614:	4683      	mov	fp, r0
 8006616:	429e      	cmp	r6, r3
 8006618:	468c      	mov	ip, r1
 800661a:	da0d      	bge.n	8006638 <scalbn+0x48>
 800661c:	a326      	add	r3, pc, #152	@ (adr r3, 80066b8 <scalbn+0xc8>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	e01b      	b.n	800665c <scalbn+0x6c>
 8006624:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006628:	42ba      	cmp	r2, r7
 800662a:	d109      	bne.n	8006640 <scalbn+0x50>
 800662c:	4602      	mov	r2, r0
 800662e:	f7f9 fd95 	bl	800015c <__adddf3>
 8006632:	4683      	mov	fp, r0
 8006634:	468c      	mov	ip, r1
 8006636:	e022      	b.n	800667e <scalbn+0x8e>
 8006638:	460b      	mov	r3, r1
 800663a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800663e:	3a36      	subs	r2, #54	@ 0x36
 8006640:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006644:	428e      	cmp	r6, r1
 8006646:	dd0c      	ble.n	8006662 <scalbn+0x72>
 8006648:	a31d      	add	r3, pc, #116	@ (adr r3, 80066c0 <scalbn+0xd0>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	461c      	mov	r4, r3
 8006650:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8006654:	f361 74df 	bfi	r4, r1, #31, #1
 8006658:	4621      	mov	r1, r4
 800665a:	481d      	ldr	r0, [pc, #116]	@ (80066d0 <scalbn+0xe0>)
 800665c:	f7f9 ff34 	bl	80004c8 <__aeabi_dmul>
 8006660:	e7e7      	b.n	8006632 <scalbn+0x42>
 8006662:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006666:	4432      	add	r2, r6
 8006668:	428a      	cmp	r2, r1
 800666a:	dced      	bgt.n	8006648 <scalbn+0x58>
 800666c:	2a00      	cmp	r2, #0
 800666e:	dd0a      	ble.n	8006686 <scalbn+0x96>
 8006670:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006674:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006678:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800667c:	46ac      	mov	ip, r5
 800667e:	4658      	mov	r0, fp
 8006680:	4661      	mov	r1, ip
 8006682:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006686:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800668a:	da09      	bge.n	80066a0 <scalbn+0xb0>
 800668c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006690:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8006694:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8006698:	480e      	ldr	r0, [pc, #56]	@ (80066d4 <scalbn+0xe4>)
 800669a:	f041 011f 	orr.w	r1, r1, #31
 800669e:	e7bd      	b.n	800661c <scalbn+0x2c>
 80066a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80066a4:	3236      	adds	r2, #54	@ 0x36
 80066a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80066aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066ae:	4658      	mov	r0, fp
 80066b0:	4629      	mov	r1, r5
 80066b2:	2200      	movs	r2, #0
 80066b4:	4b08      	ldr	r3, [pc, #32]	@ (80066d8 <scalbn+0xe8>)
 80066b6:	e7d1      	b.n	800665c <scalbn+0x6c>
 80066b8:	c2f8f359 	.word	0xc2f8f359
 80066bc:	01a56e1f 	.word	0x01a56e1f
 80066c0:	8800759c 	.word	0x8800759c
 80066c4:	7e37e43c 	.word	0x7e37e43c
 80066c8:	43500000 	.word	0x43500000
 80066cc:	ffff3cb0 	.word	0xffff3cb0
 80066d0:	8800759c 	.word	0x8800759c
 80066d4:	c2f8f359 	.word	0xc2f8f359
 80066d8:	3c900000 	.word	0x3c900000

080066dc <with_errno>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4604      	mov	r4, r0
 80066e0:	460d      	mov	r5, r1
 80066e2:	4616      	mov	r6, r2
 80066e4:	f7fe fc7e 	bl	8004fe4 <__errno>
 80066e8:	4629      	mov	r1, r5
 80066ea:	6006      	str	r6, [r0, #0]
 80066ec:	4620      	mov	r0, r4
 80066ee:	bd70      	pop	{r4, r5, r6, pc}

080066f0 <xflow>:
 80066f0:	b513      	push	{r0, r1, r4, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	b10c      	cbz	r4, 80066fe <xflow+0xe>
 80066fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80066fe:	e9cd 2300 	strd	r2, r3, [sp]
 8006702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006706:	f7f9 fedf 	bl	80004c8 <__aeabi_dmul>
 800670a:	2222      	movs	r2, #34	@ 0x22
 800670c:	b002      	add	sp, #8
 800670e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006712:	f7ff bfe3 	b.w	80066dc <with_errno>

08006716 <__math_uflow>:
 8006716:	2200      	movs	r2, #0
 8006718:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800671c:	f7ff bfe8 	b.w	80066f0 <xflow>

08006720 <__math_oflow>:
 8006720:	2200      	movs	r2, #0
 8006722:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8006726:	f7ff bfe3 	b.w	80066f0 <xflow>
	...

0800672c <__kernel_rem_pio2>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	9104      	str	r1, [sp, #16]
 8006738:	4bb6      	ldr	r3, [pc, #728]	@ (8006a14 <__kernel_rem_pio2+0x2e8>)
 800673a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800673c:	f112 0f14 	cmn.w	r2, #20
 8006740:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006744:	bfa8      	it	ge
 8006746:	1ed4      	subge	r4, r2, #3
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	9b08      	ldr	r3, [sp, #32]
 800674c:	bfb8      	it	lt
 800674e:	2400      	movlt	r4, #0
 8006750:	f103 33ff 	add.w	r3, r3, #4294967295
 8006754:	9306      	str	r3, [sp, #24]
 8006756:	bfa4      	itt	ge
 8006758:	2318      	movge	r3, #24
 800675a:	fb94 f4f3 	sdivge	r4, r4, r3
 800675e:	f06f 0317 	mvn.w	r3, #23
 8006762:	fb04 3303 	mla	r3, r4, r3, r3
 8006766:	eb03 0a02 	add.w	sl, r3, r2
 800676a:	9a06      	ldr	r2, [sp, #24]
 800676c:	9b02      	ldr	r3, [sp, #8]
 800676e:	1aa7      	subs	r7, r4, r2
 8006770:	eb03 0802 	add.w	r8, r3, r2
 8006774:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8006776:	2500      	movs	r5, #0
 8006778:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	9009      	str	r0, [sp, #36]	@ 0x24
 8006782:	ae20      	add	r6, sp, #128	@ 0x80
 8006784:	4545      	cmp	r5, r8
 8006786:	dd14      	ble.n	80067b2 <__kernel_rem_pio2+0x86>
 8006788:	f04f 0800 	mov.w	r8, #0
 800678c:	9a08      	ldr	r2, [sp, #32]
 800678e:	ab20      	add	r3, sp, #128	@ 0x80
 8006790:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006794:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	4598      	cmp	r8, r3
 800679c:	dc35      	bgt.n	800680a <__kernel_rem_pio2+0xde>
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	2200      	movs	r2, #0
 80067a2:	f1a3 0908 	sub.w	r9, r3, #8
 80067a6:	2300      	movs	r3, #0
 80067a8:	462f      	mov	r7, r5
 80067aa:	2600      	movs	r6, #0
 80067ac:	e9cd 2300 	strd	r2, r3, [sp]
 80067b0:	e01f      	b.n	80067f2 <__kernel_rem_pio2+0xc6>
 80067b2:	42ef      	cmn	r7, r5
 80067b4:	d40b      	bmi.n	80067ce <__kernel_rem_pio2+0xa2>
 80067b6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80067ba:	e9cd 2300 	strd	r2, r3, [sp]
 80067be:	f7f9 fe19 	bl	80003f4 <__aeabi_i2d>
 80067c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067c6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80067ca:	3501      	adds	r5, #1
 80067cc:	e7da      	b.n	8006784 <__kernel_rem_pio2+0x58>
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	e7f8      	b.n	80067c6 <__kernel_rem_pio2+0x9a>
 80067d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80067dc:	f7f9 fe74 	bl	80004c8 <__aeabi_dmul>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067e8:	f7f9 fcb8 	bl	800015c <__adddf3>
 80067ec:	e9cd 0100 	strd	r0, r1, [sp]
 80067f0:	3601      	adds	r6, #1
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	3f08      	subs	r7, #8
 80067f6:	429e      	cmp	r6, r3
 80067f8:	ddec      	ble.n	80067d4 <__kernel_rem_pio2+0xa8>
 80067fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	e8eb 2302 	strd	r2, r3, [fp], #8
 8006806:	3508      	adds	r5, #8
 8006808:	e7c6      	b.n	8006798 <__kernel_rem_pio2+0x6c>
 800680a:	9b02      	ldr	r3, [sp, #8]
 800680c:	aa0c      	add	r2, sp, #48	@ 0x30
 800680e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006814:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8006816:	f8dd b008 	ldr.w	fp, [sp, #8]
 800681a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800681e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006820:	ab98      	add	r3, sp, #608	@ 0x260
 8006822:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006826:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800682a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800682c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006830:	ae0c      	add	r6, sp, #48	@ 0x30
 8006832:	4698      	mov	r8, r3
 8006834:	46b1      	mov	r9, r6
 8006836:	465f      	mov	r7, fp
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	2f00      	cmp	r7, #0
 800683c:	f1a8 0808 	sub.w	r8, r8, #8
 8006840:	dc71      	bgt.n	8006926 <__kernel_rem_pio2+0x1fa>
 8006842:	4652      	mov	r2, sl
 8006844:	4620      	mov	r0, r4
 8006846:	4629      	mov	r1, r5
 8006848:	f7ff fed2 	bl	80065f0 <scalbn>
 800684c:	2200      	movs	r2, #0
 800684e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006852:	4604      	mov	r4, r0
 8006854:	460d      	mov	r5, r1
 8006856:	f7f9 fe37 	bl	80004c8 <__aeabi_dmul>
 800685a:	f000 fa8d 	bl	8006d78 <floor>
 800685e:	2200      	movs	r2, #0
 8006860:	4b6d      	ldr	r3, [pc, #436]	@ (8006a18 <__kernel_rem_pio2+0x2ec>)
 8006862:	f7f9 fe31 	bl	80004c8 <__aeabi_dmul>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4620      	mov	r0, r4
 800686c:	4629      	mov	r1, r5
 800686e:	f7f9 fc73 	bl	8000158 <__aeabi_dsub>
 8006872:	460d      	mov	r5, r1
 8006874:	4604      	mov	r4, r0
 8006876:	f7fa f8d7 	bl	8000a28 <__aeabi_d2iz>
 800687a:	9005      	str	r0, [sp, #20]
 800687c:	f7f9 fdba 	bl	80003f4 <__aeabi_i2d>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 fc66 	bl	8000158 <__aeabi_dsub>
 800688c:	f1ba 0f00 	cmp.w	sl, #0
 8006890:	4680      	mov	r8, r0
 8006892:	4689      	mov	r9, r1
 8006894:	dd6d      	ble.n	8006972 <__kernel_rem_pio2+0x246>
 8006896:	f10b 31ff 	add.w	r1, fp, #4294967295
 800689a:	ab0c      	add	r3, sp, #48	@ 0x30
 800689c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068a0:	9c05      	ldr	r4, [sp, #20]
 80068a2:	f1ca 0018 	rsb	r0, sl, #24
 80068a6:	fa43 f200 	asr.w	r2, r3, r0
 80068aa:	4414      	add	r4, r2
 80068ac:	4082      	lsls	r2, r0
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80068b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80068b6:	f1ca 0217 	rsb	r2, sl, #23
 80068ba:	9405      	str	r4, [sp, #20]
 80068bc:	4113      	asrs	r3, r2
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dd64      	ble.n	8006990 <__kernel_rem_pio2+0x264>
 80068c6:	2200      	movs	r2, #0
 80068c8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80068cc:	4614      	mov	r4, r2
 80068ce:	9b05      	ldr	r3, [sp, #20]
 80068d0:	3301      	adds	r3, #1
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	4593      	cmp	fp, r2
 80068d6:	f300 80ab 	bgt.w	8006a30 <__kernel_rem_pio2+0x304>
 80068da:	f1ba 0f00 	cmp.w	sl, #0
 80068de:	dd07      	ble.n	80068f0 <__kernel_rem_pio2+0x1c4>
 80068e0:	f1ba 0f01 	cmp.w	sl, #1
 80068e4:	f000 80b2 	beq.w	8006a4c <__kernel_rem_pio2+0x320>
 80068e8:	f1ba 0f02 	cmp.w	sl, #2
 80068ec:	f000 80b9 	beq.w	8006a62 <__kernel_rem_pio2+0x336>
 80068f0:	9b00      	ldr	r3, [sp, #0]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d14c      	bne.n	8006990 <__kernel_rem_pio2+0x264>
 80068f6:	4642      	mov	r2, r8
 80068f8:	464b      	mov	r3, r9
 80068fa:	2000      	movs	r0, #0
 80068fc:	4947      	ldr	r1, [pc, #284]	@ (8006a1c <__kernel_rem_pio2+0x2f0>)
 80068fe:	f7f9 fc2b 	bl	8000158 <__aeabi_dsub>
 8006902:	4680      	mov	r8, r0
 8006904:	4689      	mov	r9, r1
 8006906:	2c00      	cmp	r4, #0
 8006908:	d042      	beq.n	8006990 <__kernel_rem_pio2+0x264>
 800690a:	4652      	mov	r2, sl
 800690c:	2000      	movs	r0, #0
 800690e:	4943      	ldr	r1, [pc, #268]	@ (8006a1c <__kernel_rem_pio2+0x2f0>)
 8006910:	f7ff fe6e 	bl	80065f0 <scalbn>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	f7f9 fc1c 	bl	8000158 <__aeabi_dsub>
 8006920:	4680      	mov	r8, r0
 8006922:	4689      	mov	r9, r1
 8006924:	e034      	b.n	8006990 <__kernel_rem_pio2+0x264>
 8006926:	2200      	movs	r2, #0
 8006928:	4b3d      	ldr	r3, [pc, #244]	@ (8006a20 <__kernel_rem_pio2+0x2f4>)
 800692a:	4620      	mov	r0, r4
 800692c:	4629      	mov	r1, r5
 800692e:	f7f9 fdcb 	bl	80004c8 <__aeabi_dmul>
 8006932:	f7fa f879 	bl	8000a28 <__aeabi_d2iz>
 8006936:	f7f9 fd5d 	bl	80003f4 <__aeabi_i2d>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	e9cd 2300 	strd	r2, r3, [sp]
 8006942:	2200      	movs	r2, #0
 8006944:	4b37      	ldr	r3, [pc, #220]	@ (8006a24 <__kernel_rem_pio2+0x2f8>)
 8006946:	f7f9 fdbf 	bl	80004c8 <__aeabi_dmul>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7f9 fc01 	bl	8000158 <__aeabi_dsub>
 8006956:	f7fa f867 	bl	8000a28 <__aeabi_d2iz>
 800695a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800695e:	f849 0b04 	str.w	r0, [r9], #4
 8006962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006966:	f7f9 fbf9 	bl	800015c <__adddf3>
 800696a:	3f01      	subs	r7, #1
 800696c:	4604      	mov	r4, r0
 800696e:	460d      	mov	r5, r1
 8006970:	e763      	b.n	800683a <__kernel_rem_pio2+0x10e>
 8006972:	d106      	bne.n	8006982 <__kernel_rem_pio2+0x256>
 8006974:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006978:	aa0c      	add	r2, sp, #48	@ 0x30
 800697a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697e:	15db      	asrs	r3, r3, #23
 8006980:	e79d      	b.n	80068be <__kernel_rem_pio2+0x192>
 8006982:	2200      	movs	r2, #0
 8006984:	4b28      	ldr	r3, [pc, #160]	@ (8006a28 <__kernel_rem_pio2+0x2fc>)
 8006986:	f7fa f825 	bl	80009d4 <__aeabi_dcmpge>
 800698a:	2800      	cmp	r0, #0
 800698c:	d13f      	bne.n	8006a0e <__kernel_rem_pio2+0x2e2>
 800698e:	9000      	str	r0, [sp, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	2300      	movs	r3, #0
 8006994:	4640      	mov	r0, r8
 8006996:	4649      	mov	r1, r9
 8006998:	f7f9 fffe 	bl	8000998 <__aeabi_dcmpeq>
 800699c:	2800      	cmp	r0, #0
 800699e:	f000 80af 	beq.w	8006b00 <__kernel_rem_pio2+0x3d4>
 80069a2:	2200      	movs	r2, #0
 80069a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80069a8:	9902      	ldr	r1, [sp, #8]
 80069aa:	428b      	cmp	r3, r1
 80069ac:	da61      	bge.n	8006a72 <__kernel_rem_pio2+0x346>
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	d076      	beq.n	8006aa0 <__kernel_rem_pio2+0x374>
 80069b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80069b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80069bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f6      	beq.n	80069b2 <__kernel_rem_pio2+0x286>
 80069c4:	4652      	mov	r2, sl
 80069c6:	2000      	movs	r0, #0
 80069c8:	4914      	ldr	r1, [pc, #80]	@ (8006a1c <__kernel_rem_pio2+0x2f0>)
 80069ca:	f7ff fe11 	bl	80065f0 <scalbn>
 80069ce:	465d      	mov	r5, fp
 80069d0:	4606      	mov	r6, r0
 80069d2:	460f      	mov	r7, r1
 80069d4:	f04f 0900 	mov.w	r9, #0
 80069d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80069da:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8006a20 <__kernel_rem_pio2+0x2f4>
 80069de:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80069e2:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 80069e6:	2d00      	cmp	r5, #0
 80069e8:	f280 80c0 	bge.w	8006b6c <__kernel_rem_pio2+0x440>
 80069ec:	465d      	mov	r5, fp
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	f2c0 80f0 	blt.w	8006bd4 <__kernel_rem_pio2+0x4a8>
 80069f4:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <__kernel_rem_pio2+0x300>)
 80069f6:	f04f 0900 	mov.w	r9, #0
 80069fa:	9306      	str	r3, [sp, #24]
 80069fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80069fe:	f04f 0a00 	mov.w	sl, #0
 8006a02:	2700      	movs	r7, #0
 8006a04:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8006a08:	ebab 0605 	sub.w	r6, fp, r5
 8006a0c:	e0d6      	b.n	8006bbc <__kernel_rem_pio2+0x490>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	e758      	b.n	80068c6 <__kernel_rem_pio2+0x19a>
 8006a14:	080070b0 	.word	0x080070b0
 8006a18:	40200000 	.word	0x40200000
 8006a1c:	3ff00000 	.word	0x3ff00000
 8006a20:	3e700000 	.word	0x3e700000
 8006a24:	41700000 	.word	0x41700000
 8006a28:	3fe00000 	.word	0x3fe00000
 8006a2c:	08007070 	.word	0x08007070
 8006a30:	f856 3b04 	ldr.w	r3, [r6], #4
 8006a34:	b944      	cbnz	r4, 8006a48 <__kernel_rem_pio2+0x31c>
 8006a36:	b123      	cbz	r3, 8006a42 <__kernel_rem_pio2+0x316>
 8006a38:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006a3c:	f846 3c04 	str.w	r3, [r6, #-4]
 8006a40:	2301      	movs	r3, #1
 8006a42:	461c      	mov	r4, r3
 8006a44:	3201      	adds	r2, #1
 8006a46:	e745      	b.n	80068d4 <__kernel_rem_pio2+0x1a8>
 8006a48:	1acb      	subs	r3, r1, r3
 8006a4a:	e7f7      	b.n	8006a3c <__kernel_rem_pio2+0x310>
 8006a4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006a50:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a5a:	a90c      	add	r1, sp, #48	@ 0x30
 8006a5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a60:	e746      	b.n	80068f0 <__kernel_rem_pio2+0x1c4>
 8006a62:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006a66:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006a70:	e7f3      	b.n	8006a5a <__kernel_rem_pio2+0x32e>
 8006a72:	a90c      	add	r1, sp, #48	@ 0x30
 8006a74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	e794      	b.n	80069a8 <__kernel_rem_pio2+0x27c>
 8006a7e:	3401      	adds	r4, #1
 8006a80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	d0fa      	beq.n	8006a7e <__kernel_rem_pio2+0x352>
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	aa20      	add	r2, sp, #128	@ 0x80
 8006a8c:	445b      	add	r3, fp
 8006a8e:	f10b 0801 	add.w	r8, fp, #1
 8006a92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006a96:	445c      	add	r4, fp
 8006a98:	4544      	cmp	r4, r8
 8006a9a:	da04      	bge.n	8006aa6 <__kernel_rem_pio2+0x37a>
 8006a9c:	46a3      	mov	fp, r4
 8006a9e:	e6bf      	b.n	8006820 <__kernel_rem_pio2+0xf4>
 8006aa0:	2401      	movs	r4, #1
 8006aa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aa4:	e7ec      	b.n	8006a80 <__kernel_rem_pio2+0x354>
 8006aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa8:	46ab      	mov	fp, r5
 8006aaa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006aae:	f7f9 fca1 	bl	80003f4 <__aeabi_i2d>
 8006ab2:	f04f 0900 	mov.w	r9, #0
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	2700      	movs	r7, #0
 8006aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006abc:	e9c5 0100 	strd	r0, r1, [r5]
 8006ac0:	3b08      	subs	r3, #8
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	9b06      	ldr	r3, [sp, #24]
 8006ac6:	4599      	cmp	r9, r3
 8006ac8:	dd07      	ble.n	8006ada <__kernel_rem_pio2+0x3ae>
 8006aca:	9b07      	ldr	r3, [sp, #28]
 8006acc:	f108 0801 	add.w	r8, r8, #1
 8006ad0:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8006ad4:	3508      	adds	r5, #8
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	e7de      	b.n	8006a98 <__kernel_rem_pio2+0x36c>
 8006ada:	9900      	ldr	r1, [sp, #0]
 8006adc:	f109 0901 	add.w	r9, r9, #1
 8006ae0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006ae4:	9100      	str	r1, [sp, #0]
 8006ae6:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8006aea:	f7f9 fced 	bl	80004c8 <__aeabi_dmul>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 fb31 	bl	800015c <__adddf3>
 8006afa:	4606      	mov	r6, r0
 8006afc:	460f      	mov	r7, r1
 8006afe:	e7e1      	b.n	8006ac4 <__kernel_rem_pio2+0x398>
 8006b00:	f1ca 0200 	rsb	r2, sl, #0
 8006b04:	4640      	mov	r0, r8
 8006b06:	4649      	mov	r1, r9
 8006b08:	f7ff fd72 	bl	80065f0 <scalbn>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4b97      	ldr	r3, [pc, #604]	@ (8006d6c <__kernel_rem_pio2+0x640>)
 8006b10:	4604      	mov	r4, r0
 8006b12:	460d      	mov	r5, r1
 8006b14:	f7f9 ff5e 	bl	80009d4 <__aeabi_dcmpge>
 8006b18:	b300      	cbz	r0, 8006b5c <__kernel_rem_pio2+0x430>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4b94      	ldr	r3, [pc, #592]	@ (8006d70 <__kernel_rem_pio2+0x644>)
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 fcd1 	bl	80004c8 <__aeabi_dmul>
 8006b26:	f7f9 ff7f 	bl	8000a28 <__aeabi_d2iz>
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	f7f9 fc62 	bl	80003f4 <__aeabi_i2d>
 8006b30:	2200      	movs	r2, #0
 8006b32:	4b8e      	ldr	r3, [pc, #568]	@ (8006d6c <__kernel_rem_pio2+0x640>)
 8006b34:	f7f9 fcc8 	bl	80004c8 <__aeabi_dmul>
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f7f9 fb0a 	bl	8000158 <__aeabi_dsub>
 8006b44:	f7f9 ff70 	bl	8000a28 <__aeabi_d2iz>
 8006b48:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b4a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8006b4e:	f10b 0b01 	add.w	fp, fp, #1
 8006b52:	f10a 0a18 	add.w	sl, sl, #24
 8006b56:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8006b5a:	e733      	b.n	80069c4 <__kernel_rem_pio2+0x298>
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 ff62 	bl	8000a28 <__aeabi_d2iz>
 8006b64:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b66:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8006b6a:	e72b      	b.n	80069c4 <__kernel_rem_pio2+0x298>
 8006b6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b72:	f7f9 fc3f 	bl	80003f4 <__aeabi_i2d>
 8006b76:	4632      	mov	r2, r6
 8006b78:	463b      	mov	r3, r7
 8006b7a:	f7f9 fca5 	bl	80004c8 <__aeabi_dmul>
 8006b7e:	464a      	mov	r2, r9
 8006b80:	e868 0102 	strd	r0, r1, [r8], #-8
 8006b84:	4653      	mov	r3, sl
 8006b86:	4630      	mov	r0, r6
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7f9 fc9d 	bl	80004c8 <__aeabi_dmul>
 8006b8e:	3d01      	subs	r5, #1
 8006b90:	4606      	mov	r6, r0
 8006b92:	460f      	mov	r7, r1
 8006b94:	e727      	b.n	80069e6 <__kernel_rem_pio2+0x2ba>
 8006b96:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006b9a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006b9e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006ba2:	f8cd c018 	str.w	ip, [sp, #24]
 8006ba6:	f7f9 fc8f 	bl	80004c8 <__aeabi_dmul>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4648      	mov	r0, r9
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	f7f9 fad3 	bl	800015c <__adddf3>
 8006bb6:	4681      	mov	r9, r0
 8006bb8:	468a      	mov	sl, r1
 8006bba:	3701      	adds	r7, #1
 8006bbc:	9b02      	ldr	r3, [sp, #8]
 8006bbe:	429f      	cmp	r7, r3
 8006bc0:	dc01      	bgt.n	8006bc6 <__kernel_rem_pio2+0x49a>
 8006bc2:	42be      	cmp	r6, r7
 8006bc4:	dae7      	bge.n	8006b96 <__kernel_rem_pio2+0x46a>
 8006bc6:	ab48      	add	r3, sp, #288	@ 0x120
 8006bc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006bcc:	e9c6 9a00 	strd	r9, sl, [r6]
 8006bd0:	3d01      	subs	r5, #1
 8006bd2:	e70c      	b.n	80069ee <__kernel_rem_pio2+0x2c2>
 8006bd4:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	dc09      	bgt.n	8006bee <__kernel_rem_pio2+0x4c2>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dc2c      	bgt.n	8006c38 <__kernel_rem_pio2+0x50c>
 8006bde:	d04e      	beq.n	8006c7e <__kernel_rem_pio2+0x552>
 8006be0:	9b05      	ldr	r3, [sp, #20]
 8006be2:	f003 0007 	and.w	r0, r3, #7
 8006be6:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bee:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d1f5      	bne.n	8006be0 <__kernel_rem_pio2+0x4b4>
 8006bf4:	ab48      	add	r3, sp, #288	@ 0x120
 8006bf6:	441c      	add	r4, r3
 8006bf8:	4625      	mov	r5, r4
 8006bfa:	46da      	mov	sl, fp
 8006bfc:	f1ba 0f00 	cmp.w	sl, #0
 8006c00:	dc63      	bgt.n	8006cca <__kernel_rem_pio2+0x59e>
 8006c02:	4625      	mov	r5, r4
 8006c04:	46da      	mov	sl, fp
 8006c06:	f1ba 0f01 	cmp.w	sl, #1
 8006c0a:	dc7b      	bgt.n	8006d04 <__kernel_rem_pio2+0x5d8>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	f1bb 0f01 	cmp.w	fp, #1
 8006c14:	f300 8093 	bgt.w	8006d3e <__kernel_rem_pio2+0x612>
 8006c18:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006c1c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006c20:	9b00      	ldr	r3, [sp, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f040 8092 	bne.w	8006d4c <__kernel_rem_pio2+0x620>
 8006c28:	9b04      	ldr	r3, [sp, #16]
 8006c2a:	e9c3 7800 	strd	r7, r8, [r3]
 8006c2e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006c32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006c36:	e7d3      	b.n	8006be0 <__kernel_rem_pio2+0x4b4>
 8006c38:	465d      	mov	r5, fp
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	ab48      	add	r3, sp, #288	@ 0x120
 8006c40:	441c      	add	r4, r3
 8006c42:	2d00      	cmp	r5, #0
 8006c44:	da32      	bge.n	8006cac <__kernel_rem_pio2+0x580>
 8006c46:	9b00      	ldr	r3, [sp, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d035      	beq.n	8006cb8 <__kernel_rem_pio2+0x58c>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c52:	9c04      	ldr	r4, [sp, #16]
 8006c54:	2501      	movs	r5, #1
 8006c56:	e9c4 2300 	strd	r2, r3, [r4]
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006c62:	f7f9 fa79 	bl	8000158 <__aeabi_dsub>
 8006c66:	ac48      	add	r4, sp, #288	@ 0x120
 8006c68:	45ab      	cmp	fp, r5
 8006c6a:	da28      	bge.n	8006cbe <__kernel_rem_pio2+0x592>
 8006c6c:	9b00      	ldr	r3, [sp, #0]
 8006c6e:	b113      	cbz	r3, 8006c76 <__kernel_rem_pio2+0x54a>
 8006c70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c74:	4619      	mov	r1, r3
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006c7c:	e7b0      	b.n	8006be0 <__kernel_rem_pio2+0x4b4>
 8006c7e:	2000      	movs	r0, #0
 8006c80:	2100      	movs	r1, #0
 8006c82:	ab48      	add	r3, sp, #288	@ 0x120
 8006c84:	441c      	add	r4, r3
 8006c86:	f1bb 0f00 	cmp.w	fp, #0
 8006c8a:	da08      	bge.n	8006c9e <__kernel_rem_pio2+0x572>
 8006c8c:	9b00      	ldr	r3, [sp, #0]
 8006c8e:	b113      	cbz	r3, 8006c96 <__kernel_rem_pio2+0x56a>
 8006c90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c94:	4619      	mov	r1, r3
 8006c96:	9b04      	ldr	r3, [sp, #16]
 8006c98:	e9c3 0100 	strd	r0, r1, [r3]
 8006c9c:	e7a0      	b.n	8006be0 <__kernel_rem_pio2+0x4b4>
 8006c9e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8006ca2:	f7f9 fa5b 	bl	800015c <__adddf3>
 8006ca6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006caa:	e7ec      	b.n	8006c86 <__kernel_rem_pio2+0x55a>
 8006cac:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8006cb0:	f7f9 fa54 	bl	800015c <__adddf3>
 8006cb4:	3d01      	subs	r5, #1
 8006cb6:	e7c4      	b.n	8006c42 <__kernel_rem_pio2+0x516>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	e7c9      	b.n	8006c52 <__kernel_rem_pio2+0x526>
 8006cbe:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8006cc2:	f7f9 fa4b 	bl	800015c <__adddf3>
 8006cc6:	3501      	adds	r5, #1
 8006cc8:	e7ce      	b.n	8006c68 <__kernel_rem_pio2+0x53c>
 8006cca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cce:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cda:	f7f9 fa3f 	bl	800015c <__adddf3>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460f      	mov	r7, r1
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	4649      	mov	r1, r9
 8006cea:	f7f9 fa35 	bl	8000158 <__aeabi_dsub>
 8006cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cf2:	f7f9 fa33 	bl	800015c <__adddf3>
 8006cf6:	e865 0102 	strd	r0, r1, [r5], #-8
 8006cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cfe:	e9c5 6700 	strd	r6, r7, [r5]
 8006d02:	e77b      	b.n	8006bfc <__kernel_rem_pio2+0x4d0>
 8006d04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d08:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4649      	mov	r1, r9
 8006d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d14:	f7f9 fa22 	bl	800015c <__adddf3>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fa18 	bl	8000158 <__aeabi_dsub>
 8006d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d2c:	f7f9 fa16 	bl	800015c <__adddf3>
 8006d30:	e865 0102 	strd	r0, r1, [r5], #-8
 8006d34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d38:	e9c5 6700 	strd	r6, r7, [r5]
 8006d3c:	e763      	b.n	8006c06 <__kernel_rem_pio2+0x4da>
 8006d3e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8006d42:	f7f9 fa0b 	bl	800015c <__adddf3>
 8006d46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d4a:	e761      	b.n	8006c10 <__kernel_rem_pio2+0x4e4>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006d54:	601f      	str	r7, [r3, #0]
 8006d56:	605c      	str	r4, [r3, #4]
 8006d58:	609d      	str	r5, [r3, #8]
 8006d5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d5e:	60d3      	str	r3, [r2, #12]
 8006d60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d64:	6110      	str	r0, [r2, #16]
 8006d66:	6153      	str	r3, [r2, #20]
 8006d68:	e73a      	b.n	8006be0 <__kernel_rem_pio2+0x4b4>
 8006d6a:	bf00      	nop
 8006d6c:	41700000 	.word	0x41700000
 8006d70:	3e700000 	.word	0x3e700000
 8006d74:	00000000 	.word	0x00000000

08006d78 <floor>:
 8006d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006d80:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8006d84:	2e13      	cmp	r6, #19
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	4680      	mov	r8, r0
 8006d90:	dc35      	bgt.n	8006dfe <floor+0x86>
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	da17      	bge.n	8006dc6 <floor+0x4e>
 8006d96:	a334      	add	r3, pc, #208	@ (adr r3, 8006e68 <floor+0xf0>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f7f9 f9de 	bl	800015c <__adddf3>
 8006da0:	2200      	movs	r2, #0
 8006da2:	2300      	movs	r3, #0
 8006da4:	f7f9 fe20 	bl	80009e8 <__aeabi_dcmpgt>
 8006da8:	b150      	cbz	r0, 8006dc0 <floor+0x48>
 8006daa:	2c00      	cmp	r4, #0
 8006dac:	da57      	bge.n	8006e5e <floor+0xe6>
 8006dae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006db2:	432c      	orrs	r4, r5
 8006db4:	2500      	movs	r5, #0
 8006db6:	42ac      	cmp	r4, r5
 8006db8:	4c2d      	ldr	r4, [pc, #180]	@ (8006e70 <floor+0xf8>)
 8006dba:	bf08      	it	eq
 8006dbc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	e024      	b.n	8006e10 <floor+0x98>
 8006dc6:	4f2b      	ldr	r7, [pc, #172]	@ (8006e74 <floor+0xfc>)
 8006dc8:	4137      	asrs	r7, r6
 8006dca:	ea01 0c07 	and.w	ip, r1, r7
 8006dce:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006dd2:	d01d      	beq.n	8006e10 <floor+0x98>
 8006dd4:	a324      	add	r3, pc, #144	@ (adr r3, 8006e68 <floor+0xf0>)
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	f7f9 f9bf 	bl	800015c <__adddf3>
 8006dde:	2200      	movs	r2, #0
 8006de0:	2300      	movs	r3, #0
 8006de2:	f7f9 fe01 	bl	80009e8 <__aeabi_dcmpgt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0ea      	beq.n	8006dc0 <floor+0x48>
 8006dea:	2c00      	cmp	r4, #0
 8006dec:	bfbe      	ittt	lt
 8006dee:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006df2:	4133      	asrlt	r3, r6
 8006df4:	18e4      	addlt	r4, r4, r3
 8006df6:	2500      	movs	r5, #0
 8006df8:	ea24 0407 	bic.w	r4, r4, r7
 8006dfc:	e7e0      	b.n	8006dc0 <floor+0x48>
 8006dfe:	2e33      	cmp	r6, #51	@ 0x33
 8006e00:	dd0a      	ble.n	8006e18 <floor+0xa0>
 8006e02:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006e06:	d103      	bne.n	8006e10 <floor+0x98>
 8006e08:	f7f9 f9a8 	bl	800015c <__adddf3>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e18:	f04f 3cff 	mov.w	ip, #4294967295
 8006e1c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8006e20:	fa2c f707 	lsr.w	r7, ip, r7
 8006e24:	4207      	tst	r7, r0
 8006e26:	d0f3      	beq.n	8006e10 <floor+0x98>
 8006e28:	a30f      	add	r3, pc, #60	@ (adr r3, 8006e68 <floor+0xf0>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 f995 	bl	800015c <__adddf3>
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	f7f9 fdd7 	bl	80009e8 <__aeabi_dcmpgt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d0c0      	beq.n	8006dc0 <floor+0x48>
 8006e3e:	2c00      	cmp	r4, #0
 8006e40:	da0a      	bge.n	8006e58 <floor+0xe0>
 8006e42:	2e14      	cmp	r6, #20
 8006e44:	d101      	bne.n	8006e4a <floor+0xd2>
 8006e46:	3401      	adds	r4, #1
 8006e48:	e006      	b.n	8006e58 <floor+0xe0>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006e50:	40b3      	lsls	r3, r6
 8006e52:	441d      	add	r5, r3
 8006e54:	4545      	cmp	r5, r8
 8006e56:	d3f6      	bcc.n	8006e46 <floor+0xce>
 8006e58:	ea25 0507 	bic.w	r5, r5, r7
 8006e5c:	e7b0      	b.n	8006dc0 <floor+0x48>
 8006e5e:	2500      	movs	r5, #0
 8006e60:	462c      	mov	r4, r5
 8006e62:	e7ad      	b.n	8006dc0 <floor+0x48>
 8006e64:	f3af 8000 	nop.w
 8006e68:	8800759c 	.word	0x8800759c
 8006e6c:	7e37e43c 	.word	0x7e37e43c
 8006e70:	bff00000 	.word	0xbff00000
 8006e74:	000fffff 	.word	0x000fffff

08006e78 <_init>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr

08006e84 <_fini>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr
